{"title":"南京大学软件分析--DFA-AP","uid":"7843e3842ab5cae178372dfeef42c5ae","slug":"南京大学软件分析-DFA-AP","date":"2022-12-21T12:50:14.000Z","updated":"2023-04-21T10:26:43.524Z","comments":true,"path":"api/articles/南京大学软件分析-DFA-AP.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p>B站教程地址：<a href=\"https://www.bilibili.com/video/BV1oE411K79d/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e\">https://www.bilibili.com/video/BV1oE411K79d/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e</a></p>\n<p>英文文档地址：<a href=\"https://pascal-group.bitbucket.io/lectures/DFA-AP.pdf\">https://pascal-group.bitbucket.io/lectures/DFA-AP.pdf</a></p>\n<p>Tai-e作业文档地址：<a href=\"https://tai-e.pascal-lab.net/intro/overview.html\">https://tai-e.pascal-lab.net/intro/overview.html</a></p>\n<p><strong>DFA-AP：Data Flow Analysis—–Applocations</strong></p>\n<h2 id=\"Data-Flow-Analysis：\"><a href=\"#Data-Flow-Analysis：\" class=\"headerlink\" title=\"Data Flow Analysis：\"></a>Data Flow Analysis：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671604939836-032941a5-e131-41da-a1c5-456220c5e557.png?x-oss-process=image/resize,w_900,limit_0\" alt=\"image.png\"></p>\n<p>大多数静态分析是may analysis，这部分分析的可能是正确的，也就是over-approximation。少部分是must analysis，这部分必须是分析正确的，所以是under-approximation。两者都是为了安全的分析，称为safe-approximation。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671605365863-f44fef06-543e-4885-b2b7-b3cc3362a992.png?x-oss-process=image/resize,w_902,limit_0\" alt=\"image.png\"></p>\n<p>不同的数据流分析应用有不同的数据抽象，不同的流安全近似策略。不同的传递函数和控制流处理。</p>\n<h2 id=\"Preliminaries-of-Data-Flow-Analysis：\"><a href=\"#Preliminaries-of-Data-Flow-Analysis：\" class=\"headerlink\" title=\"Preliminaries of Data Flow Analysis：\"></a>Preliminaries of Data Flow Analysis：</h2><h3 id=\"Input-and-Output-States：\"><a href=\"#Input-and-Output-States：\" class=\"headerlink\" title=\"Input and Output States：\"></a>Input and Output States：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671605943930-c8141e49-10ed-47b1-8578-0da3d65392f4.png\" alt=\"image.png\"></p>\n<p>IR statement 每次执行都会从一个输入状态转化到一个新的输出状态。</p>\n<p>这个输入（输出）状态都与statement之前（之后）的program point相关联。</p>\n<p>IN[s1]经过s1 statement转化为了OUT[s1]，那么s2 statement的输入IN[s2]就是s1 statement的输出OUT[s1]。</p>\n<p>数据流就三种形式，直接传输，汇聚，分流。</p>\n<p>其中^ 符号是特定的处理符号，各不相同。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671606658719-2fb916ac-c563-4895-a6d0-e616e0ecd3b5.png?x-oss-process=image/resize,w_902,limit_0\" alt=\"image.png\"></p>\n<p>在每一个数据分析应用中，我们将每个program point同数据流值相关联。这个数据；流值表示可以针对该点观察到的所有的程序状态集合的抽象。也就是前面的抽象步骤，将每个语句program point都抽象。这样一组数据流的值就算该程序的域。</p>\n<p>数据流分析的目的是为所有语句的输入输出状态找到一个safe-approximation directed constraints</p>\n<ol>\n<li>constraints 基于statements的语义（传递函数）</li>\n<li>constraints 基于控制流</li>\n</ol>\n<h4 id=\"Notations-for-Transfer-Function’s-Constraints：\"><a href=\"#Notations-for-Transfer-Function’s-Constraints：\" class=\"headerlink\" title=\"Notations for Transfer Function’s Constraints：\"></a>Notations for Transfer Function’s Constraints：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671607809416-14ecb61b-e2d0-4b41-986e-e9500441cafe.png\" alt=\"image.png\"></p>\n<p>为传递函数约束定义符号。也就将program point的输入经过statement变成输出的过程用数学表达式定义：</p>\n<ol>\n<li>Forward Analysis</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/__latex/935c5056d5547d6941b8438157b15250.svg\" alt=\"img\"></p>\n<ol>\n<li>Bachward Analysis</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/__latex/8a4bf78cc62baf4e96500b5aacbe1381.svg\" alt=\"img\"></p>\n<h4 id=\"Notations-for-Control-Flow’s-Constraints：\"><a href=\"#Notations-for-Control-Flow’s-Constraints：\" class=\"headerlink\" title=\"Notations for Control Flow’s Constraints：\"></a>Notations for Control Flow’s Constraints：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671608721676-e721907b-82ec-47cf-b26d-f8a6968b8752.png\" alt=\"image.png\"></p>\n<p>为控制流约束定义符号。就算将BB之间的输入输出用数学表达式表示：</p>\n<ol>\n<li>Control flow within a BB</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/__latex/78300f4f546bacec7763c74b43ea785d.svg\" alt=\"img\">,for all i=1,2,…,n-1</p>\n<ol>\n<li>Control flow among BBs</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/__latex/2640c847481a20cef854769852e44482.svg\" alt=\"img\">    <img src=\"https://cdn.nlark.com/yuque/__latex/17db092537356555d33620f2ac47169f.svg\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/__latex/d6165914f25d6bc46a10292675409dff.svg\" alt=\"img\">,<img src=\"https://cdn.nlark.com/yuque/__latex/93069e0fe33e702658ebe3b347c52ad9.svg\" alt=\"img\"></p>\n<p>IN[b] = ^ P a predecessor of B OUT[P]</p>\n<p>这个^ 就算前面讲的汇聚流处理。</p>\n<p>反向：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/__latex/561953f0b6db288657cced8da140c728.svg\" alt=\"img\">，<img src=\"https://cdn.nlark.com/yuque/__latex/b1f022ed80c021dc9305f5661dc926e9.svg\" alt=\"img\"></p>\n<p>OUT[B]= ^ S a successor of B IN[S]</p>\n<h2 id=\"Data-Flow-Analysis-Applications：\"><a href=\"#Data-Flow-Analysis-Applications：\" class=\"headerlink\" title=\"Data Flow Analysis Applications：\"></a>Data Flow Analysis Applications：</h2><h3 id=\"Issues-Not-Covered：\"><a href=\"#Issues-Not-Covered：\" class=\"headerlink\" title=\"Issues Not Covered：\"></a>Issues Not Covered：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671609044129-5e853558-941a-4644-9825-9c1084e51076.png\" alt=\"image.png\"></p>\n<p>就是下面没有涉及的内容，后面会学。</p>\n<h3 id=\"Reaching-Definitions-Analysis：\"><a href=\"#Reaching-Definitions-Analysis：\" class=\"headerlink\" title=\"Reaching Definitions Analysis：\"></a>Reaching Definitions Analysis：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671609044129-5e853558-941a-4644-9825-9c1084e51076.png\" alt=\"image.png\"></p>\n<p>关于reaching definition的定义：存在从pragram point p到orogram point q的路径，reaching definition d是p到q的路径上未被杀掉（比如重新赋值）</p>\n<p>也就是在p处有变量v，则v从p到q没有被重新定义（如赋值）。这个变量v就是为v赋值的statement。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671610103626-fad776a0-eb32-4a54-b2ed-43df811106f0.png\" alt=\"image.png\"></p>\n<p>一个变量被使用之后能检测出来是否被初始化。给每一个变量一个伪定义。。。</p>\n<h4 id=\"后面这段不好理解，不明白讲的什么意思。\"><a href=\"#后面这段不好理解，不明白讲的什么意思。\" class=\"headerlink\" title=\"后面这段不好理解，不明白讲的什么意思。\"></a><strong>后面这段不好理解，不明白讲的什么意思。</strong></h4><h4 id=\"Understanding-Reaching-Definitions：\"><a href=\"#Understanding-Reaching-Definitions：\" class=\"headerlink\" title=\"Understanding Reaching Definitions：\"></a>Understanding Reaching Definitions：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671610934819-010785b5-6d8a-4f18-a6aa-786001f8a543.png\" alt=\"image.png\"></p>\n<p>是所有变量在程序中的定义，可以用byte vectors表示。</p>\n<p>!<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671611241079-1575130c-0c6e-4a46-9abb-33ba6378acfc.png\" alt=\"image.png\"></p>\n<p>图中语句创建一个关于变量v的definition D，并且去掉了整个程序中其他关于v的定义，但是不影响其他输入的定义，x和y。</p>\n<p>这个Transfer Funciton用下面的公式表示：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/__latex/ac0526dc12c2bd8f0b6515c5cf23caee.svg\" alt=\"img\"></p>\n<p>实列：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671611446582-8f42472f-065b-426a-a48d-c42ae03b83d4.png\" alt=\"image.png\"></p>\n<p>Control Flow：</p>\n<p>!<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671611646742-59e92b38-546c-4780-ab6a-982d84142a68.png\" alt=\"image.png\"></p>\n<p>IN[B] = U P a predecessor of B OUT[P]</p>\n<h4 id=\"Algorithm-of-Reaching-Definitions-Analysis：\"><a href=\"#Algorithm-of-Reaching-Definitions-Analysis：\" class=\"headerlink\" title=\"Algorithm of Reaching Definitions Analysis：\"></a>Algorithm of Reaching Definitions Analysis：</h4><p>!<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671611646742-59e92b38-546c-4780-ab6a-982d84142a68.png\" alt=\"image.png\"></p>\n<p>entry一般都为空，B\\entry是因为其他的初始化可能OUT[B]不为空，OUT[B]为空是因为may analysis一般情况都为空。<strong>must analysis一般为啥没听清楚好像是TOP（unkonw）</strong>。。。之后给每个basic block作一个control flow的约束。</p>\n<h4 id=\"这个while真的会停吗？\"><a href=\"#这个while真的会停吗？\" class=\"headerlink\" title=\"这个while真的会停吗？\"></a>这个while真的会停吗？</h4><p>直接来个实际的列子：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671615191405-91929e93-f618-46a3-80a0-77bfbb8c4c29.png\" alt=\"image.png\"></p>\n<p>来一遍分析：</p>\n<p>前面说了，有几个定义就有几个byte，这里的0表示不能到达1表示到达，所以开始是00000000。分析算法开始都是赋值为0，开始输入为00000000，进入while循环，执行约束条件：</p>\n<h5 id=\"第一轮循环：\"><a href=\"#第一轮循环：\" class=\"headerlink\" title=\"第一轮循环：\"></a>第一轮循环：</h5><p>IN[B1]=00000000，OUT[B1]=11000000</p>\n<p>IN[B2]=11000000，OUT[B2]=10110000</p>\n<p>这里的IN[B2]要注意，是OUT[B4]和OUT[B1]的U，开始OUT[B4]=00000000，所以IN[B2]=OUT[B1]=11000000</p>\n<p>IN[B3]=10110000，OUT[B3]=00110010</p>\n<p>IN[B4]=10110000，OUT[B4]=00111100</p>\n<p>IN[B5]=OUT[B4] U OUT[B3]=00111110，OUT[B5]=00111011</p>\n<p>输出对比开始的全部00000000有变化，所以循环：</p>\n<h5 id=\"第二轮循环：\"><a href=\"#第二轮循环：\" class=\"headerlink\" title=\"第二轮循环：\"></a>第二轮循环：</h5><p>这里要注意的就是上一轮的OUT[B4]=00111100</p>\n<p>IN[B1]=00000000，OUT[B1]=11000000</p>\n<p>IN[B2]=OUT[B1] U OUT[B4]=11111100，OUT[B2]=10111100</p>\n<p>IN[B3]=10111100，OUT[B3]=00110110</p>\n<p>IN[B4]=10111100，OUT[B4]=00111100</p>\n<p>IN[B5]=OUT[B3] U OUT[B4]=00111110，OUT[B5]=00111011</p>\n<p>还是有变化，执行下一轮：</p>\n<h5 id=\"第三轮循环：\"><a href=\"#第三轮循环：\" class=\"headerlink\" title=\"第三轮循环：\"></a>第三轮循环：</h5><p>上一轮的OUT[B4]=00111100</p>\n<p>IN[B1]=00000000，OUT[B1]=11000000</p>\n<p>IN[B2]=OUT[B1] U OUT[B4]=11111100，OUT[B2]=10111100</p>\n<p>IN[B3]=10111100，OUT[B3]=00110110</p>\n<p>IN[B4]=10111100，OUT[B4]=00111100</p>\n<p>IN[B5]=OUT[B3] U OUT[B4]=00111110，OUT[B5]=00111011</p>\n<p>这一轮的输出同上一轮的输出完全相同，所以结束循环</p>\n<h5 id=\"循环图：\"><a href=\"#循环图：\" class=\"headerlink\" title=\"循环图：\"></a>循环图：</h5><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671618364487-e413e921-0c16-45e3-a551-7e0d75d5eca1.png?x-oss-process=image/resize,w_907,limit_0\" alt=\"image.png\"></p>\n<h4 id=\"why-this-iterative-algorithm-can-finally-stop？\"><a href=\"#why-this-iterative-algorithm-can-finally-stop？\" class=\"headerlink\" title=\"why this iterative algorithm can finally stop？\"></a>why this iterative algorithm can finally stop？</h4><p>这个statement都是一样的，所以当输入一样，输出就有一样，这个输入的变化是有限的，所以最后的输出也是有限的。（可能不对）还是看ppt</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671618679798-41b40c68-c92b-4b8f-9eb3-8017e4713173.png?x-oss-process=image/resize,w_907,limit_0\" alt=\"image.png\"></p>\n<h4 id=\"Safe-to-terminate-by-this-condition\"><a href=\"#Safe-to-terminate-by-this-condition\" class=\"headerlink\" title=\"Safe to terminate by this condition?\"></a>Safe to terminate by this condition?</h4><p>达到了不动点，是安全的：</p>\n<p>!<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671618803202-73bfd538-6b1f-484d-bd9d-ea22d35adc6a.png?x-oss-process=image/resize,w_903,limit_0\" alt=\"image.png\"></p>\n<h3 id=\"Live-Variables-Analysis：\"><a href=\"#Live-Variables-Analysis：\" class=\"headerlink\" title=\"Live Variables Analysis：\"></a>Live Variables Analysis：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671619585130-a1148ee2-dca0-49dd-ae6b-996d75a9e620.png\" alt=\"image.png\"></p>\n<p>live variables analysis能告诉我们p处的变量v在从p开始的某条路径是否使用。如果使用了就算live，否则就是dead。并且可以直到在这条路径中v没有被重新定义。</p>\n<p>live variables information能用于寄存器的分配。在一些时候所有的寄存器都满了，我们需要使用，那么应该使用dead变量的寄存器。</p>\n<h4 id=\"Understanding-Live-Variables-Analysis：\"><a href=\"#Understanding-Live-Variables-Analysis：\" class=\"headerlink\" title=\"Understanding Live Variables Analysis：\"></a>Understanding Live Variables Analysis：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671620008922-65cf72ea-a555-49eb-803e-0e5e23c990e2.png\" alt=\"image.png\"></p>\n<p>所有的变量在这个应用中，能够用bit vectors表示。和前面差不多。</p>\n<p>设计成<strong>backward</strong>算法：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671621188727-30b06840-d87d-4b0c-a45e-6e67f7dc848c.png?x-oss-process=image/resize,w_908,limit_0\" alt=\"image.png\"></p>\n<p>6种情况下，IN[B]的情况。</p>\n<h4 id=\"Algorithm-of-Live-Variables-Analysis：\"><a href=\"#Algorithm-of-Live-Variables-Analysis：\" class=\"headerlink\" title=\"Algorithm of Live Variables Analysis：\"></a>Algorithm of Live Variables Analysis：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671621390354-c936de1c-5bee-4c1a-9a22-7ccf228cc83e.png?x-oss-process=image/resize,w_906,limit_0\" alt=\"image.png\"></p>\n<p>may analysis一般为空，must analysis一般为TOP。</p>\n<p>类似前面的算法，当IN改变就循环。</p>\n<p>实列：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671621598105-8e0fed14-ae35-4d32-85e8-26d1b5acaec0.png\" alt=\"image.png\"></p>\n<p><strong>这里的0表示dead，1表示live</strong></p>\n<p><strong>先看重定义再看使用，从下往上看</strong></p>\n<h5 id=\"第一轮循环：-1\"><a href=\"#第一轮循环：-1\" class=\"headerlink\" title=\"第一轮循环：\"></a>第一轮循环：</h5><p>OUT[B5]=0000000，IN[B5]=0001000</p>\n<p>OUT[B3]=0001000，IN[B3]=1001000</p>\n<p>OUT[B4]=IN[B5] U IN[B2]=0001000，IN[B4]=0101000</p>\n<p>OUT[B2]=IN[B3] U IN[B4]=1101000，IN[B2]=1001001</p>\n<p>OUT[B1]=1001001，IN[B1]=0011101</p>\n<h5 id=\"第二轮循环：-1\"><a href=\"#第二轮循环：-1\" class=\"headerlink\" title=\"第二轮循环：\"></a>第二轮循环：</h5><p>上一轮IN[B2]=1001001</p>\n<p>OUT[B5]=0000000，IN[B5]=0001000</p>\n<p>OUT[B3]=0001000，IN[B3]=1001000</p>\n<p>OUT[B4]=IN[B5] U IN[B2]=1001001 ，IN[B4]=0101001</p>\n<p>OUT[B2]=IN[B3] U IN[B4]=1101001，IN[B2]=1001001</p>\n<p>OUT[B1]=1001001，IN[B1]=0011101</p>\n<h5 id=\"第三轮循环：-1\"><a href=\"#第三轮循环：-1\" class=\"headerlink\" title=\"第三轮循环：\"></a>第三轮循环：</h5><p>上一轮IN[B2]=1001001</p>\n<p>OUT[B5]=0000000，IN[B5]=0001000</p>\n<p>OUT[B3]=0001000，IN[B3]=1001000</p>\n<p>OUT[B4]=IN[B5] U IN[B2]=1001001 ，IN[B4]=0101001</p>\n<p>OUT[B2]=IN[B3] U IN[B4]=1101001，IN[B2]=1001001</p>\n<p>OUT[B1]=1001001，IN[B1]=0011101</p>\n<h5 id=\"循环图：-1\"><a href=\"#循环图：-1\" class=\"headerlink\" title=\"循环图：\"></a>循环图：</h5><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671622104388-a416d216-07b0-4888-97f2-cc5dc335d18c.png?x-oss-process=image/resize,w_902,limit_0\" alt=\"image.png\"></p>\n<h3 id=\"Available-Expressions-Analysis：\"><a href=\"#Available-Expressions-Analysis：\" class=\"headerlink\" title=\"Available Expressions Analysis：\"></a>Available Expressions Analysis：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671623588436-b5f0cefa-78a9-4e73-8d78-dff58090dc46.png\" alt=\"image.png\"></p>\n<p>这个（1）和（2)是啥呢？</p>\n<p>如果（1）从入口到p的所有路径都必须经过表达式x op y，并且（2）在x op y最后一次求值之后，没有重新定义x或y，则表达式x op y在p点可用。</p>\n<p>这意味着在p点，可以用表达式x的最后一次求值结果替换表达式x。</p>\n<p>可用表达式信息可用于检测全局公共子表达式。</p>\n<h4 id=\"Understanding-Available-Expressions-Analysis：\"><a href=\"#Understanding-Available-Expressions-Analysis：\" class=\"headerlink\" title=\"Understanding Available Expressions Analysis：\"></a>Understanding Available Expressions Analysis：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671624099231-4cc8de33-4afe-4d8b-8900-12aa8918ef0d.png\" alt=\"image.png\"></p>\n<p>所有表达式在程序中，能用bit vectors表示。</p>\n<p>foreward算法：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671624581632-6e23dc6d-26e6-4105-8371-0c0a5b804b74.png\" alt=\"image.png\"></p>\n<p>右边的例子可以将表达式用t代替。</p>\n<p>先创建表达式，之后重新赋值就删除IN的所有包含重新赋值变量的表达式。</p>\n<p>为了safety，会产生误报，（must analysis-&gt;under-approximation）</p>\n<p>从入口到p的所有路径都要通过x op y的运算</p>\n<h4 id=\"Algorithm-of-Available-Expressions-Analysis：\"><a href=\"#Algorithm-of-Available-Expressions-Analysis：\" class=\"headerlink\" title=\"Algorithm of Available Expressions Analysis：\"></a>Algorithm of Available Expressions Analysis：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671625075430-87a1d9f4-a854-4e5a-9f75-a9268ea38f12.png?x-oss-process=image/resize,w_903,limit_0\" alt=\"image.png\"></p>\n<p>后面传递函数使用交，前面OUT[B]=U；全1；</p>\n<p>实列：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671625244539-b00dac34-a57d-4b96-9946-1c879c88ae48.png\" alt=\"image.png\"></p>\n<p>0表示不可用，1表示可用。从上到下。。。看输出</p>\n<h5 id=\"第一轮循环：-2\"><a href=\"#第一轮循环：-2\" class=\"headerlink\" title=\"第一轮循环：\"></a>第一轮循环：</h5><p>初始化OUT全为1</p>\n<p>IN[B1]=00000，OUT[B1]=10000</p>\n<p>IN[B2]=OUT[B1] n OUT[B4]=10000，OUT[B2]=01010</p>\n<p>IN[B3]=01010，OUT[B3]=00011</p>\n<p>IN[B4]=01010，OUT[B4]=01110</p>\n<p>IN[B5]=OUT[B3] n OUT[B4]=00010，OUT[B5]=01010</p>\n<h5 id=\"第二轮循环：-2\"><a href=\"#第二轮循环：-2\" class=\"headerlink\" title=\"第二轮循环：\"></a>第二轮循环：</h5><p>上一轮OUT[B4]=01110</p>\n<p>IN[B1]=00000，OUT[B1]=10000</p>\n<p>IN[B2]=OUT[B1] n OUT[B4]=00000，OUT[B2]=01010</p>\n<p>IN[B3]=01010，OUT[B3]=00011</p>\n<p>IN[B4]=01010，OUT[B4]=01110</p>\n<p>IN[B5]=OUT[B3] n OUT[B4]=00010，OUT[B5]=01010</p>\n<h5 id=\"循环图：-2\"><a href=\"#循环图：-2\" class=\"headerlink\" title=\"循环图：\"></a>循环图：</h5><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671625745214-c8b1444e-5bfe-4809-b072-ee91ca1702be.png\" alt=\"image.png\"></p>\n<h3 id=\"Analysis-Comparsion：\"><a href=\"#Analysis-Comparsion：\" class=\"headerlink\" title=\"Analysis Comparsion：\"></a>Analysis Comparsion：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671626259912-a5f4305c-e3c0-407b-b1d6-307def852dd6.png\" alt=\"image.png\"></p>\n<p>传递函数背下来。</p>\n<h2 id=\"必会知识：\"><a href=\"#必会知识：\" class=\"headerlink\" title=\"必会知识：\"></a>必会知识：</h2><p>了解三种数据流分析方式</p>\n<ol>\n<li>reaching definitions</li>\n<li>live variables</li>\n<li>available expressions</li>\n</ol>\n<p>能够说出三种分析的异同</p>\n<p>了解为什么while循环会停</p>\n<p><strong>作业1： LIive variable analysis and iterative solver</strong></p>\n","text":" B站教程地址：https://www.bilibili.com/video/BV1oE411K79d/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://pa...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Data-Flow-Analysis%EF%BC%9A\"><span class=\"toc-text\">Data Flow Analysis：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Preliminaries-of-Data-Flow-Analysis%EF%BC%9A\"><span class=\"toc-text\">Preliminaries of Data Flow Analysis：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Input-and-Output-States%EF%BC%9A\"><span class=\"toc-text\">Input and Output States：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Notations-for-Transfer-Function%E2%80%99s-Constraints%EF%BC%9A\"><span class=\"toc-text\">Notations for Transfer Function’s Constraints：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Notations-for-Control-Flow%E2%80%99s-Constraints%EF%BC%9A\"><span class=\"toc-text\">Notations for Control Flow’s Constraints：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Data-Flow-Analysis-Applications%EF%BC%9A\"><span class=\"toc-text\">Data Flow Analysis Applications：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Issues-Not-Covered%EF%BC%9A\"><span class=\"toc-text\">Issues Not Covered：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Reaching-Definitions-Analysis%EF%BC%9A\"><span class=\"toc-text\">Reaching Definitions Analysis：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8E%E9%9D%A2%E8%BF%99%E6%AE%B5%E4%B8%8D%E5%A5%BD%E7%90%86%E8%A7%A3%EF%BC%8C%E4%B8%8D%E6%98%8E%E7%99%BD%E8%AE%B2%E7%9A%84%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%E3%80%82\"><span class=\"toc-text\">后面这段不好理解，不明白讲的什么意思。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Understanding-Reaching-Definitions%EF%BC%9A\"><span class=\"toc-text\">Understanding Reaching Definitions：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Algorithm-of-Reaching-Definitions-Analysis%EF%BC%9A\"><span class=\"toc-text\">Algorithm of Reaching Definitions Analysis：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%99%E4%B8%AAwhile%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%81%9C%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">这个while真的会停吗？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E8%BD%AE%E5%BE%AA%E7%8E%AF%EF%BC%9A\"><span class=\"toc-text\">第一轮循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E8%BD%AE%E5%BE%AA%E7%8E%AF%EF%BC%9A\"><span class=\"toc-text\">第二轮循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E8%BD%AE%E5%BE%AA%E7%8E%AF%EF%BC%9A\"><span class=\"toc-text\">第三轮循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%9B%BE%EF%BC%9A\"><span class=\"toc-text\">循环图：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#why-this-iterative-algorithm-can-finally-stop%EF%BC%9F\"><span class=\"toc-text\">why this iterative algorithm can finally stop？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Safe-to-terminate-by-this-condition\"><span class=\"toc-text\">Safe to terminate by this condition?</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Live-Variables-Analysis%EF%BC%9A\"><span class=\"toc-text\">Live Variables Analysis：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Understanding-Live-Variables-Analysis%EF%BC%9A\"><span class=\"toc-text\">Understanding Live Variables Analysis：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Algorithm-of-Live-Variables-Analysis%EF%BC%9A\"><span class=\"toc-text\">Algorithm of Live Variables Analysis：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E8%BD%AE%E5%BE%AA%E7%8E%AF%EF%BC%9A-1\"><span class=\"toc-text\">第一轮循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E8%BD%AE%E5%BE%AA%E7%8E%AF%EF%BC%9A-1\"><span class=\"toc-text\">第二轮循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E8%BD%AE%E5%BE%AA%E7%8E%AF%EF%BC%9A-1\"><span class=\"toc-text\">第三轮循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%9B%BE%EF%BC%9A-1\"><span class=\"toc-text\">循环图：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Available-Expressions-Analysis%EF%BC%9A\"><span class=\"toc-text\">Available Expressions Analysis：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Understanding-Available-Expressions-Analysis%EF%BC%9A\"><span class=\"toc-text\">Understanding Available Expressions Analysis：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Algorithm-of-Available-Expressions-Analysis%EF%BC%9A\"><span class=\"toc-text\">Algorithm of Available Expressions Analysis：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E8%BD%AE%E5%BE%AA%E7%8E%AF%EF%BC%9A-2\"><span class=\"toc-text\">第一轮循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E8%BD%AE%E5%BE%AA%E7%8E%AF%EF%BC%9A-2\"><span class=\"toc-text\">第二轮循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%9B%BE%EF%BC%9A-2\"><span class=\"toc-text\">循环图：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Analysis-Comparsion%EF%BC%9A\"><span class=\"toc-text\">Analysis Comparsion：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%85%E4%BC%9A%E7%9F%A5%E8%AF%86%EF%BC%9A\"><span class=\"toc-text\">必会知识：</span></a></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个躺平的安全layman","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"南京大学软件分析--DFA-FD","uid":"e22c2a7c39f48bb60c2d574a9a534902","slug":"南京大学软件分析-DFA-FD","date":"2022-12-24T08:54:03.000Z","updated":"2022-12-25T07:14:40.519Z","comments":true,"path":"api/articles/南京大学软件分析-DFA-FD.json","keywords":null,"cover":[],"text":" B站教程地址：https://www.bilibili.com/video/BV1A741117it/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://pa...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个躺平的安全layman","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"南京大学软件分析--IR","uid":"26fa7e60c2f997e6bbe4b4f8b6c9b6c8","slug":"南京大学软件分析-IR","date":"2022-12-20T11:44:43.000Z","updated":"2023-04-21T10:32:37.373Z","comments":true,"path":"api/articles/南京大学软件分析-IR.json","keywords":null,"cover":[],"text":" B站教程地址：https://www.bilibili.com/video/BV1zE411s77Z/?spm_id_from=333.788&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://pasca...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个躺平的安全layman","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}