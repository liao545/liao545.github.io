{"title":"南京大学软件分析--IR","uid":"26fa7e60c2f997e6bbe4b4f8b6c9b6c8","slug":"南京大学软件分析-IR","date":"2022-12-20T11:44:43.000Z","updated":"2023-04-21T10:32:37.373Z","comments":true,"path":"api/articles/南京大学软件分析-IR.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p>B站教程地址：<a href=\"https://www.bilibili.com/video/BV1zE411s77Z/?spm_id_from=333.788&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e\">https://www.bilibili.com/video/BV1zE411s77Z/?spm_id_from=333.788&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e</a></p>\n<p>英文文档地址：<a href=\"https://pascal-group.bitbucket.io/lectures/IR.pdf\">https://pascal-group.bitbucket.io/lectures/IR.pdf</a></p>\n<p>Tai-e作业文档地址：<a href=\"https://tai-e.pascal-lab.net/intro/overview.html\">https://tai-e.pascal-lab.net/intro/overview.html</a></p>\n<p><strong>IR：Intermediate Representation</strong></p>\n<h2 id=\"Compiler：\"><a href=\"#Compiler：\" class=\"headerlink\" title=\"Compiler：\"></a>Compiler：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671525253347-d4a21777-3f5b-430d-ab26-f078268f6776.png?x-oss-process=image/resize,w_905,limit_0\" alt=\"image.png\"></p>\n<p>源代码编译要经过图上几个步骤。首先进行词法分析，看内容是否符合要求。比如说使用正则表达式来验证。其次是进行语法分析，看语句的结构是否符合要求，比如使用上下文无关语法。再通过语义分析，看语句的含义是否符合要求，比如使用属性语法。之后再通过翻译器将其变成IR，这里的IR表示three-address code。而静态分析包括进行优化就是在转变成IR之后开始的。IR之前可以称为前端，IR之后称为后端。最后生成机器码。</p>\n<h2 id=\"AST-vs-IR：\"><a href=\"#AST-vs-IR：\" class=\"headerlink\" title=\"AST vs. IR：\"></a>AST vs. IR：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671526398976-5172fbef-510f-4b7e-8d87-216572b6ccb3.png\" alt=\"image.png\"></p>\n<p>从AST和IR的结构看不同。AST接近于一般编程语言，IR类似于汇编。AST依赖各种语言，语言不同，结构树也不同。IR类似于汇编，各种语言都可以转换成IR的写法，所以IR不依赖语言。AST适合于快速类型检测，IR比较压缩和紧凑。AST的结构无法看到明显的控制流信息，IR则可以很容易看到控制流信息。由于以上的特性，IR通常被视为静态分析的基础。</p>\n<h2 id=\"IR：\"><a href=\"#IR：\" class=\"headerlink\" title=\"IR：\"></a>IR：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671527133182-d21d0367-2389-4555-92ad-7221c2cd5f72.png?x-oss-process=image/resize,w_895,limit_0\" alt=\"image.png\"></p>\n<p>三地址码的右边最多只有一个操作符。每个三地址码最多包含三个地址，类型可以是如图。每种指令都有自己的3AC格式。</p>\n<h3 id=\"常见的3AC格式：\"><a href=\"#常见的3AC格式：\" class=\"headerlink\" title=\"常见的3AC格式：\"></a>常见的3AC格式：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671527498263-d5e0f185-4834-4cf6-8754-4cc805beecc2.png\" alt=\"image.png\"></p>\n<h2 id=\"Soot-and-Its-IR：Jimple\"><a href=\"#Soot-and-Its-IR：Jimple\" class=\"headerlink\" title=\"Soot and Its IR：Jimple\"></a>Soot and Its IR：Jimple</h2><p> <strong>Soot’s IR is Jimple: typed 3-address code</strong>  </p>\n<p>开源的Java静态分析框架：<a href=\"https://github.com/soot-oss/soot\">https://github.com/soot-oss/soot</a></p>\n<p>soot wiki：<a href=\"https://github.com/soot-oss/soot/wiki/Tutorials\">https://github.com/soot-oss/soot/wiki/Tutorials</a></p>\n<h2 id=\"3AC-Java代码实例：\"><a href=\"#3AC-Java代码实例：\" class=\"headerlink\" title=\"3AC Java代码实例：\"></a>3AC Java代码实例：</h2><h3 id=\"forloop：\"><a href=\"#forloop：\" class=\"headerlink\" title=\"forloop：\"></a>forloop：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package nju.sa.examples;\npublic class FroLoop3AC&#123;\n    public static void main(String[] args)&#123;\n        int x&#x3D;0;\n        for(int i&#x3D;0;i&lt;10;i++)&#123;\n            x&#x3D;x+1;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"forloop-3AC：\"><a href=\"#forloop-3AC：\" class=\"headerlink\" title=\"forloop 3AC：\"></a>forloop 3AC：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(java.lang.String[[])&#123;\n    java.loang.String[] r0;\n    int i1;\n    r0 :&#x3D; @parameter0: java.lang.String[];\n    i1&#x3D;0;\nlabel1:\n\tif i1&gt;&#x3D;10 goto label2;\n    i1&#x3D;i1+1;\n    goto label1;\nlabel2:\n\treturn;\n&#125;</code></pre>\n\n<h3 id=\"dowhile-loop：\"><a href=\"#dowhile-loop：\" class=\"headerlink\" title=\"dowhile loop：\"></a>dowhile loop：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package nju.sa.examples;\npublic class DoWhileLoop3AC&#123;\n    public static void main(String[] args)&#123;\n        int[] arr &#x3D;new int[10];\n        int 1&#x3D;0;\n        do&#123;\n            i&#x3D;i+!;\n        &#125;while(arr[i]&lt;10);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"dowhile-loop-3AC：\"><a href=\"#dowhile-loop-3AC：\" class=\"headerlink\" title=\"dowhile loop 3AC：\"></a>dowhile loop 3AC：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(java.lang.String[])&#123;\n    java.langString[] r0;\n    int[] r1;\n    int $i0, i1;\n    r0 :&#x3D; @parameter0: java.lang.String[];\n    r1&#x3D;newarray(int)[10];\n    i1&#x3D;0;\nlabel1:\n\ti1&#x3D;i1+1;\n    $i0&#x3D;r1[i1];\n    if $i0&lt;10 goto label1;\n    return;\n&#125;</code></pre>\n\n<h3 id=\"Method-Call：\"><a href=\"#Method-Call：\" class=\"headerlink\" title=\"Method Call：\"></a>Method Call：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package nju.sa.examples;\npublic class MethodCall3AC&#123;\n    String foo(String para1,String para2)&#123;\n        return para1+&quot; &quot; + para2;\n    &#125;\n\n    public static void main(String[] args)&#123;\n        MethodCall3AC mc &#x3D; new MethodCall3AC();\n        String result &#x3D;mc.foo(&quot;hello&quot;,&quot;world&quot;);s\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"Method-Call-3AC：\"><a href=\"#Method-Call-3AC：\" class=\"headerlink\" title=\"Method Call 3AC：\"></a>Method Call 3AC：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">java.lang.String foo(java.lang.String,java.lang.String&#123;\n    nju.sa.examples.MethodCall3AC r0;\n    java.lang.String r1,r2,$r7;\n    java.lang.StringBuilder $r3,$r4,$r5,$r6;\n    r0:&#x3D;@this: nju.sa.examples.MethodCall3AC;\n    r1:&#x3D;@parameter0: java.lang.String;\n    r2:&#x3D;@parameter1: java.lang.String;\n    $r3&#x3D;new java.lang.StringBuilder;\n    specialinvoke $r3.&lt;java.lang.StringBuilder: void &lt;init&gt;()&gt;();\n    $r4&#x3D;virtualinvoke $r3.&lt;java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)&gt;(r1);\n    $r5&#x3D;virtualinvoke $r4.&lt;java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)&gt;(&quot; &quot;);\n    $r6&#x3D;virtualinvoke $r5.&lt;java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)&gt;(r2);\n    $r7&#x3D;virtualinvoke $r6.&lt;java.lang.StringBuilder: java.lang.StringBuilder toString()&gt;();\n    return $r7;\n&#125;\n\npublic static void main(java.lang.String[])&#123;\n    java.lang.String[] r0;\n    nju.sa.examples.MethodCall3AC $r3;\n    r0 :&#x3D;@parameter0: java.lang.String[];\n    $r3 &#x3D; new nju.sa.examples.MethodCall3AC;\n    specialinvoke $r3.&lt;nju.sa.examples.MethodCall3AC: void &lt;init&gt;()&gt;();\n    virtualinvoke $r3.&lt;nju.sa.examples.MethodCall3AC:\n            java.lang.String foo(java.lang.String,java.lang.String)&gt;(&quot;hello&quot;,&quot;world&quot;);\n\n    return;\n&#125;</code></pre>\n\n<p>&lt;&gt;里面是method signature：class name：return type method name(parameter1 type,parameter2 type,…)</p>\n<h3 id=\"四种invoke：\"><a href=\"#四种invoke：\" class=\"headerlink\" title=\"四种invoke：\"></a>四种invoke：</h3><p>invokespecial：call constructor，ccall superclass methods，call private methods</p>\n<p>invokevirutal：instance methods call（virtual dispatch）</p>\n<p>invokeinterface：cannot optimization，checking interface implementation</p>\n<p>invokestatic：call static methods</p>\n<p>Java7引进：invokedynamic-&gt;Java static typing，dynamic language runs on JVM</p>\n<h3 id=\"Class：\"><a href=\"#Class：\" class=\"headerlink\" title=\"Class：\"></a>Class：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package nju.sa.examples;\npublic class Class3AC&#123;\n    public static final double pi&#x3D;3.14;\n    public static void main(String[] args)&#123;\n        \n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"Class-3AC：\"><a href=\"#Class-3AC：\" class=\"headerlink\" title=\"Class 3AC：\"></a>Class 3AC：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class nju.sa.examples.Class3AC extends java.lang.object&#123;\n    public static final double pi;\n    public void &lt;init&gt;()&#123;\n        nju.sa.examples.Class3AC r0;\n        r0:&#x3D;@this: nju.sa.examples.Class3AC;\n        specialinvoke r0.&lt;java.lang.object: void &lt;init&gt;()&gt;();\n        return;\n    &#125;\n\n\n\tpublic static void main(java.lang.String[])&#123;\n    \tjava.lang.String[] r0;\n   \t\tr0 :&#x3D;@parameter0: java.lang.String[];\n    \treturn;\n\t&#125;\n\n\tpublic static void &lt;clinit&gt;()&#123;\n    &lt;nju.sa.examples.Class3AC: double pi&gt;&#x3D;3.14;\n    return;\n\t&#125;\n&#125;</code></pre>\n\n<p>clinit是类初始化的静态属性。类中有静态属性就会调用这个方法初始化。</p>\n<h2 id=\"SSA：\"><a href=\"#SSA：\" class=\"headerlink\" title=\"SSA：\"></a>SSA：</h2><h3 id=\"Static-Single-Assignment（SSA）\"><a href=\"#Static-Single-Assignment（SSA）\" class=\"headerlink\" title=\"Static Single Assignment（SSA）\"></a>Static Single Assignment（SSA）</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671533404402-de7ecc5f-4cf4-4e00-9366-25a863a6b048.png\" alt=\"image.png\"></p>\n<p>SSA中所有赋值都指向不同的变量，每个定义一个新的名称，后续使用用前面定义的新名称，每个变量都有一个定义。</p>\n<p>变量在控制流合并时使用：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671533648281-2b6c2b9b-da49-4913-95c0-3f06c7e8a67e.png\" alt=\"image.png\"></p>\n<p>有一个phi-function</p>\n<h3 id=\"Why-not-SSA\"><a href=\"#Why-not-SSA\" class=\"headerlink\" title=\"Why (not) SSA?\"></a>Why (not) SSA?</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671533948113-dbd93c96-081d-47dc-a42d-cf10bf12f2c4.png?x-oss-process=image/resize,w_907,limit_0\" alt=\"image.png\"></p>\n<p>看文档翻译一下吧。</p>\n<h2 id=\"Control-Flow-Analysis：\"><a href=\"#Control-Flow-Analysis：\" class=\"headerlink\" title=\"Control Flow Analysis：\"></a>Control Flow Analysis：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671534130551-f0292ee4-e4fb-487d-8901-bd307d570a76.png?x-oss-process=image/resize,w_902,limit_0\" alt=\"image.png\"></p>\n<p>通常参考控制流程图，CFG作为静态分析的基本结构，CFG中的节点可以是单独的3地址指令，或Basic Block。</p>\n<h3 id=\"Basic-Blocks（BB）：\"><a href=\"#Basic-Blocks（BB）：\" class=\"headerlink\" title=\"Basic Blocks（BB）：\"></a>Basic Blocks（BB）：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671534414803-e86ec062-f3c3-46be-abaa-5b01f4740874.png\" alt=\"image.png\"></p>\n<p>Basic Block有如下基本特征，只能在开头即第一条指令输入，只能在最后即最后一条指令退出。</p>\n<h3 id=\"design-basic-blocks-algotithm：\"><a href=\"#design-basic-blocks-algotithm：\" class=\"headerlink\" title=\"design basic blocks algotithm：\"></a>design basic blocks algotithm：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671534845320-5914d187-9251-4c02-a095-f1708b1195f5.png\" alt=\"image.png\"></p>\n<p>goto不是出口就是入口，一般表达式可作为结尾。</p>\n<p>如何做：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671534923479-fdd230b5-b9db-4dfd-aabe-3166f84063d5.png\" alt=\"image.png\"></p>\n<p>第一条指令是入口，有条件或无条件跳转是入口，任何跟随有条件或无条件跳转的指令都是入口。</p>\n<p>BB以一个入口及后续所有指令组成，直到下一个入口。</p>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671535395897-c1853506-1f5f-47d2-958f-e1e1c51267bd.png\" alt=\"image.png\"></p>\n<p>结果：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671535395897-c1853506-1f5f-47d2-958f-e1e1c51267bd.png\" alt=\"image.png\"></p>\n<h2 id=\"Control-Flow-Graph：\"><a href=\"#Control-Flow-Graph：\" class=\"headerlink\" title=\"Control Flow Graph：\"></a>Control Flow Graph：</h2><p>CFG的节点是Basic Block</p>\n<p>存在block A到block B的边当且仅当：</p>\n<ol>\n<li>从A结尾到B的开头有条件或无条件的跳转，加边</li>\n<li>B按照原始指令顺序紧跟在A之后，且A不会以无条件跳转结束，加边</li>\n</ol>\n<p>普通跳转指令可以转变为跳转到basic block</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671536304705-32a14144-63a2-4325-b098-f648bca07158.png?x-oss-process=image/resize,w_903,limit_0\" alt=\"image.png\"></p>\n<h3 id=\"实列：\"><a href=\"#实列：\" class=\"headerlink\" title=\"实列：\"></a>实列：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671536434698-f3ba16d5-53d2-40dd-81c2-6e9383a499c8.png?x-oss-process=image/resize,w_937,limit_0\" alt=\"image.png\"></p>\n<p>流程看PPT。</p>\n<h2 id=\"从3AC到CFG：\"><a href=\"#从3AC到CFG：\" class=\"headerlink\" title=\"从3AC到CFG：\"></a>从3AC到CFG：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671536531770-91c82197-7767-4dda-9134-714ad08f4ff6.png\" alt=\"image.png\"></p>\n<h2 id=\"必会知识点：\"><a href=\"#必会知识点：\" class=\"headerlink\" title=\"必会知识点：\"></a>必会知识点：</h2><p>•编译器与静态分析器之间的关系？</p>\n<p>•了解3AC及其常见形式？</p>\n<p>•如何在IR之上构建basic block？</p>\n<p>•如何在BBs之上构建控制流程图？</p>\n","text":" B站教程地址：https://www.bilibili.com/video/BV1zE411s77Z/?spm_id_from=333.788&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://pasca...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Compiler%EF%BC%9A\"><span class=\"toc-text\">Compiler：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AST-vs-IR%EF%BC%9A\"><span class=\"toc-text\">AST vs. IR：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IR%EF%BC%9A\"><span class=\"toc-text\">IR：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%843AC%E6%A0%BC%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">常见的3AC格式：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Soot-and-Its-IR%EF%BC%9AJimple\"><span class=\"toc-text\">Soot and Its IR：Jimple</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3AC-Java%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">3AC Java代码实例：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#forloop%EF%BC%9A\"><span class=\"toc-text\">forloop：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#forloop-3AC%EF%BC%9A\"><span class=\"toc-text\">forloop 3AC：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dowhile-loop%EF%BC%9A\"><span class=\"toc-text\">dowhile loop：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dowhile-loop-3AC%EF%BC%9A\"><span class=\"toc-text\">dowhile loop 3AC：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Method-Call%EF%BC%9A\"><span class=\"toc-text\">Method Call：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Method-Call-3AC%EF%BC%9A\"><span class=\"toc-text\">Method Call 3AC：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E7%A7%8Dinvoke%EF%BC%9A\"><span class=\"toc-text\">四种invoke：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Class%EF%BC%9A\"><span class=\"toc-text\">Class：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Class-3AC%EF%BC%9A\"><span class=\"toc-text\">Class 3AC：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSA%EF%BC%9A\"><span class=\"toc-text\">SSA：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Static-Single-Assignment%EF%BC%88SSA%EF%BC%89\"><span class=\"toc-text\">Static Single Assignment（SSA）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Why-not-SSA\"><span class=\"toc-text\">Why (not) SSA?</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Control-Flow-Analysis%EF%BC%9A\"><span class=\"toc-text\">Control Flow Analysis：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Basic-Blocks%EF%BC%88BB%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">Basic Blocks（BB）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#design-basic-blocks-algotithm%EF%BC%9A\"><span class=\"toc-text\">design basic blocks algotithm：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">示例：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Control-Flow-Graph%EF%BC%9A\"><span class=\"toc-text\">Control Flow Graph：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E5%88%97%EF%BC%9A\"><span class=\"toc-text\">实列：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E3AC%E5%88%B0CFG%EF%BC%9A\"><span class=\"toc-text\">从3AC到CFG：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%85%E4%BC%9A%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">必会知识点：</span></a></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"南京大学软件分析--DFA-AP","uid":"7843e3842ab5cae178372dfeef42c5ae","slug":"南京大学软件分析-DFA-AP","date":"2022-12-21T12:50:14.000Z","updated":"2023-04-21T10:26:43.524Z","comments":true,"path":"api/articles/南京大学软件分析-DFA-AP.json","keywords":null,"cover":[],"text":" B站教程地址：https://www.bilibili.com/video/BV1oE411K79d/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://pa...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"南京大学软件分析--介绍","uid":"d82e0720104dc3bfe88e058fc58082b0","slug":"南京大学软件分析-介绍","date":"2022-12-20T07:58:53.000Z","updated":"2023-04-21T10:36:30.307Z","comments":true,"path":"api/articles/南京大学软件分析-介绍.json","keywords":null,"cover":[],"text":" B站教程地址：https://www.bilibili.com/video/BV1b7411K7P4/?spm_id_from=333.999.0.0&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://p...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}