{"title":"南京大学软件分析--IA","uid":"7c0ae3fae65c1cc802990d3363df7f00","slug":"南京大学软件分析-IA","date":"2022-12-25T10:25:58.000Z","updated":"2022-12-26T08:38:33.044Z","comments":true,"path":"api/articles/南京大学软件分析-IA.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p>B站教程地址：<a href=\"https://www.bilibili.com/video/BV1GQ4y1T7zm/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e\">https://www.bilibili.com/video/BV1GQ4y1T7zm/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e</a></p>\n<p>英文文档地址：<a href=\"https://pascal-group.bitbucket.io/lectures/Inter.pdf\">https://pascal-group.bitbucket.io/lectures/Inter.pdf</a></p>\n<p>Tai-e作业文档地址：<a href=\"https://tai-e.pascal-lab.net/intro/overview.html\">https://tai-e.pascal-lab.net/intro/overview.html</a></p>\n<p><strong>IA：Interprocedural  Analysis</strong></p>\n<h2 id=\"Motivation-of-Interprocedural-Analysis：\"><a href=\"#Motivation-of-Interprocedural-Analysis：\" class=\"headerlink\" title=\"Motivation of Interprocedural Analysis：\"></a>Motivation of Interprocedural Analysis：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671952193055-7b32e1e5-edce-48c3-ac2b-e68602e24393.png?x-oss-process=image/resize,w_897,limit_0\" alt=\"image.png\"></p>\n<p>前面的过程分析时没有处理方法调用，太过于保守，就像模糊匹配一样，丢失了一些精度。</p>\n<p>所以，为了更好的精度。就需要过程间分析：传播数据流</p>\n<p>添加过程间的调用边，以及返回的边，在图上</p>\n<p>这样就能得到准确的值</p>\n<p>所以需要构造程序的调用图</p>\n<h2 id=\"Call-Graph：\"><a href=\"#Call-Graph：\" class=\"headerlink\" title=\"Call Graph：\"></a>Call Graph：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671953335024-1e8faca4-1017-4204-986c-141875d5af6d.png\" alt=\"image.png\"></p>\n<p>调用图就是调用点到目标方法形成的调用边的集合。（到i这里能联系到框架的设计上了）</p>\n<h3 id=\"Applications-of-Call-Graph：\"><a href=\"#Applications-of-Call-Graph：\" class=\"headerlink\" title=\"Applications of Call Graph：\"></a>Applications of Call Graph：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671953484831-ff1f4461-dddd-45ac-8ca7-beeb0090dac1.png\" alt=\"image.png\"></p>\n<p>调用图的一些应用点。</p>\n<h3 id=\"Call-Graph-Consruction-for-OOPLs（focus-on-Java）：\"><a href=\"#Call-Graph-Consruction-for-OOPLs（focus-on-Java）：\" class=\"headerlink\" title=\"Call Graph Consruction for OOPLs（focus on Java）：\"></a>Call Graph Consruction for OOPLs（focus on Java）：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671953777239-716222ed-27a8-41d6-8c92-ad9b3cf36ab0.png\" alt=\"image.png\"></p>\n<p>图上四个算法从上到下精度越高，从下到上速度越快</p>\n<p>这节课学习：Class hierarchy analysis（CHA）</p>\n<p>下节课学习：Pointer analysis（k-CFA）</p>\n<h3 id=\"Method-Calls-（Invocations）in-Java：\"><a href=\"#Method-Calls-（Invocations）in-Java：\" class=\"headerlink\" title=\"Method Calls （Invocations）in Java：\"></a>Method Calls （Invocations）in Java：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671953943888-7811daab-71ae-49d6-aaa4-93412cd6af25.png\" alt=\"image.png\"></p>\n<p>Java中一般有三种调用。第四种前面章节讲的那个不考虑。</p>\n<p>x表示这种调用没有对象作为参数？？？（弹幕，不确定）</p>\n<p>在后面一个ppt直到了，就是调用对象</p>\n<p>关键难点在于处理virtual call</p>\n<h3 id=\"Method-Dispatch-of-Virtual-Calls：\"><a href=\"#Method-Dispatch-of-Virtual-Calls：\" class=\"headerlink\" title=\"Method Dispatch of Virtual Calls：\"></a>Method Dispatch of Virtual Calls：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671954553832-ca28b81f-4cc9-4605-9aea-5080eb1d36e3.png\" alt=\"img\"></p>\n<ol>\n<li>接收对象的类型</li>\n<li>调用点的方法签名</li>\n</ol>\n<p>在这个课程中，signature被称为方法的标识符</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671954694380-26eb3569-c577-44e1-ab00-43e00d2f8121.png\" alt=\"image.png\"></p>\n<p>定义函数dispatch（c，m）模拟运行时方法分配过程</p>\n<p>其中1是c，2是m（1是前面的1）</p>\n<p>有具体的m’就返回m’，没有就在父类找，之后找到具体的m’</p>\n<h4 id=\"Dispatch：An-Example：\"><a href=\"#Dispatch：An-Example：\" class=\"headerlink\" title=\"Dispatch：An Example：\"></a>Dispatch：An Example：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671955232647-7dced365-401a-472d-8b99-ecd6d30094d4.png\" alt=\"image.png\"></p>\n<p>第一个是A.foo()，找不到b中具体的方法就找父类A中的方法。</p>\n<p>第二个是C.foo()，在c中找到了具体方法，直接返回</p>\n<h2 id=\"Class-Hierarchy-Analysis-（CHA）：\"><a href=\"#Class-Hierarchy-Analysis-（CHA）：\" class=\"headerlink\" title=\"Class Hierarchy Analysis* （CHA）：\"></a>Class Hierarchy Analysis* （CHA）：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671955503633-4ca7adc0-ce1e-49f3-a320-6bf192388d58.png?x-oss-process=image/resize,w_903,limit_0\" alt=\"image.png\"></p>\n<p>这种分析需要整个程序的类层次结构信息（继承结构）</p>\n<p>基于调用点的声明接收变量类型解析virtual call</p>\n<p>假设接收变量a可以指向A类对象或A的所有子类，就通过查找A类层次结构来解析目标方法</p>\n<h3 id=\"Call-Resolution-of-CHA：\"><a href=\"#Call-Resolution-of-CHA：\" class=\"headerlink\" title=\"Call Resolution of CHA：\"></a>Call Resolution of CHA：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671956115325-6ee5359d-6423-46dc-8b02-0da1ebb66a10.png\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671956433745-ed2a2a5d-885d-4664-add5-6ab8bee71cbe.png?x-oss-process=image/resize,w_902,limit_0\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671956151549-e1d23050-9de6-4898-8389-dba66e6515aa.png\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671956175456-e3384db0-fc2a-4eb3-a014-62f315054844.png\" alt=\"image.png\"></p>\n<p>通过CHA我们定义Resolve(cs)函数解决调用点cs的可能目标方法</p>\n<p>上图就是三种调用方式的情况</p>\n<p>对于第三种情况，直接将所有有关的子类（c和c的子类）都添加dispatch方法并把结果放到T中</p>\n<h3 id=\"CHA：An-Example：\"><a href=\"#CHA：An-Example：\" class=\"headerlink\" title=\"CHA：An Example：\"></a>CHA：An Example：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671956903914-0c254dcf-2367-4e86-b753-5049529d29e3.png\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671957147115-31c4cbbd-2f5e-4753-94fc-c22d7d0f2c11.png\" alt=\"image.png\"></p>\n<p>要是b语句是下面这种情况，还是一样的结果。因为CHA只考虑声明类型。</p>\n<p>同时也暴露了CHA的缺点，下面这种情况，是不会调用c和d类中的方法的。</p>\n<p>其实这个算法也是和前面一样的套娃，还是模糊匹配。</p>\n<h3 id=\"Features-of-CHA：\"><a href=\"#Features-of-CHA：\" class=\"headerlink\" title=\"Features of CHA：\"></a>Features of CHA：</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671957544487-b50adba2-d544-43b0-8d1a-0361aac30613.png\" alt=\"image.png\"></p>\n<p>CHA的特点就很适合IDE的提示。</p>\n<h4 id=\"CHA-in-IDE：\"><a href=\"#CHA-in-IDE：\" class=\"headerlink\" title=\"CHA in IDE：\"></a>CHA in IDE：</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671957765015-7a664204-1c71-409e-acc9-93f3399970c7.png\" alt=\"image.png\"></p>\n<h2 id=\"Call-Graph-Construction：\"><a href=\"#Call-Graph-Construction：\" class=\"headerlink\" title=\"Call Graph Construction：\"></a>Call Graph Construction：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671957946558-9e039c94-f423-4dc6-adff-2987cfe966e0.png\" alt=\"image.png\"></p>\n<p>从main方法一直使用CHA找到能到达的方法添加边，之后没有产生新的可到达的方法，算法停止</p>\n<h3 id=\"Call-Graph-Construction：Algorithm\"><a href=\"#Call-Graph-Construction：Algorithm\" class=\"headerlink\" title=\"Call Graph Construction：Algorithm\"></a>Call Graph Construction：Algorithm</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671958189961-68fc1464-afea-4200-a19e-d8a8ad6d3ad8.png?x-oss-process=image/resize,w_907,limit_0\" alt=\"image.png\"></p>\n<p>开始有一个进入方法也就是前面说的主方法，之后进行处理找到能到达的新方法，添加到worklist里面。一直处理完worklist里面的所有方法，算法停止，返回CG。</p>\n<h3 id=\"Call-Graph-Construction：An-Example\"><a href=\"#Call-Graph-Construction：An-Example\" class=\"headerlink\" title=\"Call Graph Construction：An Example\"></a>Call Graph Construction：An Example</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671959301065-58a44d6d-acfb-4abd-bd54-1758c8d93af0.png\" alt=\"image.png\"></p>\n<p>开始主函数处理A.foo()，因为A.foo()是静态方法，所以只会添加A.foo()到worklist。接下来处理A.foo()里面的a.bar()，会添加A和A所有子类的bar()方法，所以是A.bar(),B.bar(),C.bar()。接下来就是啊。A.bar()里面的c.bar()，就只会添加C.bar()。之后就是前面添加的B.bar()，是空方法，不添加。之后就是C.bar()里面的A.foo()，找A和A的子类的foo方法，会找到A.foo()，没有新方法。不添加。worklist空了，算法停止。</p>\n<h2 id=\"Interprocedural-Control-Flow-Graph：\"><a href=\"#Interprocedural-Control-Flow-Graph：\" class=\"headerlink\" title=\"Interprocedural Control-Flow Graph：\"></a>Interprocedural Control-Flow Graph：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671960114641-6f209f46-70e5-4fc7-b456-8a3c3cf32fd0.png?x-oss-process=image/resize,w_901,limit_0\" alt=\"image.png\"></p>\n<p>CFG表示单个方法的结构，ICFG表示整个项目的结构。通过ICFG可以进行过程间分析，程序的ICFG就是通过call site和return site附加多个CFG组成。</p>\n<h3 id=\"ICFG：An-Example\"><a href=\"#ICFG：An-Example\" class=\"headerlink\" title=\"ICFG：An Example\"></a>ICFG：An Example</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671960249995-aac6699c-33c2-4915-b059-48cf1fef9c69.png\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671960273129-710cbab5-9fd8-40fa-804d-e610799dd70a.png\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671960288690-1bf6516e-65d0-4742-9a0e-a0764d4a1226.png?x-oss-process=image/resize,w_890,limit_0\" alt=\"image.png\"></p>\n<h2 id=\"Interprocedural-Data-Flow-Analysis\"><a href=\"#Interprocedural-Data-Flow-Analysis\" class=\"headerlink\" title=\"Interprocedural Data-Flow Analysis\"></a>Interprocedural Data-Flow Analysis</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671960484665-7719d0f0-a624-4f65-8988-7849c37fefe0.png?x-oss-process=image/resize,w_902,limit_0\" alt=\"image.png\"></p>\n<h3 id=\"Interprocedural-Constant-Propagation\"><a href=\"#Interprocedural-Constant-Propagation\" class=\"headerlink\" title=\"Interprocedural Constant Propagation\"></a>Interprocedural Constant Propagation</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671960691079-c6c14939-d3ef-4e77-bf71-51b3e56d07a7.png\" alt=\"image.png\"></p>\n<p>新版ppt说的是将LHS变量（返回值）的处理留给edge transfer</p>\n<p>视频上说是要kill掉这个left hand side variable（左手边变量）</p>\n<p>后面的例子有清楚的过程</p>\n<h3 id=\"Interprocedural-Constant-Propagation-：An-Example\"><a href=\"#Interprocedural-Constant-Propagation-：An-Example\" class=\"headerlink\" title=\"Interprocedural Constant Propagation ：An Example\"></a>Interprocedural Constant Propagation ：An Example</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671961810466-6e26fb67-ce20-4861-98bc-b221f1a91f3d.png?x-oss-process=image/resize,w_903,limit_0\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671962039576-cf6a5cc0-370f-4140-adc7-52acfc8d4eed.png?x-oss-process=image/resize,w_903,limit_0\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671962068749-11db83f2-4b6c-4e79-a95d-e7d21ce1161f.png?x-oss-process=image/resize,w_905,limit_0\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671962082246-2b678a67-cbeb-4e81-bd9f-0d5fa4c4c33e.png?x-oss-process=image/resize,w_903,limit_0\" alt=\"image.png\"></p>\n<p>有调用边和返回边还需要从上到下的边是应为方便传递本地变量。kill左值改变的，是因为防止其在下个输入变成NAC导致结果不精确。</p>\n<p>其中的调用边上的表达式就是call 的传递函数，返回边上的表达式就是return 的传递函数</p>\n<h3 id=\"Intraprocedural-Constant-Propagation-：An-Example\"><a href=\"#Intraprocedural-Constant-Propagation-：An-Example\" class=\"headerlink\" title=\"Intraprocedural Constant Propagation ：An Example\"></a>Intraprocedural Constant Propagation ：An Example</h3><p>以前的分析方式，两者做一个对比</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1671963008204-db0dffb7-8def-43c8-8583-90788b19d922.png\" alt=\"image.png\"></p>\n<p>所以得出inter的精度超过了intra</p>\n<h2 id=\"必会知识点：\"><a href=\"#必会知识点：\" class=\"headerlink\" title=\"必会知识点：\"></a>必会知识点：</h2><ol>\n<li>如何通过类层次分析构建调用图</li>\n<li>过程间控制流程图的概念</li>\n<li>过程间数据流分析的概念</li>\n<li>程序间常量传播</li>\n</ol>\n","text":" B站教程地址：https://www.bilibili.com/video/BV1GQ4y1T7zm/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://pa...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":23,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Motivation-of-Interprocedural-Analysis%EF%BC%9A\"><span class=\"toc-text\">Motivation of Interprocedural Analysis：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Call-Graph%EF%BC%9A\"><span class=\"toc-text\">Call Graph：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Applications-of-Call-Graph%EF%BC%9A\"><span class=\"toc-text\">Applications of Call Graph：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Call-Graph-Consruction-for-OOPLs%EF%BC%88focus-on-Java%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">Call Graph Consruction for OOPLs（focus on Java）：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Method-Calls-%EF%BC%88Invocations%EF%BC%89in-Java%EF%BC%9A\"><span class=\"toc-text\">Method Calls （Invocations）in Java：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Method-Dispatch-of-Virtual-Calls%EF%BC%9A\"><span class=\"toc-text\">Method Dispatch of Virtual Calls：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dispatch%EF%BC%9AAn-Example%EF%BC%9A\"><span class=\"toc-text\">Dispatch：An Example：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Class-Hierarchy-Analysis-%EF%BC%88CHA%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">Class Hierarchy Analysis* （CHA）：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Call-Resolution-of-CHA%EF%BC%9A\"><span class=\"toc-text\">Call Resolution of CHA：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CHA%EF%BC%9AAn-Example%EF%BC%9A\"><span class=\"toc-text\">CHA：An Example：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Features-of-CHA%EF%BC%9A\"><span class=\"toc-text\">Features of CHA：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CHA-in-IDE%EF%BC%9A\"><span class=\"toc-text\">CHA in IDE：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Call-Graph-Construction%EF%BC%9A\"><span class=\"toc-text\">Call Graph Construction：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Call-Graph-Construction%EF%BC%9AAlgorithm\"><span class=\"toc-text\">Call Graph Construction：Algorithm</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Call-Graph-Construction%EF%BC%9AAn-Example\"><span class=\"toc-text\">Call Graph Construction：An Example</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Interprocedural-Control-Flow-Graph%EF%BC%9A\"><span class=\"toc-text\">Interprocedural Control-Flow Graph：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ICFG%EF%BC%9AAn-Example\"><span class=\"toc-text\">ICFG：An Example</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Interprocedural-Data-Flow-Analysis\"><span class=\"toc-text\">Interprocedural Data-Flow Analysis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Interprocedural-Constant-Propagation\"><span class=\"toc-text\">Interprocedural Constant Propagation</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Interprocedural-Constant-Propagation-%EF%BC%9AAn-Example\"><span class=\"toc-text\">Interprocedural Constant Propagation ：An Example</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Intraprocedural-Constant-Propagation-%EF%BC%9AAn-Example\"><span class=\"toc-text\">Intraprocedural Constant Propagation ：An Example</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%85%E4%BC%9A%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">必会知识点：</span></a></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"南京大学软件分析--PA","uid":"4063b5a2c98c833f090c95343895b35d","slug":"南京大学软件分析-PA","date":"2022-12-26T08:37:30.000Z","updated":"2022-12-26T09:23:46.364Z","comments":true,"path":"api/articles/南京大学软件分析-PA.json","keywords":null,"cover":[],"text":" B站教程地址：https://www.bilibili.com/video/BV1gg4y1z78p/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://pa...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":23,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"南京大学软件分析--DFA-FD","uid":"e22c2a7c39f48bb60c2d574a9a534902","slug":"南京大学软件分析-DFA-FD","date":"2022-12-24T08:54:03.000Z","updated":"2022-12-25T07:14:40.519Z","comments":true,"path":"api/articles/南京大学软件分析-DFA-FD.json","keywords":null,"cover":[],"text":" B站教程地址：https://www.bilibili.com/video/BV1A741117it/?spm_id_from=pageDriver&amp;vd_source=6632b385bcaaeb6eb7c62e69b2587a3e 英文文档地址：https://pa...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"软件分析","slug":"软件分析","count":7,"path":"api/categories/软件分析.json"}],"tags":[{"name":"Java","slug":"Java","count":23,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}