{"title":"Java反序列化1笔记","uid":"ef40a0cd7170df96b7fe2fe93ccaa11e","slug":"Java反序列化1笔记","date":"2022-09-05T11:53:13.000Z","updated":"2022-09-10T07:34:11.423Z","comments":true,"path":"api/articles/Java反序列化1笔记.json","keywords":null,"cover":null,"content":"<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h1><p>p牛 Java安全漫谈7 8  反序列化1 2</p>\n<p><a href=\"https://t.zsxq.com/05QrVnMBy\">https://t.zsxq.com/05QrVnMBy</a></p>\n<p><a href=\"https://t.zsxq.com/053zvFeAu\">https://t.zsxq.com/053zvFeAu</a></p>\n<h1 id=\"Java反序列化利用基础\"><a href=\"#Java反序列化利用基础\" class=\"headerlink\" title=\"Java反序列化利用基础\"></a>Java反序列化利用基础</h1><p>在Java 中，主要是通过</p>\n<p>writeobject写入序列化数据到stream</p>\n<p>并将</p>\n<p>序列化输入的数据保存到 Annotation  中</p>\n<p>通过</p>\n<p>readobject读取写入到stream的序列化数据将其反序列化执行</p>\n<h1 id=\"URLDNS反序列化利用链（gadget）\"><a href=\"#URLDNS反序列化利用链（gadget）\" class=\"headerlink\" title=\"URLDNS反序列化利用链（gadget）\"></a>URLDNS反序列化利用链（gadget）</h1><p> ysoserial的URLDNS类，通过getobject方法获取payload，getobject方法将会返回被序列化的对象，这个对象在这条链里是hashmap</p>\n<p>通过hashmap类的readobject方法触发反序列化</p>\n<p>在hashmap的readobject方法中会执行hash方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">putVal(*hash*(key), key, value, false, false);</code></pre>\n\n<p>这个hash方法直接使用的在hashmap中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);</code></pre>\n\n<p>hash方法又调用了hashcode方法，这次调用是通过key调用的</p>\n<p>这个key是yso实例化的一个url对象，所以查看url中的hashcode方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (hashCode !&#x3D; -1)\n    return hashCode;\n\nhashCode &#x3D; handler.hashCode(this);\nreturn hashCode;</code></pre>\n\n<p>序列化时设置了</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Reflections.*setFieldValue*(u, &quot;hashCode&quot;, -1); &#x2F;&#x2F; During the put above, the URL&#39;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</code></pre>\n\n<p>这个url对象的hashcode初始值为-1，就会调用handler的hashcode方法</p>\n<p>这个handler是URLStreamHandler对象的某个子类对象  （这个不知道代码在哪里写了）可能是这个</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">static Hashtable&lt;String,URLStreamHandler&gt; *handlers* &#x3D; new Hashtable&lt;&gt;();</code></pre>\n\n<p>URLStreamHandler是抽象类，所以只能实例化继承的子类</p>\n<p>在hashtable中没有重载或是覆写那么调用的这个方法就是在URLStreamHandler这个类中存在的该方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">InetAddress addr &#x3D; getHostAddress(u);</code></pre>\n\n<p>调用了getHostAddress方法，这个方法</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">return u.getHostAddress();</code></pre>\n\n<p>又调用了u也就是key的getHostAddress方法，在url类中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">hostAddress &#x3D; InetAddress.*getByName*(host);</code></pre>\n\n<p>这个getHostAddress方法又调用InetAddress的getByName方法</p>\n<p>这个getByName方法的实现，是调用了getByAllName方法，作用是根据主机名，获取其IP地址，也就是发出一次DNS请求</p>\n<p>在yso中为了防止发出生成payload的时候也发出url请求和DNS查询，就重写了URLStreamHandler中的SilentURLStreamHandler类。</p>\n<h2 id=\"整个流程：\"><a href=\"#整个流程：\" class=\"headerlink\" title=\"整个流程：\"></a>整个流程：</h2><p>URLDNS—-&gt;HashMap.readobject()</p>\n<p>HashMap.readobject()—-&gt;HashMap.hash()</p>\n<p>HashMap.hash()—-&gt;URL.hashcode()</p>\n<p>URL.hashcode()—-&gt;URLStreamHandler.hashcode()</p>\n<p>URLStreamHandler.hashcode()—-&gt;URLStreamHandler.getHostAddress()</p>\n<p>URLStreamHandler.getHostAddress()—-&gt;URL.getHostAddress()</p>\n<p>URL.getHostAddress()—-&gt;InetAddress.getByName()</p>\n<p>上面的URLStreamHandler.getHostAddress()是一个重载方法，可以和URL.getHostAddress()一起当作是一个函数的调用</p>\n<h2 id=\"星球问题解答：\"><a href=\"#星球问题解答：\" class=\"headerlink\" title=\"星球问题解答：\"></a>星球问题解答：</h2><p>会上树的猪：</p>\n<p>p师傅，关于这个链有一个小问题想请教。就是在对URL进行反序列化的时候不会调用构造方法了，那反序列化之后的handler属性是在哪一步被赋值的，我debug了一下URL类的readObject方法，只看到有一个调用了getURLStreamHandler()方法，是和handler属性有关的。就是这个handler的生成不是很明白，望师傅答疑</p>\n<p>cc：</p>\n<p>最近也在学Java反序列化，这个问题在分析的时候也困扰着我。后面经过分析发现。在URL类中还有一个方法是readResolve。在readResolve方法中会调用fabricateNewURL方法中new URL实例返回。在new URL(urlString);中会对handler进行赋值：this.handler = handler。并且在反序列化的时候会自动调用readResolve方法。注：可下断点在invokeReadResolve方法上，内部通过反射调用了readResolve。 readResolve作用，其方法的返回值为一个Object对象，该方法返回的对象将会代替反序列化的结果，直接将其作为反序列化的结果返回给上层调用ObjectInputStream对象readObject方法的结果。 分析过后感觉这个readResolve也是一个可利用的点，与readObject一样会自动调用。应该也可以通过readResolve作为入口的链。不过目前没有看到有链利用到了这一个，所以也不知道自己分析的对不对，求大家解答。</p>\n","text":"参考资料：p牛 Java安全漫谈7 8 反序列化1 2 https://t.zsxq.com/05QrVnMBy https://t.zsxq.com/053zvFeAu Java反序列化利用基础在Java 中，主要是通过 writeobject写入序列化数据到stream 并将...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":20,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A\"><span class=\"toc-text\">参考资料：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Java反序列化利用基础</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%88gadget%EF%BC%89\"><span class=\"toc-text\">URLDNS反序列化利用链（gadget）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%B8%AA%E6%B5%81%E7%A8%8B%EF%BC%9A\"><span class=\"toc-text\">整个流程：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%9F%E7%90%83%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94%EF%BC%9A\"><span class=\"toc-text\">星球问题解答：</span></a></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java反序列化2笔记","uid":"40de76659604bae52b4863ba88be567d","slug":"Java反序列化2笔记","date":"2022-09-05T11:58:43.000Z","updated":"2022-09-06T04:28:09.026Z","comments":true,"path":"api/articles/Java反序列化2笔记.json","keywords":null,"cover":null,"text":"参考资料：p牛 Java安全漫谈 9 10 11反序列化3 4 5： https://t.zsxq.com/05MzN7miq https://t.zsxq.com/05AAAEYVN https://t.zsxq.com/05VVRfAea 前面了解了反序列化利用基础，和URL...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":20,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java RMI笔记","uid":"fb61931117f747252b543f33903e3e6d","slug":"Java-RMI笔记","date":"2022-09-05T11:38:51.000Z","updated":"2022-09-05T11:52:31.086Z","comments":true,"path":"api/articles/Java-RMI笔记.json","keywords":null,"cover":null,"text":"参考资料：廖雪峰老师 Java教程 RMI https://www.liaoxuefeng.com/wiki/1252599548343744/1323711850348577 p牛 Java安全漫谈456 RMI https://t.zsxq.com/052Nj62Jq htt...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":20,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}